<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-04-29T23:00:38-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Techie Notes</title><subtitle>Learning to solve problems better</subtitle><author><name>Parth Mehta</name><email>pm2877@columbia.edu</email></author><entry><title type="html">Negotiations Workshop</title><link href="http://localhost:4000/Negotiations-Workshop/" rel="alternate" type="text/html" title="Negotiations Workshop" /><published>2019-12-08T07:00:00-08:00</published><updated>2019-12-08T07:00:00-08:00</updated><id>http://localhost:4000/Negotiations-Workshop</id><content type="html" xml:base="http://localhost:4000/Negotiations-Workshop/">&lt;h6 id=&quot;--instructor-holly-schroth&quot;&gt;- Instructor: &lt;a href=&quot;https://twitter.com/BizInteractions?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor&quot;&gt;Holly Schroth&lt;/a&gt;&lt;/h6&gt;

&lt;ol&gt;
  &lt;li&gt;If one party feels he/she has lost in a negotiation, then both the parties have lost!&lt;/li&gt;
  &lt;li&gt;Negotiate in packages, not item by item&lt;/li&gt;
  &lt;li&gt;Expand the pie by creating value, before dividing it&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;/images/image-20191208202303400.png&quot; alt=&quot;Key Preparation Skills&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;Before negotiating, create an Aspiration Point package, with all the items that you want from the negotiation&lt;/li&gt;
  &lt;li&gt;Create a resistance point, which is the minimum you want from this negotiation&lt;/li&gt;
  &lt;li&gt;Create a BATNA, and also look at the counterpart’s BATNA&lt;/li&gt;
  &lt;li&gt;One approach during negotiations is: Create an aspiration package. Communicate what is important to you and talk about what is important to them. &lt;strong&gt;Negotiate on the whole package and not item by item&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;img src=&quot;/images/image-20191208202856028.png&quot; alt=&quot;Concession making&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;/images/image-20191208203053019.png&quot; alt=&quot;Preparing for a negotiation&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;/images/image-20191208203228619.png&quot; alt=&quot;Managing Offers&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;/images/image-20191208203347024.png&quot; alt=&quot;Other considerations&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Prep Sheet&lt;/strong&gt;&lt;img src=&quot;/images/image-20191208203506906.png&quot; alt=&quot;Prep Sheet&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;/images/image-20191208203715642.png&quot; alt=&quot;Preparation errors&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Common Negotiation Gambits and how to diffuse them&lt;/strong&gt;&lt;img src=&quot;/images/image-20191208203827657.png&quot; alt=&quot;Common Gambits&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;img src=&quot;/images/image-20191208204003962.png&quot; alt=&quot;Concluding a negotiation&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Parth Mehta</name><email>pm2877@columbia.edu</email></author><summary type="html">by Holly Schroth</summary></entry><entry><title type="html">System Design prep notes</title><link href="http://localhost:4000/System-Design-Prep/" rel="alternate" type="text/html" title="System Design prep notes" /><published>2019-12-08T07:00:00-08:00</published><updated>2019-12-08T07:00:00-08:00</updated><id>http://localhost:4000/System-Design-Prep</id><content type="html" xml:base="http://localhost:4000/System-Design-Prep/">&lt;h1 id=&quot;system-design-prep&quot;&gt;System Design Prep&lt;/h1&gt;

&lt;h2 id=&quot;outline&quot;&gt;Outline&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Requirements, goals and scope
    &lt;ul&gt;
      &lt;li&gt;Functional requirements&lt;/li&gt;
      &lt;li&gt;Non-functional requirements
        &lt;ul&gt;
          &lt;li&gt;Reliability&lt;/li&gt;
          &lt;li&gt;Availability&lt;/li&gt;
          &lt;li&gt;Scalability&lt;/li&gt;
          &lt;li&gt;Latency (Response time)&lt;/li&gt;
          &lt;li&gt;Throughput (Bandwidth)&lt;/li&gt;
          &lt;li&gt;Privacy&lt;/li&gt;
          &lt;li&gt;Security&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Capacity estimation and constraints
    &lt;ul&gt;
      &lt;li&gt;Trafffic estimates
        &lt;ul&gt;
          &lt;li&gt;Read-write ratio&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Storage estimates&lt;/li&gt;
      &lt;li&gt;Bandwidth estimates&lt;/li&gt;
      &lt;li&gt;Memory estimates (Cache requirements)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;System APIs
    &lt;ul&gt;
      &lt;li&gt;What type of request&lt;/li&gt;
      &lt;li&gt;JSON object bodies&lt;/li&gt;
      &lt;li&gt;Response objects&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Database design
    &lt;ul&gt;
      &lt;li&gt;Observations about the data
        &lt;ul&gt;
          &lt;li&gt;Billions of records&lt;/li&gt;
          &lt;li&gt;Each record size&lt;/li&gt;
          &lt;li&gt;Relationships between records&lt;/li&gt;
          &lt;li&gt;Read/write heavy&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;DB schemas
        &lt;ul&gt;
          &lt;li&gt;Metadata store&lt;/li&gt;
          &lt;li&gt;Content store (Object storage, file storage, block storage)&lt;/li&gt;
          &lt;li&gt;Store to have access to content quickly, like timelines&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;NoSQL or SQL?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;System Design and Algorithm
    &lt;ul&gt;
      &lt;li&gt;High level design&lt;/li&gt;
      &lt;li&gt;Detailed component design
        &lt;ul&gt;
          &lt;li&gt;Application Layer&lt;/li&gt;
          &lt;li&gt;Database Layer&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Multiple approaches&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Data Partition and Replication
    &lt;ul&gt;
      &lt;li&gt;Range based&lt;/li&gt;
      &lt;li&gt;Hash-based, Consistent Hashing&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Cache
    &lt;ul&gt;
      &lt;li&gt;Cache size&lt;/li&gt;
      &lt;li&gt;Number of servers to fit cache&lt;/li&gt;
      &lt;li&gt;Cache eviction policy&lt;/li&gt;
      &lt;li&gt;Cache invalidation scheme&lt;/li&gt;
      &lt;li&gt;In memory cache VS (distributed) global cache&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;a href=&quot;https://dzone.com/articles/process-caching-vs-distributed&quot;&gt;In-Process Caching vs. Distributed Caching - DZone Performance&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Load balancing
    &lt;ul&gt;
      &lt;li&gt;Where all required?&lt;/li&gt;
      &lt;li&gt;Load balancing algorithm?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Detailed component design&lt;/li&gt;
  &lt;li&gt;Front-end connection with the backend&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/images/IMG_5604.jpg&quot; alt=&quot;Thought process during the interview&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Thought process&lt;/p&gt;

&lt;h2 id=&quot;general-notes&quot;&gt;General Notes&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;MD5 hash function returns a 128-bit hash, represented by 32 hexadecimal digits.&lt;/li&gt;
  &lt;li&gt;Base64 ([a-z], [A-Z], [0-9], +, /) encoding uses 6 bits to represent a character value.  Base64 encoded strings of 6 characters has 68.7B possible strings.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;In-memory caches&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;The most potent–in terms of raw performance–caches you’ll encounter are those which store their entire set of data in memory. &lt;a href=&quot;http://memcached.org/&quot;&gt;Memcached&lt;/a&gt; and &lt;a href=&quot;http://redis.io/&quot;&gt;Redis&lt;/a&gt; are both examples of in-memory caches (caveat: Redis can be configured to store some data to disk). This is because accesses to RAM are &lt;a href=&quot;http://en.wikipedia.org/wiki/RAM_disk&quot;&gt;orders of magnitude&lt;/a&gt; faster than those to disk.&lt;/p&gt;

    &lt;p&gt;On the other hand, you’ll generally have far less RAM available than disk space, so you’ll need a strategy for only keeping the hot subset of your data in your memory cache. The most straightforward strategy is &lt;a href=&quot;http://en.wikipedia.org/wiki/Cache_algorithms#Least_Recently_Used&quot;&gt;least recently used&lt;/a&gt;, and is employed by Memcache (and Redis as of 2.2 can be configured to employ it as well). LRU works by evicting less commonly used data in preference of more frequently used data, and is almost always an appropriate caching strategy.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Put vs Post request:&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/107450/4989208&quot;&gt;What’s the difference between a POST and a PUT HTTP REQUEST?&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;rough-calculations&quot;&gt;Rough calculations&lt;/h2&gt;

&lt;p&gt;8 bits = 1 byte
1 byte = 1 character
4 bytes = 1 integer (Java)&lt;/p&gt;

&lt;p&gt;$2^{10} bytes = 1KB \qquad 10^{3} = 1KB $&lt;/p&gt;

&lt;p&gt;$2^{20} bytes = 1MB \qquad 10^{6} = 1MB$&lt;/p&gt;

&lt;p&gt;$2^{30} bytes = 1GB \qquad 10^{9} = 1GB$$&lt;/p&gt;

&lt;h2 id=&quot;consistent-hashing&quot;&gt;Consistent Hashing&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.educative.io/courses/grokking-the-system-design-interview/B81vnyp0GpY&quot;&gt;Consistent Hashing - Grokking the System Design Interview&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Drawbacks of commonly used hash-based partitioning (&lt;code class=&quot;highlighter-rouge&quot;&gt;key % n&lt;/code&gt;):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Not horizontally scalable, as it requires all &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt; keys to be remapped.&lt;/li&gt;
  &lt;li&gt;It may not be load balanced as the real data is not uniformly distributed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We use consistent hashing to solve this problem. The idea is simple. We hash all servers, say 5, to an integer in the range, say [0, 256) and place them on a virtual ring. Then to map a given key to a sever, hash the key to a single integer. Move clockwise in the ring and map the key to the first server you encounter.&lt;/p&gt;

&lt;p&gt;To add a new server, map it to another integer on the ring. Some of the keys from the nearby servers will then move to the new server. If any server fails, all the keys of that server then move to the next server. So, at max, only &lt;code class=&quot;highlighter-rouge&quot;&gt;k/n&lt;/code&gt; severs need to be remapped.&lt;/p&gt;

&lt;p&gt;For load balancing, we add virtual replicas of servers on the ring. Basically instead of mapping the server to just one integer, also map it to several points on the ring. Assuming the hash function to hash servers to integers “mixes well”, the data on these servers will be partitioned uniformly.&lt;/p&gt;

&lt;h2 id=&quot;key-generation-service-kgs&quot;&gt;Key Generation Service (KGS)&lt;/h2&gt;

&lt;p&gt;The application server will store the contents of the paste and the generated key in the database. After the successful insertion, the server can return the key to the user. One possible problem here could be that the insertion fails because of a duplicate key. Since we are generating a random key, there is a possibility that the newly generated key could match an existing one. In that case, we should regenerate a new key and try again. We should keep retrying until we don’t see failure due to the duplicate key. We should return an error to the user if the custom key they have provided is already present in our database.&lt;/p&gt;

&lt;p&gt;Another solution of the above problem could be to run a standalone &lt;strong&gt;Key Generation Service&lt;/strong&gt; (KGS) that generates random six letters strings beforehand and stores them in a database (let’s call it key-DB).&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Whenever we want to store a new paste, we will just take one of the already generated keys and use it. This approach will make things quite simple and fast since we will not be worrying about duplications or collisions. KGS will make sure all the keys inserted in key-DB are unique.&lt;/li&gt;
  &lt;li&gt;KGS can use two tables to store keys, one for keys that are not used yet and one for all the used keys. As soon as KGS gives some keys to an application server, it can move these to the used keys table.&lt;/li&gt;
  &lt;li&gt;KGS can always keep some keys in memory so that whenever a server needs them, it can quickly provide them. As soon as KGS loads some keys in memory, it can move them to the used keys table, this way we can make sure each server gets unique keys.&lt;/li&gt;
  &lt;li&gt;If KGS dies before using all the keys loaded in memory, we will be wasting those keys. We can ignore these keys given that we have a huge number of them.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Isn’t KGS a single point of failure?&lt;/strong&gt; Yes, it is. To solve this, we can have a standby replica of KGS and whenever the primary server dies it can take over to generate and provide keys.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Can each app server cache some keys from key-DB?&lt;/strong&gt; Yes, this can surely speed things up. Although in this case, if the application server dies before consuming all the keys, we will end up losing those keys. This could be acceptable since we have 68B unique six letters keys, which are a lot more than we require.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;load-balancing-algorithms&quot;&gt;Load balancing algorithms&lt;/h2&gt;

&lt;p&gt;There is a variety of load balancing methods, which use different algorithms for different needs.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Least Connection Method&lt;/strong&gt; — This method directs traffic to the server with the fewest active connections. This approach is quite useful when there are a large number of persistent client connections which are unevenly distributed between the servers.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Least Response Time Method&lt;/strong&gt; — This algorithm directs traffic to the server with the fewest active connections and the lowest average response time.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Least Bandwidth Method&lt;/strong&gt; - This method selects the server that is currently serving the least amount of traffic measured in megabits per second (Mbps).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Round Robin Method&lt;/strong&gt; — This method cycles through a list of servers and sends each new request to the next server. When it reaches the end of the list, it starts over at the beginning. It is most useful when the servers are of equal specification and there are not many persistent connections.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Weighted Round Robin Method&lt;/strong&gt; — The weighted round-robin scheduling is designed to better handle servers with different processing capacities. Each server is assigned a weight (an integer value that indicates the processing capacity). Servers with higher weights receive new connections before those with less weights and servers with higher weights get more connections than those with less weights.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;IP Hash&lt;/strong&gt; — Under this method, a hash of the IP address of the client is calculated to redirect the request to a server.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Consistent Hashing&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;content-delivery-networks-cdns&quot;&gt;Content Delivery Networks (CDNs)&lt;/h2&gt;

&lt;p&gt;CDNs are a kind of cache that comes into play for sites serving large amounts of static media. In a typical CDN setup, a request will first ask the CDN for a piece of static media; the CDN will serve that content if it has it locally available. If it isn’t available, the CDN will query the back-end servers for the file, cache it locally, and serve it to the requesting user.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cloudflare.com/learning/cdn/what-is-a-cdn/&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;cache-invalidation-schemes&quot;&gt;Cache invalidation schemes&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Write through cache&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;When “write hit”, update both cache and memory with new data. This scheme prevents data loss during cache failures. But the writes become slower because of doubling the writes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Write back cache&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;When “write hit”, update only the cache with new data. Update the storage only when the cache entry is going to get replaced by some other entry. This is done using a dirty bit for every entry. This scheme has a risk of data loss in the case of cache failure.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Write around cache&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;When “write miss”, update only the storage. This prevents large number of writes into the cache. But if the recently written data is read again, it will have a cache miss.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Write allocation cache&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;When “write miss”, bring the old data into the cache and update the cache entry. Use this along with either write back or write through.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;cache-eviction-schemes&quot;&gt;Cache eviction schemes&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Least Recently Used (LRU):&lt;/strong&gt; Discards the least recently used items first.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Most Recently Used (MRU):&lt;/strong&gt; Discards, in contrast to LRU, the most recently used items first.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Least Frequently Used (LFU):&lt;/strong&gt; Counts how often an item is needed. Those that are used least often are discarded first.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Least Frequently Recently Used (LFRU):&lt;/strong&gt; Privileged and unprivileged sections. Frequently used are in privileged section. Replacement of the privileged partition is done as follows: LFRU evicts content from the unprivileged partition, pushes content from privileged partition to unprivileged partition, and finally inserts new content into the privileged partition&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Random Replacement (RR):&lt;/strong&gt; Randomly selects a candidate item and discards it to make space when necessary.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;First In First Out (FIFO):&lt;/strong&gt; The cache evicts the first block accessed first without any regard to how often or how many times it was accessed before.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Last In First Out (LIFO):&lt;/strong&gt; The cache evicts the block accessed most recently first without any regard to how often or how many times it was accessed before.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;cache-coherance&quot;&gt;Cache coherance&lt;/h2&gt;

&lt;p&gt;In computer architecture, cache coherence is the uniformity of shared resource data that ends up stored in multiple local caches. When clients in a system maintain caches of a common memory resource, problems may arise with incoherent data, which is particularly the case with CPUs in a multiprocessing system.&lt;/p&gt;

&lt;p&gt;The following are the requirements for cache coherence:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Write Propagation -&lt;/strong&gt; Changes to the data in any cache must be propagated to other copies (of that cache line) in the peer caches.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Transaction Serialization -&lt;/strong&gt; Reads/Writes to a single memory location must be seen by all processors in the same order.&lt;/p&gt;

&lt;p&gt;Two common protocols used for cache coherence are Snooping protocol and directory based&lt;/p&gt;

&lt;h2 id=&quot;data-partitioning-schemes&quot;&gt;Data partitioning schemes&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Horizontal partitioning (Range-based partitioning) → con: non-uniform distribution of data&lt;/li&gt;
  &lt;li&gt;Vertical partitioning → Feature based partitioning. con: How to further scale if a partitioned server needs to scale.&lt;/li&gt;
  &lt;li&gt;Hash-based partitioning → con: scaling required remapping → use consistent hashing&lt;/li&gt;
  &lt;li&gt;Directory-based partitioning → Have a lookup service that maintains a directory of where a particular data entry resides. Pro: can easily scale and change our partitioning scheme. Con: single point of failure, increased complexity.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;problems-of-data-partitioning&quot;&gt;Problems of data partitioning&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Joins and denormalization across partitions&lt;/li&gt;
  &lt;li&gt;Referential integrity across partitions&lt;/li&gt;
  &lt;li&gt;Rebalancing the partitions&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;indexes&quot;&gt;Indexes&lt;/h2&gt;

&lt;p&gt;Indexes are well known when it comes to databases. Sooner or later there comes a time when database performance is no longer satisfactory. One of the very first things you should turn to when that happens is database indexing.&lt;/p&gt;

&lt;p&gt;The goal of creating an index on a particular table in a database is to make it faster to search through the table and find the row or rows that we want. Indexes can be created using one or more columns of a database table, providing the basis for both rapid random lookups and efficient access of ordered records.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.tutorialspoint.com/sql/sql-indexes.htm&quot;&gt;SQL - Indexes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@User3141592/single-vs-composite-indexes-in-relational-databases-58d0eb045cbe&quot;&gt;Single vs Composite Indexes in Relational Databases&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/1130/4989208&quot;&gt;How does database indexing work?&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;sql-vs-nosql&quot;&gt;SQL vs NoSQL&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Schema&lt;/p&gt;

    &lt;p&gt;Fixed schema in SQL, dynamic schema in NoSQL. Columns can be added on the fly and a row does not have to contain all the columns.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Scalability&lt;/p&gt;

    &lt;p&gt;SQL is easy to scale vertically, but complicated to scale horizontally. NoSQL databases are horizontally scalable.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reliability and ACID compliancy&lt;/p&gt;

    &lt;p&gt;SQL is a safe bet when it comes to data reliability. Most of the NoSQL solutions sacrifice ACID compliance for scalability and performance.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;→ When data is structured and not changing very frequently, or when there is a need for an ACID-compliant database for critical data, use SQL.&lt;/p&gt;

&lt;p&gt;→ When you need to scale horizontally to store huge data that is not necessarily structured and still have a fast and seamless database, or when you want to have rapid development and iterations, use NoSQL.&lt;/p&gt;

&lt;h2 id=&quot;types-of-nosql-databases&quot;&gt;Types of NoSQL databases&lt;/h2&gt;

&lt;p&gt;Following are the most common types of NoSQL:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key-Value Stores:&lt;/strong&gt; Data is stored in an array of key-value pairs. The ‘key’ is an attribute name which is linked to a ‘value’. Well-known key-value stores include Redis, Voldemort, and Dynamo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Document Databases:&lt;/strong&gt; In these databases, data is stored in documents (instead of rows and columns in a table) and these documents are grouped together in collections. Each document can have an entirely different structure. Document databases include the CouchDB and MongoDB.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wide-Column Databases:&lt;/strong&gt; Instead of ‘tables,’ in columnar databases we have column families, which are containers for rows. Unlike relational databases, we don’t need to know all the columns up front and each row doesn’t have to have the same number of columns. Columnar databases are best suited for analyzing large datasets - big names include Cassandra and HBase.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Graph Databases:&lt;/strong&gt; These databases are used to store data whose relations are best represented in a graph. Data is saved in graph structures with nodes (entities), properties (information about the entities), and lines (connections between the entities). Examples of graph database include Neo4J and InfiniteGraph.&lt;/p&gt;

&lt;h2 id=&quot;cap-theorem&quot;&gt;CAP theorem&lt;/h2&gt;

&lt;p&gt;In &lt;a href=&quot;https://en.wikipedia.org/wiki/Theoretical_computer_science&quot;&gt;theoretical computer science&lt;/a&gt;, the &lt;strong&gt;CAP theorem&lt;/strong&gt;, also named &lt;strong&gt;Brewer’s theorem&lt;/strong&gt; after computer scientist &lt;a href=&quot;https://en.wikipedia.org/wiki/Eric_Brewer_(scientist)&quot;&gt;Eric Brewer&lt;/a&gt;, states that it is impossible for a &lt;a href=&quot;https://en.wikipedia.org/wiki/Distributed_data_store&quot;&gt;distributed data store&lt;/a&gt; to simultaneously provide more than two out of the following three guarantees:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Consistency_(database_systems)&quot;&gt;Consistency&lt;/a&gt;: Every read receives the most recent write or an error&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Availability&quot;&gt;Availability&lt;/a&gt;: Every request receives a (non-error) response, without the guarantee that it contains the most recent write&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Network_partitioning&quot;&gt;Partition tolerance&lt;/a&gt;: The system continues to operate despite an arbitrary number of messages being dropped (or delayed) by the network between nodes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When a network partition failure happens should we decide to&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cancel the operation and thus decrease the availability but ensure consistency&lt;/li&gt;
  &lt;li&gt;Proceed with the operation and thus provide availability but risk inconsistency&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The CAP theorem implies that in the presence of a network partition, one has to choose between consistency and availability. Note that consistency as defined in the CAP theorem is quite different from the consistency guaranteed in &lt;a href=&quot;https://en.wikipedia.org/wiki/ACID&quot;&gt;ACID&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Database_transaction&quot;&gt;database transactions&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;http-long-polling&quot;&gt;HTTP Long-Polling&lt;/h2&gt;

&lt;p&gt;This is a variation of the traditional polling technique that allows the server to push information to a client whenever the data is available. With Long-Polling, the client requests information from the server exactly as in normal polling, but with the expectation that the server may not respond immediately. That’s why this technique is sometimes referred to as a “Hanging GET”.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If the server does not have any data available for the client, instead of sending an empty response, the server holds the request and waits until some data becomes available.&lt;/li&gt;
  &lt;li&gt;Once the data becomes available, a full response is sent to the client. The client then immediately re-request information from the server so that the server will almost always have an available waiting request that it can use to deliver data in response to an event.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The basic life cycle of an application using HTTP Long-Polling is as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The client makes an initial request using regular HTTP and then waits for a response.&lt;/li&gt;
  &lt;li&gt;The server delays its response until an update is available or a timeout has occurred.&lt;/li&gt;
  &lt;li&gt;When an update is available, the server sends a full response to the client.&lt;/li&gt;
  &lt;li&gt;The client typically sends a new long-poll request, either immediately upon receiving a response or after a pause to allow an acceptable latency period.&lt;/li&gt;
  &lt;li&gt;Each Long-Poll request has a timeout. The client has to reconnect periodically after the connection is closed due to timeouts.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;server-sent-events-sses&quot;&gt;Server-Sent Events (SSEs)&lt;/h2&gt;

&lt;p&gt;Under SSEs the client establishes a persistent and long-term connection with the server. The server uses this connection to send data to a client. If the client wants to send data to the server, it would require the use of another technology/protocol to do so.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Client requests data from a server using regular HTTP.&lt;/li&gt;
  &lt;li&gt;The requested webpage opens a connection to the server.&lt;/li&gt;
  &lt;li&gt;The server sends the data to the client whenever there’s new information available.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;SSEs are best when we need real-time traffic from the server to the client or if the server is generating data in a loop and will be sending multiple events to the client.&lt;/p&gt;

&lt;h2 id=&quot;websockets&quot;&gt;WebSockets&lt;/h2&gt;

&lt;p&gt;WebSocket provides &lt;a href=&quot;https://en.wikipedia.org/wiki/Duplex_(telecommunications)#Full_duplex&quot;&gt;Full duplex&lt;/a&gt; communication channels over a single TCP connection. It provides a persistent connection between a client and a server that both parties can use to start sending data at any time. The client establishes a WebSocket connection through a process known as the WebSocket handshake. If the process succeeds, then the server and client can exchange data in both directions at any time. The WebSocket protocol enables communication between a client and a server with lower overheads, facilitating real-time data transfer from and to the server. This is made possible by providing a standardized way for the server to send content to the browser without being asked by the client and allowing for messages to be passed back and forth while keeping the connection open. In this way, a two-way (bi-directional) ongoing conversation can take place between a client and a server.&lt;/p&gt;</content><author><name>Parth Mehta</name><email>pm2877@columbia.edu</email></author><summary type="html">Notes taken from educative.io and other web resources</summary></entry><entry><title type="html">Getting to Yes</title><link href="http://localhost:4000/Getting-to-Yes/" rel="alternate" type="text/html" title="Getting to Yes" /><published>2019-10-10T08:00:00-07:00</published><updated>2019-10-10T08:00:00-07:00</updated><id>http://localhost:4000/Getting-to-Yes</id><content type="html" xml:base="http://localhost:4000/Getting-to-Yes/">&lt;p&gt;Conflict is inevitable. You need to learn how to transform this conflict into side-by-side hard headed problem solving. A standard negotiation has only two stratgies: soft negotiation or hard negotiation. A soft negotiator wants to avoid personal conflicts and thus makes concessions readily to reach agreement. The hard negotiator views it as a contest of wills and ends up producing an equally hard response, which may harm the relationship with the other side. Both strategies leave people dissatisfied, worn out or alienated - and frequently all three.&lt;/p&gt;

&lt;p&gt;There is a third way to negotiate which is both hard and soft - principled negotiation. The method of Principled Negotiation devleoped at the Harvard Negotiation Project is to decide issues on merits rather than through a process of haggling focused on what each side says it will and won’t do. This method is hard on the merits, soft on the people. It is an all purpose strategy. Unlike almost all other strategies, if the other side learns it, it does not become, more difficult; it becomes easier.&lt;/p&gt;

&lt;h3 id=&quot;dont-bargain-over-positions&quot;&gt;Don’t bargain over Positions&lt;/h3&gt;

&lt;p&gt;People routinely engage in positional bargaining where each side takes a position, argues for it, and makes concessions to reach a compromise.&lt;/p&gt;

&lt;p&gt;Any method of negotiation may be faitly judged by three criteria:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It should provide a wise agreement.&lt;/li&gt;
  &lt;li&gt;It should be efficient&lt;/li&gt;
  &lt;li&gt;It should improve, or atleast not damage the relationship between the parties.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A wise agreement can be defined as one that meets the legitimate interests of each side to the extent possible, resolves conflicting issues fairly, is durable, and takes community interests into account.&lt;/p&gt;

&lt;p&gt;Positional bargaining fails to meet the basic criteria of producing a wise agreement, efficiently and amicably. Following are the downsides of positional bargaining:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Arguing over positions produces unwise outcomes&lt;/p&gt;

    &lt;p&gt;Any agreement reached may reflect a mechanical splitting of the difference between the final positions rather than a solution carefully crafted to meet the legitimate interests of the parties.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Arguing over positions is inefficient&lt;/p&gt;

    &lt;p&gt;Because both start with an extreme position, stubbornly hold to it, and make concessions only as necessary. It also involves a large number of decisions which is time consuming&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It Arguing over positions endangers an ongoing relationship&lt;/p&gt;

    &lt;p&gt;Because one side often sees itself bending to the rigid will of the other while its own legitiamate concerns go unaddressed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When there are many parties, positional bargaining is even worse&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Being nice is no answer&lt;/p&gt;

    &lt;p&gt;It leaves you vulnerable to someone who is playing a hard negotiating game.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;principled-negotiation&quot;&gt;Principled Negotiation&lt;/h4&gt;

&lt;p&gt;This method can be boiled down to four basic points:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;People - Separate the people from the problem&lt;/li&gt;
  &lt;li&gt;Interests - Focus on interests, not positions&lt;/li&gt;
  &lt;li&gt;Options - Invent multiple options looking for mutual gains before deciding what to do&lt;/li&gt;
  &lt;li&gt;Criteria - Insist that the results be based on some objective criteria&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;separate-the-people-from-the-problem&quot;&gt;Separate the people from the problem&lt;/h3&gt;

&lt;p&gt;Failing to deal with others as human beings prone to human reactions can be disastrous. Every negotiator has two kinds of interests: in the substance and in the relationship. Disentangle the relationship from the substance; deal directly with the people problem. &lt;strong&gt;Deal with people problems by changing how you treat people; don’t try to solve them with substantive concessions.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is useful to think of people problems, in terms of three categories:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Perception&lt;/li&gt;
  &lt;li&gt;Emotion&lt;/li&gt;
  &lt;li&gt;Communication&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;perception&quot;&gt;Perception&lt;/h4&gt;

&lt;p&gt;Ultimately, conflict lies not in the objective reality, but in people’s heads. Truth is simply one more argument for dealing with the difference. The difference itself exists because it exists in their thinking. As useful as looking for objective reality can be, it is ultimately the reality as each side sees it that constitutes the problem in a negotiation and also opens the way to a solution.&lt;/p&gt;

&lt;p&gt;The ability to see the situation as the other side sees it, as difficult as it may be, is one of the most important skills a negotiator can possess. If you want to influence them, you also need to understand empathetically, the power of their point of view and to feel the emotional force with which they believe in it.&lt;/p&gt;

&lt;p&gt;Points to keep in mind:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Don’t deduce their intentions from your fears&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Don’t blame them for your problem&lt;/p&gt;

    &lt;p&gt;Even if blaming is justified, it is usually counterproductive. Under attack, the other side will become defensive and will resist what you have to say.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Discuss each other’s perceptions&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Look for opportunities to act inconsistently with their perceptions&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Give them a stake in the outcome by making sure they participate in the process&lt;/p&gt;

    &lt;p&gt;This is precisely what people tend to not do. When you have a difficult issue to handle, your instinct is to leave the last part until last. But if you want the other side to accept a disagreeable conclusion, it is crucial that you involve them in the process of reaching that conclusion.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Face-saving&lt;/p&gt;

    &lt;p&gt;Often in a negotiation people will continue to hold out not because the proposal on the table is inherently unacceptable, but simply because they want to avoid the feeling or the appearance of backing down to the other side. If the substance can be phrased or conceptualized differently so that it seems a fair outcome, they will then accept it. Face-saving involves reconciling an agreement with principle and with the self-image of the negotiators. Its importance should not be underestimated.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;emotion&quot;&gt;Emotion&lt;/h4&gt;

&lt;p&gt;Pay attention to &lt;u&gt;core concerns&lt;/u&gt;. Many emotions in negotiations are driven by a core set of five interests:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Autonomy - The desire to make your own choices and control your own fate&lt;/li&gt;
  &lt;li&gt;Appreciation - The desire to be recognized and valued&lt;/li&gt;
  &lt;li&gt;Affiliation - The desire to belong as an accepted member of some peer group&lt;/li&gt;
  &lt;li&gt;Role - The desire to have a meaningful purpose&lt;/li&gt;
  &lt;li&gt;Status - The desire to be fairly seen and acknowledged&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Trampling on these interests tends to generate strong negative emotions. Attending to them can build rapport and a positive climate for problem-solving negotiation.&lt;/p&gt;

&lt;p&gt;Points to keep in mind:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Consider the role of identity&lt;/p&gt;

    &lt;p&gt;More specifically, percieved threat to identiy - one’s self-image or self-respect&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make emotions explicit and acknowledge them as legitimate&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Allow the other side to let off steam&lt;/p&gt;

    &lt;p&gt;People obtain psychological release through the simple process of recounting their grievances to an attentive audience&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Don’t react to emotional outbursts&lt;/p&gt;

    &lt;p&gt;Adopt a rule that only one person can get angry at a time&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use symbolic gestures&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;communication&quot;&gt;Communication&lt;/h4&gt;

&lt;p&gt;There are three big problems in communication:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Negotiators may not be talking to each other. Instead, they talk merely to impress third parties or their own constituency.&lt;/li&gt;
  &lt;li&gt;Even if one is talking directly to the other, the other might not be listening. Instead, he might be busy thinking what to say next, how to respond to that last point or how to frame the next argument, or he may be listening more attentively to his constitiuency than the other side.&lt;/li&gt;
  &lt;li&gt;What one says, the other might misunderstand&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What to do about these problems?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Listen actively and acknowledge what is being said&lt;/p&gt;

    &lt;p&gt;Active listening improves not only what you hear but also what they say. If you pay attention and interrupt to say, “Did I understand correctly that you are saying that…?”, the other side will realize that they are not just killing time, not just going through a routine. It has been said that the cheapest concession you can make to the other side is to let them know they have been heard.&lt;/p&gt;

    &lt;p&gt;Show that you understand them. “Let me see whether I follow what you are telling me. From your point of view, the situation looks like this…”. As you repeat what you understood them to have said, phrase it positively from their point of view, making the strength of their case clear. You might say, “You have a strong case. Let me see if I can explain it. Here’s the way it strikes me…”. Once you have made their case for them, then come back with the problems you find in their proposals. If you can put their case better than they can, and then refute it, you maximize the chance of initiating a constructive dialogue on the merits and minimize the chance of their believing you have misunderstood them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Speak to be understood&lt;/p&gt;

    &lt;p&gt;The person you are trying to persuade is seated at the table with you. If a negotiation is to be compared with a legal proceeding, the situation resembles that of two judges trying to reach an agreement on how to decide a case.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Speak about yourself, not about them&lt;/p&gt;

    &lt;p&gt;It is more persuasive, to describe a problem in terms of its impact on you than in terms of what they did or why: “I feel let down” instead of “You broke your word”. “We feel discriminated against”, rather than “You’re a racist”. If you make a statement about them that they believe is untrue, they will ignore you or get angry; they will not focus on your concern. But a statement about how you feel is difficult to challenge. You convey the same information without provoking a defensive reaction that will prevent them from taking it in.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Speak for a purpose&lt;/p&gt;

    &lt;p&gt;Before making a significant statement, know what you want to communicate or find out, and what purpose this information will serve.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;focus-on-interests-not-positions&quot;&gt;Focus on Interests, not Positions&lt;/h3&gt;

&lt;p&gt;For a wise solution, reconcile interests, not positions.&lt;/p&gt;

&lt;h4 id=&quot;interests-define-the-problem&quot;&gt;Interests define the problem&lt;/h4&gt;

&lt;p&gt;The basic problem in a negotiation lies not in conflicting positions, but in the conflict between each side’s needs, desires, concerns, and fears. Such desires and concerns are interests. Interests motivate people; they are the silent movers behind the hubbub of positions. Your position is something you have decided upon. Your interests are what caused you to so decide.&lt;/p&gt;

&lt;p&gt;Reconciling interests rather than positions works for two reasons:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;For every interest there usually exist several possible positions that could satisfy it. All too often people simply adopt the most obvious position. When you do look behind opposed positions for the motivating interests, you can often find an alternative position that meets not only your interests but theirs as well.&lt;/li&gt;
  &lt;li&gt;Behind opposed positions lie many more interests than conflicting ones. There lie shared and compatible interests, as well as conflicting ones.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;how-do-you-identify-interests&quot;&gt;How do you identify interests&lt;/h4&gt;

&lt;p&gt;A position is likely to be concrete and explicit; the interests underlying it may well be unexpressed, intangible, and perhaps inconsistent.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Ask “Why?”&lt;/p&gt;

    &lt;p&gt;One basic technique is to put yourself in their shoes. Examine each position they take, and ask yourself “Why?”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ask “Why not?” Think about their choice&lt;/p&gt;

    &lt;p&gt;One of the most useful ways to uncover interests is first to identify the basic decision that those on the other side probably see you asking them for, and then to ask yourself why they have not made that decision. What interest of theirs stand in the way?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Realize that each side has multiple interests&lt;/p&gt;

    &lt;p&gt;Whether it is their emloyer, client, employees, colleagues, family, or spouse, all negotiators have a constituency to whose interests are sensitive. To understand a negotiator’s interests means to understand the variety of somewhat differing interests that they need to take into account.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The most powerful interests are basic human needs, including:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;security&lt;/li&gt;
      &lt;li&gt;economic well-being&lt;/li&gt;
      &lt;li&gt;a sense of belonging&lt;/li&gt;
      &lt;li&gt;recognition&lt;/li&gt;
      &lt;li&gt;control over one’s life&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make a list&lt;/p&gt;

    &lt;p&gt;To sort out the various interests of each side, it helps to write them down as they occur to you. This will not only help you remember them; it will also enable you to improve the quality of your assessment as you learn new information and to place interests in their estimated order of importance. Furthermore, it may stimulate ideas for how to meet these interests.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;talking-about-interests&quot;&gt;Talking about interests&lt;/h4&gt;

&lt;p&gt;The purpose of negotiating is to serve your interests. The chance of that happening increases when you communicate them.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Make you interests come alive&lt;/p&gt;

    &lt;p&gt;If you go with a raging ulcer to see a doctor, you should not hope for much relief if you describe it as a mild stomachache. It is your job to have the other side understand exactly how important and legitimate your interests are. One guideline is to be specific. Concrete details not only make your description credible, they add impact.&lt;/p&gt;

    &lt;p&gt;Part of the task of impressing the other side with your interests lies in establishing the legitimacy of those interests. You want them to feel not that you are attacking them personally, but rather that the problem you face legitimately demands attention. You need to convince them that they might well feel the same way if you were in your shoes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Acknowledge their interests as part of the problem&lt;/p&gt;

    &lt;p&gt;People listen better if they feel that you have understood them. They tend to think that those who understand them are intelligent and sympathetic people whose own opinions may be worth listening to. In addition to demonstrating that you have understood their interests, it helps to acknowledge that their interests are part of the overall problem you are trying to solve. This is especially easy to do if you have shared interests.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Put the problem before your answer&lt;/p&gt;

    &lt;p&gt;If you want someone to listen and understand your reasoning, give your interests and reasoning first, and your conclusions or proposals later.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Look forward, not back&lt;/p&gt;

    &lt;p&gt;Instead of arguing with the other side about the past, talk about what you want to have happen in the future.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Be concrete but flexible&lt;/p&gt;

    &lt;p&gt;To keep your flexibility, treat each option you formulate as simlply illustrative. Think in terms of more than one option that meets your interests. Much of what positional bargainers hope to achieve with an opening position can be accomplished equally well with an illustrative suggestion that generously takes care of your interest.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;For example, in a sports contract negotiation, an agent might say that $500,000 a year would be the kind of money that should satisfy Henderson’s interest in receiving the salary he feels he is worth. Something of the order of a five-year contract should meet his need for job-security&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;Having thought about your interests, you should go into a meeting not only with one or more specific options that would meet your legitimate interests but also with an open mind. An open mind is not an empty one.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Be hard on the problem, soft on the people&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;&lt;em&gt;You can be just as hard in talking about your interests as any negotiator can be in talking about their position. In fact, it is usually advisable to be hard. It may not be wise to commit yourself to your position, but it is wise to commit yourself to your interests.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;This is the place in a negotiation to spend your aggressive energies. Often the wisest solutions, those that produce the maximum gain for you at the minimum cost to the other side, are produced only by strongly advocating your interests. Two negotiators, each pushing hard for their interests, will often stimulate each other’s creativity in thinking up mutually advantageous solutions.&lt;/p&gt;

    &lt;p&gt;It is important to separate the people from the problem and attack the problem without blaming the people. Go even further and be personally supportive. &lt;strong&gt;This combination of support and vigour may seem inconsistent. Psychologically, it is; the inconsistency helps make it work. A well-known theory of psychology, the theory of cognitive dissonance, holds that people dislike inconsistency and will act to eliminate it.&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Successful negotiation requires being both firm and open.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;invent-options-for-mutual-gains&quot;&gt;Invent Options for Mutual Gains&lt;/h3&gt;

&lt;p&gt;Skill at inventing options is one of the most useful assets a negotiator can have. Expand the pie before dividing it. In most negotiations there are four major obstacles that inhibit the inventing of an abundance of options:&lt;/p&gt;

&lt;h4 id=&quot;premature-judgement&quot;&gt;Premature judgement&lt;/h4&gt;

&lt;p&gt;Nothing is so harmful to inventing as a critical sense waiting to pounce on the drawbacks of any new idea. Judgement hinders imagination. Under the pressure of a forthcoming negotiation, your critical sense is likely to be sharper. Practical negotiation appears to call for practical thinking, not wild ideas.&lt;/p&gt;

&lt;h4 id=&quot;searching-for-the-single-answer&quot;&gt;Searching for the single answer&lt;/h4&gt;

&lt;p&gt;The first impediment to creative thinking is premature crticism, the second is premature closure. By looking from the outset for the single best answer, you are likely to short-circuit a wiser decision-making process in which you select from a large number of possible answers.&lt;/p&gt;

&lt;h4 id=&quot;the-assumption-of-a-fixed-pie&quot;&gt;The assumption of a fixed pie&lt;/h4&gt;

&lt;p&gt;Why bother to invent at all if all the options are obvious and I can satisfy you only at my own expense?&lt;/p&gt;

&lt;h4 id=&quot;thinking-that-solving-their-problem-is-their-problem&quot;&gt;Thinking that solving their problem is their problem&lt;/h4&gt;

&lt;p&gt;Short-sighted self concern thus leads a negotiator to develop only partisan positions, partisan arguments, and one-sided solutions.&lt;/p&gt;

&lt;p&gt;Following are the solutions to these problems:&lt;/p&gt;

&lt;h4 id=&quot;separate-inventing-from-deciding&quot;&gt;Separate inventing from deciding&lt;/h4&gt;

&lt;p&gt;Since judgement hinders imagination, separate the creative act from the critical one; separate the process of thinking up possible decisions from the process of selecting among them. Invent first, decide later. As a negotiator, you will of necessity do much inventing by yourself. By definition, inventing new ideas requires you to think about things that are not already in your head. You should therefore consider the desirability of holding a brain-storming session with a few colleagues or friends. The group simply invents ideas without pausing to consider whether they are good, bad, realistic or unrealistic.&lt;/p&gt;

&lt;h5 id=&quot;guidelines-for-a-successful-brainstorming-session&quot;&gt;Guidelines for a successful brainstorming session&lt;/h5&gt;

&lt;h6 id=&quot;before-brainstorming&quot;&gt;Before Brainstorming:&lt;/h6&gt;

&lt;ol&gt;
  &lt;li&gt;Define your purpose - Think of what you would like to walk out of the meeting with.&lt;/li&gt;
  &lt;li&gt;Choose a few participants - The group should usually be between five and eight people.&lt;/li&gt;
  &lt;li&gt;Change the environment - Select a time and place distinguishing the session as much as possible from regular discussions. The more different a brainstorming session seems from a normal meeting, the easier it is for participants to suspend judgement.&lt;/li&gt;
  &lt;li&gt;Design an informal atmosphere - What does it take for you and other to relax?&lt;/li&gt;
  &lt;li&gt;Choose a facilitator - Someone at the meeting needs to facilitate —&amp;gt; to keep the meeting on track, to make sure everyone gets a chance to speak, to enforce any ground rules, and to stimulate discussion by asking questions.&lt;/li&gt;
&lt;/ol&gt;

&lt;h6 id=&quot;during-brainstorming&quot;&gt;During Brainstorming:&lt;/h6&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Seat the participants side-by-side facing the problem&lt;/p&gt;

    &lt;p&gt;The physical reinforces the psychological. Physically sitting side by side can reinforce the mental attitude of tacking a common problem together.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Clarify the ground rules, including the no-criticism rule.&lt;/p&gt;

    &lt;p&gt;The meeting begins with introduction all around and clarification of ground rules. Outlaw negative criticism of any kind.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Brainstorm&lt;/p&gt;

    &lt;p&gt;Once the purpose of the meeting is clear, let your imaginations go. Try to come up with a long list of ideas, approaching the question from every conceivable angle.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Record the ideas in full view&lt;/p&gt;

    &lt;p&gt;Recording the ideas either on a whiteboard or flipcharts gives the group a tangible sense of collective achievement; it reinforces the no-criticism rule; it reduces the tendency to repeat; and it helps stimulate other ideas.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h6 id=&quot;after-brainstorming&quot;&gt;After Brainstorming:&lt;/h6&gt;

&lt;ol&gt;
  &lt;li&gt;Star the most promising ideas&lt;/li&gt;
  &lt;li&gt;Invent improvements for promising ideas&lt;/li&gt;
  &lt;li&gt;Setup a time to evaluate ideas and decide&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;broaden-your-options&quot;&gt;Broaden your options&lt;/h4&gt;

&lt;p&gt;The key to wise decision-making lies in selecting from a great number and variety of options.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Multiply options by shuttling between the specific and the general: The Circle Chart&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/Users/Parth/Desktop/Notes/IMG_3844.jpg&quot; alt=&quot;IMG_3844&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Look through the eyes of different experts&lt;/p&gt;

    &lt;p&gt;Generate multiple options by examining the problem from the perspective of different professions and disciplines&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Invent agreements of different strengths&lt;/p&gt;

    &lt;p&gt;You can multiply the number of possible agreements on the table by thinking of “weaker” versions you might want to have on hand in case a sought-for agreement proves beyond reach. Similarly, where a permanent agreement is not possible, perhaps a provisional agreement is. At the very least, if you and the other side cannot reach first-order agreement, you can usually reach second-order agreement — that is, agree on where you disagree, so that you both know the issues in dispute, which are not always obvious.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Change the scope of a proposed agreement&lt;/p&gt;

    &lt;p&gt;Agreements may be partial, involve fewer parties, cover only selected subject matters, apply only to a certain geographical area, or remain in effect for only a limited period of time.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;look-for-mutual-gains&quot;&gt;Look for mutual gains&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Identify shared interests&lt;/p&gt;

    &lt;p&gt;In almost every case, your satisfaction depends to a degree on making the other side sufficiently content with an agreement to want to live up to it. Three points about shared interests are worth remembering.&lt;/p&gt;

    &lt;p&gt;First, shared interests lie latent in every negotiation. They may not be immediately obvious. Ask yourself: Do we have a shared interest in preserving our relationship? What opportunities lie ahead for cooperation and mutual benefit? What costs would we bear if negotiations broke off? Are there common principles, like a fair price, that we both can respect?&lt;/p&gt;

    &lt;p&gt;Second, shared interests are opportunities, not godsends. To be of use, you need to make something out of them. It helps to make a shared interest explicit and to formulate it as a shared goal.&lt;/p&gt;

    &lt;p&gt;Third, stressing your shared interests can make the negotiation smoother and more amicable.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dovetail differing interests&lt;/p&gt;

    &lt;p&gt;In many cases, a satisfactory agreement is made possible because each side wants different things. This is genuinely startling if you think about it. People generally assume that differences between two parties create the problem. Yet differences can also lead to a solution. Differences in interests and belief make it possible for an item to be of high benefit to you, yet low cost to the other side.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Different beliefs?&lt;/li&gt;
      &lt;li&gt;Different values placed on time?&lt;/li&gt;
      &lt;li&gt;Different predictions or forecasts?&lt;/li&gt;
      &lt;li&gt;Differences in aversion to risk?&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;If dovetailing had to be summed up in one sentence, it would be: Look for items that are of low cost to you and high benefit to them, and vice versa. Differences in interests, priorities, beliefs, forecasts, and attitudes toward risk all make dovetailing possible.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make their decisions easy&lt;/p&gt;

    &lt;p&gt;However complex the other side’s decisional process may seem, you will understand it better if you pick one person — probably the person with whom you are dealing — and see how the problem looks from his or her point of view. You may come to appreciate your negotiating role in a new light, and see your job, for example, as strengthening that person’s hand or giving her arguments that she will need to persuade others to go along.&lt;/p&gt;

    &lt;p&gt;​	Take a pencil and paper in hand try drafting a few possible agreements. It is never too early in a negotiation to start drafting as an aid to clear thinking. Prepare multiple versions, starting with the simplest possible. What are some of the terms that the other party could sign, terms that would be attractive to them as well as to you? Can you reduce the number of people whose approval would be required? Can you formulate an agreement that will be easy for them to implement?&lt;/p&gt;

    &lt;p&gt;​	Because most people are strongly influenced be their notions of legitimacy, one effective way to develop solutions easy for the other side to accept is to shape them so that they will appear legitimate. The other side is more likely to accept a solution if it seems the right thing to do — right in terms of being fair, legal, honorable, and hence forth.&lt;/p&gt;

    &lt;p&gt;​	Few things facilitate a decision as much as precedent. Search for it. Look for a decision or statement that the other side may have made in a similar situation, and try to base a proposed agreement on it. This provides an objective standard for your request and makes it easier for them to go along. Recognizing their probable desire to be consistent, thinking about what they have already done or said will help you generate options acceptable to you that also take their point of view into account.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Making threats is not enough&lt;/p&gt;

    &lt;p&gt;We often try to influence others by threats and warnings of what will happen if they do not decide as we would like. Offers are usually more effective. Concentrate both on making them aware of the consequences they can expect if they do decide as you wish and on improving those consequences from their point of view.&lt;/p&gt;

    &lt;p&gt;To evaluate an option from the other side’s point of view, consider how they might be criticized if they adopted it. Write out a sentence or two illustrating what the other side’s most powerful critic might say about the decision you are thinking of asking for. Such an exercise will help you appreciate the restraints within which the other side is negotiating. It should help you generate options that will adequately meet their interests so that they can make a decision that meets yours.&lt;/p&gt;

    &lt;p&gt;A final test of an option is to write it out in the form of a “yes able proposition.” Try to draft a proposal to which their responding with the single word “yes” would be sufficient, realistic, and operational. When you can do so, you will have reduced the risk that you immediate self-interest has blinded you to the necessity of meeting concerns of the other side.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;In summary, generate many options before selecting among them. Invent first; decide later. Look for shared interests and differing interests to dovetail. And seek to make their decision easy.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;insist-on-using-objective-criteria&quot;&gt;Insist on Using Objective Criteria&lt;/h3&gt;

&lt;p&gt;The approach is to commit yourself to reaching a solution based on principle, not pressure. Concentrate on the merits of the problem, not the mettle of the parties. Be open to reason, but closed to threats.&lt;/p&gt;

&lt;h4 id=&quot;principled-negotiation-produces-wise-agreements-amicably-and-efficiently&quot;&gt;Principled negotiation produces wise agreements amicably and efficiently&lt;/h4&gt;

&lt;p&gt;The more you bring standards of fairness, efficiency, or scientific merit to bear on your particular problem, the more likely you are to produce a final package that is wise and fair. The more you and the other side refer to precedent and community practice, the greater your chance of benefitting from past experience. And an agreement consistent with precedent is less vulnerable to attack.&lt;/p&gt;

&lt;p&gt;A constant battle for dominance threatens a relationship; principled negotiation protects it. It is far easier to deal with people when both of you are discussing objective standards for settling a problem instead of trying to force each other to back down.&lt;/p&gt;

&lt;p&gt;Approaching agreement through discussion of objective criteria also reduces the number of commitments that each side must make and then unmake as they move toward agreement. In positional bargaining, negotiators spend much of the time defending theri position and attacking the other side’s. People using objective criteria tend to use time more efficiently talking about possible standards and solutions.&lt;/p&gt;

&lt;h4 id=&quot;developing-objective-criteria&quot;&gt;Developing objective criteria&lt;/h4&gt;

&lt;p&gt;How do you develop objective criteria, and how do you use them in negotiating?&lt;/p&gt;

&lt;p&gt;Whatever method of negotiation you use, you will do better if you prepare in advance. This certainly holds true of principled negotiation. So develop some alternative standards beforehand and think through their application to your case.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Fair standards&lt;/p&gt;

    &lt;p&gt;At a minimum, objective criteria need to be independent of each side’s will. Ideally, to assure a wise agreement, objective criteria should not be only independent of will but also both legitimate and practical.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Fair procedures&lt;/p&gt;

    &lt;p&gt;Consider, for example, the age-old way to divide a piece of cake between two children; one cuts and the other chooses. Neither can complain about an unfair division. A variation on the procedure of “one cuts, the other chooses” is for the parties to negotiate what they think is a fair arrangement before they go on to decide their respective roles in it. As you consider procedural solutions, look at other basic means of settling differences: taking turns, drawing lots, letting someone else decide, and so on. The results may be unequal, but each side had an equal opportunity.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;negotiating-with-objective-criteria&quot;&gt;Negotiating with objective criteria&lt;/h4&gt;

&lt;p&gt;There are 3 basic points to remember:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Frame each issue as a joint search for objective criteria.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Ask “What’s your theory?”&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Agree first on principles&lt;/p&gt;

        &lt;p&gt;Each principle or standard the other side proposes becomes a lever you can then use to persuade them. Your case will have more impact if it is  presented in terms of ther criteria, and they will find it difficult to resist applying their criteria to the problem. What makes conceding particularly difficult is having to accept someone else’s proposal. If they suggested the standard, their deferring to it is not an act of weakness but an act of strength, of carrying out their word.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reason and be open to reason as to which standards are most appropriate and how they should be applied.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Never yield to pressure, only to principle.&lt;/p&gt;

    &lt;p&gt;Pressure can take many forms: a bribe, a threat, a manipulative appeal to trust, or a simple refusal to budge. In all these cases, the princpled response is the same: invite them to state their reasoning, suggest objective criteria you think apply, and refuse to budge except on this basis. Never yield to pressure, only to principle.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;what-if-they-are-more-powerful&quot;&gt;What if they are more powerful&lt;/h3&gt;

&lt;p&gt;In any negotiation there exist realities that are hard to change. In response to power, the most any method of negotiation can do is to meet two objectives: first, to protect you against making an agreement you should reject and second, to help you make the most of the assets you do have so that any agreement you reach will satisfy your interests as well as possible.&lt;/p&gt;

&lt;h4 id=&quot;protecting-yourself&quot;&gt;Protecting yourself&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The cost of using a bottom line&lt;/p&gt;

    &lt;p&gt;Your predetermined bottom line may save you from making a decision you would later regret. But the protection offered by adopting a bottom line involves high costs. It limits your ability to benefit from what you learn during negotiation. A bottom line also inhibits imagination. It reduces the incentive to invent a tailor-made solution that would reconcile differing interests in a way more advantageous for both you and them. A bottom line — by its very nature rigid — is almost certain to be too rigid.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Know your &lt;strong&gt;BATNA&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;The reason you negotiate is to produce something better than the results you can obtain without negotiating. What are your results? What is that alternative? That is the standard against which any proposed agreement should be measured. Your BATNA not only is a better measure but also has the advantage of being flexible enough to permit the exploration of imaginative solutions. Instead of ruling out any solution that does not meet your bottom line, you can compare a proposal with your BATNA to see whether it better satisfies your interests.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The insecurity of an unknown BATNA&lt;/p&gt;

    &lt;p&gt;If you have not thought carefully about what you will do if you fail to reach an agreement, you are negotiating with your eyes closed. You may, for instance, be too optimistic and assume that you have many other choices. One frequent mistake is psychologically to see your alternatives in the aggregate. In most circumstances, however, the greater danger is that you are too committed to reaching agreement. Not developed any alternative to a negotiated solution, you are unduly pessimistic about what would happen if negotiations broke off.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Formulate a trip wire&lt;/p&gt;

    &lt;p&gt;Although your BATNA is your true measure by which you should judge any proposed agreement, you may want another test as well. To give you early warning that the content of a possible agreement is beginning to run the risk of being too unattractive, it is useful to identify one far from perfect agreement that is better than your BATNA. Before accepting any agreement worse than the trip-wire package, you should take a break and reexamine the situation. A trip wire should provide you with some margin in reserve.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;making-the-most-of-your-assets&quot;&gt;Making the most of your assets&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The better your BATNA, the greater your power&lt;/p&gt;

    &lt;p&gt;People think of negotiating power as being determined by resources like wealth, political connections, physical strength, friends, and military might. In fact, relative negotiating power of two parties depends primarily upon how attractive to each is the option of not reaching agreement. Think for a moment about how you would feel walking into a job interview with no other job offers — only some uncertain leads. Think how the talk about salary would go. Now contrast that with how you would feel walking in with two other job offers. How would that salary negotiation proceed? The difference is power.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Develop your BATNA&lt;/p&gt;

    &lt;p&gt;Vigorous exploration of what you do if you do not reach agreement can greatly strengthen your hand. Attractive alternatives are not just sitting there waiting for you; you usually have to develop them. Generating possible BATNAs requires three distinct operations.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Inventing a list of actions you might conceivably take if no agreement is reached&lt;/li&gt;
      &lt;li&gt;Improving some of the more promising ideas and converting them into practical alternatives&lt;/li&gt;
      &lt;li&gt;Selecting, tentatively, the one alternative that seems best&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;The desirability of disclosing your BATNA to the other side depends on your assessment of the other side’s thinking. If your BATNA is extremely attractive — if you have another customer waiting in the next room — it is in your interest to let the other side know. If they think you lack a good alternative when in fact you have one, then you should almost certainly let them know. However, if your best alternative to a negotiated agreement is worse for you than they think, disclosing it will weaken rather than strengthen your hand.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Consider the other side’s BATNA&lt;/p&gt;

    &lt;p&gt;You should also think about the alternatives to a negotiated agreement available to the other side. The more you can learn of their alternatives, the better prepared you are for negotiation. Knowing their alternatives, you can realistically estimate what you can expect from the negotiation. If they appear to overestimate their BATNA, you will want to help them think through whether their expectations are realistic. If their BATNA is so good they don’t see any need to negotiate on the merits, consider what you can do to change it.&lt;/p&gt;

    &lt;p&gt;If both sides have attractive BATNAs, the best outcome of the negotiation — for both parties — may well be not to reach agreement. In such cases, a successful negotiation is one in which you and they amicably and efficiently discover that the best way to advance your respective interests is for each of you to look elsewhere and not to try further to reach agreement.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When the other side is powerful&lt;/p&gt;

    &lt;p&gt;If the other side has big guns, you do not want to turn a negotiation into a gunfight. The stronger they appear in terms of physical or economic power, the more you benefit by negotiating on the merits. To the extent that they have muscle and you have principle, the larger a role you can establish for principle the better off you are. The more easily and happily you can walk away from a negotiation, the greater your capacity to affect its outcome.&lt;/p&gt;

    &lt;p&gt;Developing your BATNA thus not only enables you to determine what is a minimally acceptable agreement, it will probably raise that minimum. Developing your BATNA is perhaps the most effective course of action you can take in dealing with a seemingly more powerful negotiator.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;what-if-they-wont-play&quot;&gt;What if they won’t play?&lt;/h3&gt;

&lt;p&gt;You may attack the problem on its merits; they may attack you. What can you do to turn them away from positions and toward the merits? There are 3 basic approaches for focusing ther attention on the merits. The first centers on what you can do. You yourself can concentrate on the merits, rather than on positions. This is contagious. If this doesn’t work, and they continue to use positional bargaining, you can resort to a second strategy that focuses on what they may do. It counters the basic moves of positional bargaining in ways that direct their attention to the merits. This strategy is called &lt;strong&gt;negotiation jujitsu&lt;/strong&gt;. The third approach focuses on what a third party can do. If neither of the first two approaches work, consider including a third party trained to focus the discussion on interests,  options and criteria.&lt;/p&gt;

&lt;h4 id=&quot;negotiation-jujitsu&quot;&gt;Negotiation Jujitsu&lt;/h4&gt;

&lt;p&gt;If the other side announces a firm position, you may be tempted to criticize and reject it. If they criticize your proposal, you may be tempted to defend it and dig yourself in. If they attack you, you may be tempted to defend yourself and counterattack. In short, if they push hard, you will tend to push back.&lt;/p&gt;

&lt;p&gt;Yet if you do, you will end up playing the positional bargaining game. DO NOT PUSH BACK.&lt;/p&gt;

&lt;p&gt;When they assert their positions, do not reject them. When they attack your ideas, don’t defend them. When they attack you, don’t counterattack. Break the viscious cycle by refusing to react. Instead of pushing back, sidestep their attack and deflect it against the problem. As in the Oriental martial arts of judo and jujitsu, avoid pitting your strength against theirs directly; instead, use your skill to step aside and turn their strength to your ends. Rather than resisting their force, channel it into exploring interests, inventing options for mutual gain, and searching for independent standards.&lt;/p&gt;

&lt;p&gt;Typically their attack will consist of three maneuvers: asserting their position forcefully, attacking your ideas, and attacking you.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Don’t attack their position, look behind it&lt;/p&gt;

    &lt;p&gt;Seek out and discuss the principles underlying the other side’s positions. To direct their attention toward improving the options on the table, discuss with them hypothetically what would happen if one of their positons was accepted.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Don’t defend your ideas, invite criticism and advice&lt;/p&gt;

    &lt;p&gt;A lot of time in negotiation is spent criticizing. Rather than resisting the other side’s criticism, invite it. Instead of asking them to accept or reject an idea, ask them what’s wrong with it. Examine their negative judgements to find out their underlying interests and to improve your ideas from their point of view. Rework your ideas and thus turn criticism from being an abstacle in the process of working toward agreement into an essential ingredient of that process.&lt;/p&gt;

    &lt;p&gt;Another way to channel criticism in a constructive direction is to turn the situation around and ask for their advice. Ask them what they would do if they were in your position.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Recast an attack on you as an attack on the problem&lt;/p&gt;

    &lt;p&gt;When the other side attacks you personally — as frequently happens — resist the temptation to defend yourself or to attack them. Instead, sit back and allow them to let off steam, Listen to them, show you understand what they are saying, and when they have finished, recast their attack on you as an attack on the problem.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ask questions and pause&lt;/p&gt;

    &lt;p&gt;Those involved in negotiation jujitsu use two key tools. The first is to use questions instead of statements. Statements generate resistance, whereas questions generate answers. Silence is one of your best weapons, use it. If they have made an unreasonable proposal or an attack you regard as unjustified, the best thing to do may be to sit there and not say a word.&lt;/p&gt;

    &lt;p&gt;If you have asked an honest question to which they have provided an insufficient answer, just wait. Silence creates the impression of a stalemate that the other side will feel impelled to break by answering your question or coming up with a new suggestion. When you ask questions, pause. Don’t take them off the hook by going right on with another question or some comment of your own. Some of the most effective negotiating you will ever do is when you are not talking.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;stock-phrases-you-can-use-for-principled-negotiation&quot;&gt;Stock phrases you can use for principled negotiation&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;“Please correct me if I’m wrong”&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;“We appreciate what you’ve done for us”&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;“My concern is fairness”&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“We would like to settle this on the basis of independent standards, not of who can do what to whom”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;“Trust is a separate issue” — This is not a matter of trust. The issue is the principle&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“Could I ask you a few questions to see whether my facts are right?”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;“What’s the principle behind your action?”&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“Let me see if I understand what you’re saying”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;“Let me get back to you”&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“Let me show you where I have trouble following some of your reasoning”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“One fair solution might be…”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;“It’s been a pleasure dealing with you”&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“If we agree… if we disagree…”&lt;/p&gt;

    &lt;p&gt;The trickiest part of the message to communicate is the alternative if no agreement is reached. Try to base the alternative on objective principle by attributing it to someone else. Distance yourself personally from the suggestion. Don’t state it as if you will definitely take action. Instead, leave it as a possibility and emphazise the reluctance to do anything drastic. Finally, try to close by affirming your confidence that a mutually satisfactory agreement will be reached&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;what-if-they-use-dirty-tricks&quot;&gt;What if they use dirty tricks&lt;/h3&gt;

&lt;p&gt;Tricky bargaining tactics are in effect one-sided proposals about negotiating procedure, about the negotiating game that the parties are going to play. To counter them, you will want to engage in principled negotiation about the negotiating process.&lt;/p&gt;

&lt;h4 id=&quot;how-do-you-negotiate-about-the-rules-of-the-game&quot;&gt;How do you negotiate about the rules of the game?&lt;/h4&gt;

&lt;p&gt;Often just recognizing a tactic will neutralize it. After recognizing the tactic, consider bringing it up with the other side. Apart from that, consider this a meta negotiation and follow the same steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Separate the people from the problem&lt;/li&gt;
  &lt;li&gt;Focus on interests, not positions&lt;/li&gt;
  &lt;li&gt;Invent options for mutual gain&lt;/li&gt;
  &lt;li&gt;Insist on using objective criteria&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;some-common-tricky-tactics&quot;&gt;Some common tricky tactics&lt;/h4&gt;

&lt;p&gt;Tricky tactics can be divided into three categories: deliberate deception, psychological warfare, and positional pressure tactics&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Deliberate deception - Misinterpretation of facts, authority or intentions&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Phony facts&lt;/p&gt;

        &lt;p&gt;Unless you have good reason to trust somebody, don’t. Do not let someone treat your doubtsas a personal attack. A practice of verifying factual assertions reduces the incentive for deception, and your risk of being cheated.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Ambiguous authority&lt;/p&gt;

        &lt;p&gt;The other side may allow you to believe that they, like you, have full authority to compromise whn they don’t. Before starting on any give-and-take, find out about the authority on the other side. It is perfectly legitimate to inquire, “Just how much authority do you have in this particular negotiation?” If the answer is ambiguous, you may wish to talk to someone with real authority or to make clear that you on your side are reserving equal freedom to reconsider any point.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Dubious intentions&lt;/p&gt;

        &lt;p&gt;Where the issue is one of possible misrepresentation of their intentions to comply with the agreement, it is often possible to build compliance features into the agreement itself. &lt;strong&gt;Make the problem explicit and use their protestations to get a guarantee.&lt;/strong&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Less than full disclosure is not the same as deception&lt;/p&gt;

        &lt;p&gt;Good faith negotiation does not require total disclosure&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Psychological warfare&lt;/p&gt;

    &lt;p&gt;These tactics are designed to make you feel uncomfortable, so that you will have a subconscious desire to end the negotiation as soon as possible&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Stressful situations&lt;/p&gt;

        &lt;p&gt;If you find the physical surroundings detrimental, do not hesitate to say so. You can suggest changing chairs, taking a break, or adjourning to a different location or another time.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Personal attacks&lt;/p&gt;

        &lt;p&gt;Recognizing the tactic will help nullify its effect; bringing it up explicitly will probably prevent a recurrence.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;The good-guy/bad-guy routine&lt;/p&gt;

        &lt;p&gt;If you recognize it, you won’t be taken in. When the good guy makes his pitch, just ask him the same question you asked the bad guy.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Threats&lt;/p&gt;

        &lt;p&gt;You can ignore threats; you can take them as unauthorized, spoken in haste, or simply irrelevant. You can also make it risky for the other side to communicate them. Sometimes, threats can also be turned to you political advantage.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Positional pressure tactics&lt;/p&gt;

    &lt;p&gt;This kind of bargaining tactic is designed to structure the situation so that only one side can effectively make concessions.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Refusal to negotiate&lt;/p&gt;

        &lt;p&gt;This is a negotiating ploy that attempts to use their entry into negotiation as a bargaining chip to obtain some concession on substance. You can communicate, suggest optionsand insist on using principles.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Extreme demands&lt;/p&gt;

        &lt;p&gt;Bringing the tactic to their attention works well. Ask for principled justification of their position until it looks ridiculous even to them.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Escalating demands&lt;/p&gt;

        &lt;p&gt;Call it to their attention, and take a break. Insist on using principle.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Lock-in tactics&lt;/p&gt;

        &lt;p&gt;Lock-ins, like threats, depend on communication. So, you may be able to interrupt the communication to make it ineffective. Alternatively, you can crack a joke and not take the lock-in seriously.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Hardhearted partner/boss&lt;/p&gt;

        &lt;p&gt;Recognize the tactic. Rather than discussing it with the other negotiator, you may want to get his agreement to the principle involved involved — perhaps in writing — and then if possible speak directly with the hardhearted partner.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;A calculated delay&lt;/p&gt;

        &lt;p&gt;In addition to making delaying tactics explicit and negotiating about them, consider creating a fading oppotunity for the other side.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Take it or leave it&lt;/p&gt;

        &lt;p&gt;As an alternative to explicitly recognizing the “take it or leave it” tactic and negotiating about it, consider ignoring it at first. Keep talking as if you didn’t hear it, or change the subject, perhaps by introducing other solutions. If you do bring up the tactic specifically, let them know what they have to lose if no agreement is reached and look for a face-saving way, such as a change in circumstances, for them to get out of the situation.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;questions&quot;&gt;Questions&lt;/h3&gt;

&lt;h4 id=&quot;can-the-way-i-negotiate-really-make-a-difference-if-the-other-side-is-more-powerful-and-how-do-i-enhance-my-negotiating-power&quot;&gt;“Can the way I negotiate really make a difference if the other side is more powerful?” AND “How do I enhance my negotiating power?”&lt;/h4&gt;

&lt;p&gt;—&amp;gt; How you negotiate (and how you prepare to negotiate) can make an enormous difference, whatever the relative strengths of each party.&lt;/p&gt;

&lt;h5 id=&quot;1-some-things-you-cant-get&quot;&gt;1. Some things you can’t get&lt;/h5&gt;

&lt;p&gt;You should not expect success in negotiation unless you are able to make the other side an offer they find more attractive than their BATNA. If that seems impossible, then negotiation doesn’t make sense. Concentrate instead on improving your BATNA and perhaps changing theirs.&lt;/p&gt;

&lt;h5 id=&quot;2-how-you-negotiate-makes-a-big-difference&quot;&gt;2. How you negotiate makes a big difference&lt;/h5&gt;

&lt;p&gt;In a situation where there is a chance for agreement, the way you negotiate can make the difference between coming to terms and not, or between an outcome that you find favorable and one that is merely acceptable. How you negotiate may determine whether the pie is expanded or merely divided, and whether you have a good relationship with the other side or a strained one. When the other side holds all the cards, how you negotiate is absolutely critical.&lt;/p&gt;

&lt;h5 id=&quot;3-resources-are-not-the-same-as-negotiation-power&quot;&gt;3. Resources are not the same as “negotiation power”&lt;/h5&gt;

&lt;p&gt;Negotiation power is the ability to persuade someone to do something. The United States is rich and has lots of nuclear bombs, but neither has been of much help in deterring terrorist actions or freeing hostages when they have been held. Whether your resources give you negotiating power will depend on the context — on whom you are trying to persuade and what you want them to do.&lt;/p&gt;

&lt;h5 id=&quot;4-dont-ask-whos-more-powerful&quot;&gt;4. Don’t ask who’s more powerful&lt;/h5&gt;

&lt;p&gt;Trying to estimate whether you or your counterparts are more powerful can be risky. In fact, a great deal can be done to ehance your negotiation power even when the resource balance is one-sided. Of course, there will be negotiations where, at least in the short term, the best cards are held by the other side. But in this increasingly interdependent world, there are almost always resources and potential allies that a skilled and persistent negotiator can exploit, at least to move the fulcrum, if not ultimately to tip the balance of power the other way. You won’t find out what’s possible unless you try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The best rule of thumb is to be optimistic — to let your reach exceed your grasp. Without wasting a lot of resources on hopeless causes, recognize that many things are worth trying for even if you may not succeed. Studies of negotiation consistently show a strong correlation between aspiration and result. Within reason, it pays to think positively.&lt;/strong&gt;&lt;/p&gt;

&lt;h5 id=&quot;5-there-are-many-sources-of-negotiation-power&quot;&gt;5. There are many sources of negotiation power&lt;/h5&gt;

&lt;p&gt;Negotiation power has a lot of sources. One is having a good BATNA. Provided they believe you, it is persuasive to tell the other side that you have a better alternative.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;There is power in developing a good working relationship between the people negotiating&lt;/p&gt;

    &lt;p&gt;If you understand the other side and they understand you, negotiations are likely to be smoother and more successful for both parties. In this sense, negotiation power is not a zero-sum phenomenon. More negotiation power for the other side does not necessarliy mean less for you.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There is power in effective communication&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Good communication is an especially significant source of negotating power. Crafting your message with punch, listening to the other side, and showing that you have heard can all increase your persuasiveness.&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;It is comparatively easy to listen when the other side is saying something that you agree with. It is harder to listen to things with which you disagree, but that is the very time it is most effective. Listen before you launch into a rebuttal. Inquire. Make sure you understand their view, and make sure they know you understand. Once the other side knows that you understand what they have said, they cannot dismiss your disagreement as simple lack of understanding.&lt;/p&gt;

    &lt;p&gt;As we know, recognizing a tactic or move allows us to name it and begin an explicit negotiation process. Another way to “change the game” is to change the frame. In other words, move focus in the negotiation from positions to interests, options, or standards. If the other side says, for example, “$10,000 is the most we will pay,” when you think $50,000 would be fair, you could respond in several ways:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;Reframe to interests: “I hear that is your position. Given how far that seems below the market price, help me understand your interests. Are you experiencing a serious cash flow crisis?”&lt;/li&gt;
      &lt;li&gt;Reframe to options: “10,000 is one option, just as $100,000 or $200,000 would be attracive options from our point of view. I think we’ll get a lot further brainstorming options likely to be acceptable and attractive to both of us. What if we were to…?”&lt;/li&gt;
      &lt;li&gt;Reframe to standards: “You must have good reasons for thinking $10,000 is a fair offer. How did you arrive at that number? Why that number, instead of, say $0 or $100,000? My understanding is that the market price is $50,000. Why should we agree on less?”&lt;/li&gt;
      &lt;li&gt;Reframe to BATNA: “Of course, that’s your decision to make, and perhaps someone else will accept that. I think we need to think hard now about whether an agreement is possible here that would make sense for both of us.”&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;One of the greatest powers you have is to reframe, using statements and questions to change the focus of negotiation to interests, options and standards — and thus to change the game from postional bargaining to principled negotiation.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There is power in understanding interests&lt;/p&gt;

    &lt;p&gt;The more clearly you understand the other side’s concerns, the better able you will be to satisfy them at minimum cost to yourself.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There is power in inventing an elegant option&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There is power in using external standards of legitimacy&lt;/p&gt;

    &lt;p&gt;You can use standards of legitimacy both as a sword to persuade others, and a shield to help you resist pressure to give in arbitrarily&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There is power in developing a good BATNA&lt;/p&gt;

    &lt;p&gt;In addition to improving your overall BATNA, you shouldalso prepare a “micro-BATNA” — if no agreement is reached at THIS MEETING, what is the best outcome? It helps to draft in advance a good exit line to use if a meeting is inconclusive.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There is power in making a carefully crafted commitment&lt;/p&gt;

    &lt;p&gt;One additional source of persuasive power is the power of making committments. You can use a committment to enhance your negotiating power in three ways: You can commit to what you will do. You can, with care, make a negative committment as to what you will not do. And you can clarify precisely what commitments you would like the other side to make.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;6-make-the-most-of-your-potential-power&quot;&gt;6. Make the most of your potential power&lt;/h5&gt;

&lt;p&gt;To make the most of your potential negotiating power, you should use each source of power in harmony with the other sources. Negotiators sometimes look for their strongest source of power and try to use it alone. For example, if a negotiator has a strong BATNA, he or she may confront the other side with it, threatening to walk away unless the last offer is accepted. The total impact of such negotiation power as you have will be greater if each element is used in ways that reinforce the others.&lt;/p&gt;

&lt;p&gt;You will also be more effective as a negotiator if you believe in what you are saying and doing. Whatever use you are able to make of the ideas in this book, don’t wear them as though you were wearing someone else’s clothes. Cut and fit what we say until you find an approach that both makes sense and is comfortable for you. This may require experimentation and a period od adjustment that is not so comfortable, but in the end, you are likely to maximize your negotiation power if you believe what you say and what you believe.&lt;/p&gt;</content><author><name>Parth Mehta</name><email>pm2877@columbia.edu</email></author><summary type="html">Summary of the book 'Getting to Yes' on Negotiations</summary></entry><entry><title type="html">Intro to ML by Parth Mehta</title><link href="http://localhost:4000/ML-Tech-talk/" rel="alternate" type="text/html" title="Intro to ML by Parth Mehta" /><published>2019-04-17T08:00:00-07:00</published><updated>2019-04-17T08:00:00-07:00</updated><id>http://localhost:4000/ML-Tech-talk</id><content type="html" xml:base="http://localhost:4000/ML-Tech-talk/">&lt;h1 id=&quot;supervised-machine-learning-models&quot;&gt;Supervised Machine Learning Models&lt;/h1&gt;

&lt;h1 id=&quot;focus-of-the-talk&quot;&gt;Focus of the talk&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Understand core concepts and terminologies for Machine Learning&lt;/li&gt;
  &lt;li&gt;How to build Machine Learning models for classification problems and evaluate them&lt;/li&gt;
  &lt;li&gt;Supervised Learning models&lt;/li&gt;
  &lt;li&gt;Solve an actual ML problem posted on Kaggle&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-is-machine-learning-ml&quot;&gt;What is Machine Learning (ML)?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Machine learning is about extracting knowledge from data.&lt;/li&gt;
  &lt;li&gt;We want to learn, from a large dataset, to make decisions based on future observations.&lt;/li&gt;
  &lt;li&gt;You input to a machine learning program a dataset, and it learns to make decisions on future observations by itself.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;why-machine-learning&quot;&gt;Why Machine Learning?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Creating rule-based system requires deep understanding of how the rules should be made, by an expert.&lt;/li&gt;
  &lt;li&gt;The logic required to make a decision is specific to a single domain and task. Changing the task even slightly might require a rewrite of the whole system.&lt;/li&gt;
  &lt;li&gt;You cannot create RULES for everything - eg. image recoginition&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;types-of-machine-learning&quot;&gt;Types of Machine Learning&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Supervised Learning&lt;/strong&gt;    &amp;lt;==   Our focus for today&lt;/li&gt;
  &lt;li&gt;Unsupervised Learning&lt;/li&gt;
  &lt;li&gt;Reinforcement Learning (RL)&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;supervised-learning&quot;&gt;Supervised Learning&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Machine learning algorithms that learn from input/output pairs are called supervised learning algorithms&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The desired outputs (Y vector in the image below) provided for each example act as a “supervisor” to the algorithms to help them learn.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Most common type of ML in industry and research currently.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;A common example is spam filtering.
&lt;img src=&quot;/images/data-table.jpeg&quot; alt=&quot;data-table&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;mathematically-speaking&quot;&gt;Mathematically Speaking&lt;/h1&gt;

&lt;p&gt;Supervised learning is where you have &lt;strong&gt;input variables (x)&lt;/strong&gt; and an &lt;strong&gt;output variable (Y)&lt;/strong&gt; and you use an algorithm to learn the mapping function from the input to the output.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Y = f(X)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The goal is to approximate the mapping function so well that when you have new &lt;strong&gt;input data (x)&lt;/strong&gt; that you can predict the &lt;strong&gt;output variables (Y)&lt;/strong&gt; for that data.&lt;/p&gt;

&lt;h1 id=&quot;unsupervised-learning-in-contrast&quot;&gt;Unsupervised Learning in contrast&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;In unsupervised learning, even for the given dataset, only the input data is known, and no known output data is given to the algorithm.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A common example is &lt;code class=&quot;highlighter-rouge&quot;&gt;Identifying topics in a set of blog posts&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;reinforcement-learning-rl&quot;&gt;Reinforcement Learning (RL)&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;This branch is increasingly ganining popularity. Alpha Go program from DeepMind company, that defeated the world champion in the game of Go used RL.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reinforcement learning is about an agent learning to interact with an environment, with some ultimate goal. When the agent performs a desired action, the algorithm rewards the agent, and when it makes a mistake, the algorithm penalizes the agent. This helps the agent learn.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;important-python-libraries&quot;&gt;Important Python Libraries&lt;/h1&gt;

&lt;p&gt;Some important python libraries and their uses:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;scikit-learn or sklearn&lt;/strong&gt; - scikit-learn is a very popular tool, and the most prominent Python library for machine learning. It contains a number of state-of-the-art machine learning algorithms, as well as comprehensive documentation about each algorithm.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NumPy&lt;/strong&gt; - scikit-learn takes in data only in the form of NumPy arrays. It contains functionality for multidimensional arrays, and complex math operations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;matplotlib&lt;/strong&gt; - matplotlib is the primary scientific plotting library in Python.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;pandas&lt;/strong&gt; - pandas is a Python library for data wrangling and analysis. A pandas DataFrame is a table, similar to an Excel spreadsheet. pandas also provides the ability to ingest data from variety of file formats like CSV, SQL, excel files, etc.&lt;/p&gt;

&lt;h1 id=&quot;basic-terminology&quot;&gt;Basic Terminology&lt;/h1&gt;

&lt;p&gt;To understand the concepts and examples that follow, we need to grasp on some basic terminology used in Machine Learning.&lt;/p&gt;

&lt;p&gt;Let’s do that with an example&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datasets&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;digits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datasets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_digits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#pre-loaded labelled dataset&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dict_keys(['data', 'target', 'target_names', 'images', 'DESCR'])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Dimensions of the data&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Dimensions of the data
(1797, 8, 8)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This tells us that in my dataset, there are 1797 images, each with dimensions 8 x 8 (64 pixels)&lt;/p&gt;

&lt;p&gt;This is a very small and simple image dataset.
Every single image is a grayscale image, where each pixel is represented by a brightness value from 0 to 16.&lt;/p&gt;

&lt;p&gt;Let’s look at how these images look like:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matplotlib&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inline&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;images_and_labels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;digits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images_and_labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'off'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imshow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gray_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interpolation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'nearest'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Labels: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;i'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/ML_BOF_TALK_14_0.png&quot; alt=&quot;output&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s see how a single image looks like in code.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Arrangement of pixels in first image of the dataset&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Arrangement of pixels in first image of the dataset

[[ 0.  0.  5. 13.  9.  1.  0.  0.]
 [ 0.  0. 13. 15. 10. 15.  5.  0.]
 [ 0.  3. 15.  2.  0. 11.  8.  0.]
 [ 0.  4. 12.  0.  0.  8.  8.  0.]
 [ 0.  5.  8.  0.  0.  9.  8.  0.]
 [ 0.  4. 11.  0.  1. 12.  7.  0.]
 [ 0.  2. 14.  5. 10. 12.  0.  0.]
 [ 0.  0.  6. 13. 10.  0.  0.  0.]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;data-representation&quot;&gt;Data representation&lt;/h1&gt;

&lt;p&gt;Since Machine Learning largely includes various mathematical operations over data, &lt;strong&gt;we need to represent our data in a way that we can apply these math operations in an optimized way&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The way we do it is to represent data in the form of matrices, or in programming terms, a 2D array.&lt;/p&gt;

&lt;p&gt;Since, each our image is an 8 x 8 matrix and we have about 1800 images, our data is currently represented in 3 dimensions (1800 x 8 x 8).&lt;/p&gt;

&lt;p&gt;So instead, we represent each image as a 1 x 64 matrix (or a vector). By doing this, our dataset of images would be a 2D matrix (1800 x 64)&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Dimensions of the data&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Representation of a single image&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Dimensions of the data
(1797, 64)

Representation of a single image
[ 0.  0.  5. 13.  9.  1.  0.  0.  0.  0. 13. 15. 10. 15.  5.  0.  0.  3.
 15.  2.  0. 11.  8.  0.  0.  4. 12.  0.  0.  8.  8.  0.  0.  5.  8.  0.
  0.  9.  8.  0.  0.  4. 11.  0.  1. 12.  7.  0.  0.  2. 14.  5. 10. 12.
  0.  0.  0.  0.  6. 13. 10.  0.  0.  0.]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So let’s say this is the data we would be working on.&lt;/p&gt;

&lt;h2 id=&quot;goal--to-create-a-model-that-learns-what-digit-the-images-represent-and-predict-accurately-the-digit-in-a-new-image-given-to-it&quot;&gt;GOAL:  To create a model, that learns what digit the images represent and predict accurately the digit in a new image given to it.&lt;/h2&gt;

&lt;p&gt;Now, that we have the data and have set our goal, we are ready to learn some terms:&lt;/p&gt;

&lt;h2 id=&quot;sample&quot;&gt;Sample:&lt;/h2&gt;
&lt;p&gt;Each sample refers to a single row in a dataset. In our case, a sample would be a single image.&lt;/p&gt;
&lt;h2 id=&quot;feature&quot;&gt;Feature:&lt;/h2&gt;
&lt;p&gt;Each column in the dataset is known as a feature vector and each entry in a sample is a feature. For our images, the pixel value is a feature. So our images have 64 features each.&lt;/p&gt;

&lt;p&gt;Features are the properties of a sample, that help the machine understand and learn about the sample.&lt;/p&gt;

&lt;h2 id=&quot;label&quot;&gt;Label:&lt;/h2&gt;
&lt;p&gt;Ground truth value of a sample. These are the values against which we check how accurate our predictions are. In our example, the label array tells us the actual value of the digits in the images.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Dimensions of the labels array&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Target labels of the images&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Dimensions of the labels array
(1797,)

Target labels of the images
[0 1 2 ... 8 9 8]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;generalization-training-data-test-data&quot;&gt;Generalization, Training Data, Test Data&lt;/h3&gt;

&lt;p&gt;One of the most important concepts to learn in supervised machine learning, is of generalization.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;We want to build a machine learning model from this data that can predict the number in a new image. We need some data on which we can assess how our model is doing.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Unfortunately, we cannot use the data we used to build the model, to evaluate it too. This is because our model can always simply remember the whole training set, and will therefore always predict the correct label for any point in the training set.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This &lt;strong&gt;“remembering”&lt;/strong&gt; does not indicate to us whether our model will also perform well on new data (in other words, whether it will &lt;strong&gt;generalize&lt;/strong&gt; well).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To assess the model’s learning at every step, we show it new data (data that it hasn’t seen while learning), but for which we have labels.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This is usually done by splitting the labeled data we have collected (our 1797 images) into two parts. One part of the data is used to build our machine learning model, and is called the training data or training set. The rest of the data will be used to assess how well the model works; this is called the test data, test set, or hold-out set.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Think of this as your Math exam in school!!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn.model_selection&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train_test_split&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;svm&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# separating out data for training and testing&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;X_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train_test_split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;digits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;digits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'target'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random_state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# setting parameters for our model&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;classifier_model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;svm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SVC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gamma&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;100.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# training the model on the train data only!&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;classifier_model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Let's check how well the model has learned on the training data&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;train_accuracy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classifier_model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Train accuracy: {}&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_accuracy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Train accuracy: 100.0%
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Training accuracy only indicates that our model has learned the training set properties well. It doesn’t say how well it will perform on new data.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Now I have a model that has learned to predict the digits, given images. Let's test it out on 1 new image&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;single_prediction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classifier_model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'prediction on new image &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;single_prediction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Now let's see if this matches with the actual label (ground-truth)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imshow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gray_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interpolation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'nearest'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'label of the new image &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;prediction on new image 
[2]

label of the new image 
2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/ML_BOF_TALK_25_1.png&quot; alt=&quot;output&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Let's check how accurate our model is, using the test data&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;test_accuracy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classifier_model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Test accuracy: {}&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_accuracy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Test accuracy: 86.8888888888889%
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Now, I can infer from this that my model is &lt;strong&gt;87% likely to recognise a new image correctly&lt;/strong&gt;. This problem is commonly known as &lt;code class=&quot;highlighter-rouge&quot;&gt;Optical Character Recognition&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;The above problem is also a good example of a certain type of a Machine Learning problem - &lt;strong&gt;Classification problems&lt;/strong&gt;. We want to classify the images into categories.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A more relatable, but a very similar problem is a spam filter for emails. The goal is simple here: classify my email into either of 2 classes - spam or not spam.&lt;/p&gt;

    &lt;p&gt;The interesting question is: what are the features for every email sample?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;canIPush&lt;/code&gt; program we are trying to build, is also a perfect example of a classification problem.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;supervised-machine-learning-problems&quot;&gt;Supervised Machine Learning Problems&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Classification - the goal is to predict a class label, which is a choice from a predefined list of possibilities.&lt;/li&gt;
  &lt;li&gt;Regression - the goal is to predict a continuous number.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example: Predicting a person’s annual income from their education, their age, and where they live is an example of a regression task. When predicting income, the predicted value is an amount, and can be any number in a given range.&lt;/p&gt;

&lt;h1 id=&quot;ml-workflow&quot;&gt;ML Workflow&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/images/ml-workflow.png&quot; alt=&quot;ML workflow chart&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;focus-today---building-supervised-learning-models&quot;&gt;Focus today - Building Supervised Learning Models&lt;/h1&gt;

&lt;h1 id=&quot;so-what-are-ml-models&quot;&gt;So what are ML Models?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Models are what make the machines “intelligent”.&lt;/li&gt;
  &lt;li&gt;They are the algorithms that help the machines learn using the available data, which you can then use as an input/output blackbox to get predictions on real-world input.&lt;/li&gt;
  &lt;li&gt;You don’t explicitly program the algorithm to answer for the new input. You help it learn from the data samples, and it tries and generalizes it to predict the answer to the new input.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;model-complexity-overfitting-and-underfitting&quot;&gt;Model Complexity, Overfitting and Underfitting&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/generalization_curve.jpeg&quot; alt=&quot;generalization_curve&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;linear-models-for-classification&quot;&gt;Linear Models for Classification&lt;/h1&gt;

&lt;p&gt;In our example above, we just used a linear classification model to classify our digits data. We used a library function with an in-built machine learning algorithm with a certain set of parameters.&lt;/p&gt;

&lt;p&gt;But how does these classification models work? It is important to know this to select the right model for the right use case, and also to tune a model with correct parameters.&lt;/p&gt;

&lt;p&gt;Dhruv will help us answer this question.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;p&gt;Introduction to Machine Learning in Python (IMLP) - https://www.oreilly.com/library/view/introduction-to-machine/9781449369880/&lt;/p&gt;</content><author><name>Parth Mehta</name><email>pm2877@columbia.edu</email></author><summary type="html">Tech session conducted by me teaching ML basics to engineers at Yahoo</summary></entry><entry><title type="html">iOS Development</title><link href="http://localhost:4000/iOS-Development/" rel="alternate" type="text/html" title="iOS Development" /><published>2019-03-22T08:13:06-07:00</published><updated>2019-03-22T08:13:06-07:00</updated><id>http://localhost:4000/iOS-Development</id><content type="html" xml:base="http://localhost:4000/iOS-Development/">&lt;h1 id=&quot;ios-training---big-nerd-ranch&quot;&gt;iOS Training - Big Nerd Ranch&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Instructor&lt;/strong&gt;: Zachary Waldowski (zachary@bignerdranch.com)&lt;/p&gt;

&lt;h2 id=&quot;general-notes&quot;&gt;General Notes&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Xcode comes with an iOS simulator, not emulator . The difference between emulators and simulators is that emulators mimic the software &lt;strong&gt;&lt;em&gt;and&lt;/em&gt;&lt;/strong&gt; hardware environments found on actual devices. Simulators, on the other hand, only mimic the software environment; they otherwise have access to all of the host system’s &lt;strong&gt;(the laptop’s)&lt;/strong&gt; hardware resources such as disk space, memory and processor speed.&lt;/li&gt;
  &lt;li&gt;Main.storyboard –&amp;gt; description of UI in the application.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;control + drag to activate layout constraints between 2 views&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;alt + click –&amp;gt; see data type&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;To connect views to their references in the code, go to Controller View, and in the connections inspector, connect the variables declared in code to the UI elements.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;To create actions for methods, drag the action from connections inspector to the code to create a new action. It’s easier to use the Assistant editor to see both the ViewController.swift and the Main.storyboard.&lt;/li&gt;
  &lt;li&gt;Vertical spacing is similar to relative positioning. It is relative to two views.&lt;/li&gt;
  &lt;li&gt;Swift is a statically typed and a strongly typed language.&lt;/li&gt;
  &lt;li&gt;Unlike Android, the app or the activity is not relaunched when the screen is rotated. This is because iOS has separate view heirarchy process and a separate view layout process. Layout constraints are applied during the view layout process.&lt;/li&gt;
  &lt;li&gt;Many iOS frameworks are still written in Objective-C even though we interact with them through Swift.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;@discardableResult&lt;/code&gt; annotation before the &lt;code class=&quot;highlighter-rouge&quot;&gt;func&lt;/code&gt; keyword in the function definition means that a caller of this function is free to ignore the result of calling this function.&lt;/li&gt;
  &lt;li&gt;When writing iOS applications, it is important to treat each UIViewController as its own little world. The stuff that has already been implemented in Cocoa Touch will do the heavy lifting.&lt;/li&gt;
  &lt;li&gt;Instead of assigning a value to the property directly, the value is sometimes set using a closure. Using a closure like this allows you to set the value for a variable or constant that requires multiple lines of code, which can be very useful when configuring objects. This makes your code more maintainable because it keeps the property and the code needed to generate the property together.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;mvc&quot;&gt;MVC&lt;/h2&gt;

&lt;p&gt;iOS follows Model-View-Controller pattern. In the MVC design pattern, which iOS developers do their best to follow, each class falls into exactly one of the following categories:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;model: holds data and knows nothing about the UI&lt;/li&gt;
  &lt;li&gt;view: is visible to the user and knows nothing about the model objects&lt;/li&gt;
  &lt;li&gt;controller: keeps the UI and the model objects in sync and controls the flow of the application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/image-20190318104116297.png&quot; alt=&quot;image-20190318104116297&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sample app code:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  ViewController.swift&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  Quiz&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  Created by Parth Mehta on 3/18/19.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  Copyright © 2019 Big Nerd Ranch. All rights reserved.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIKit&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;From what is congnac made?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;What is 7 + 7?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;What is the capital of Vermont?&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;answers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Who knows&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;14&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Montepelier&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;currentQuestionIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;questionLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UILabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;answerLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UILabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;question&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentQuestionIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;questionLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;question&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;@IBAction&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onTapShowAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentQuestionIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;answerLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;@IBAction&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onnTapNextQuestion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;answerLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;????&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;currentQuestionIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentQuestionIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;questions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;question&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentQuestionIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;questionLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;question&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/image-20190318113932176.png&quot; alt=&quot;image-20190318113932176&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Only this much code to create the question answer app!! :D&lt;/p&gt;

&lt;h2 id=&quot;swift-basics&quot;&gt;Swift Basics&lt;/h2&gt;

&lt;h3 id=&quot;optionals-and-optional-binding&quot;&gt;Optionals and Optional Binding&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;An optional lets you express the possibility that a variable may not store a value at all. The value of an optional will either be an instance of the specified type or nil.&lt;/li&gt;
  &lt;li&gt;Allows the developer to indicate that an instance of any data type may be nil.&lt;/li&gt;
  &lt;li&gt;Note that before using the optional variables like normal variables, you must unwrap the optional and address the possibility of it being nil.&lt;/li&gt;
  &lt;li&gt;Use ‘if let’ to check values and conditionally perform logic (optional binding).&lt;/li&gt;
  &lt;li&gt;Two ways of unwrapping an optional variable: optional binding and forced unwrapping.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Subscripting dictionaries:&lt;/strong&gt; Recall that subscripting an array beyond its bounds causes a trap. Dictionaries are different. The result of subscripting a dictionary is an optional:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;titles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Leader&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Dear Leader&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Commandante&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Commandante&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Brightlord&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Brightlord&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;optionalTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Leader&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;optionalTitle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Note that here, we convert the optional optionalTitle to a String&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// greeting += &quot; \(optionalTitle!)&quot; // crash if optionalTitle  == nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;collections-array&quot;&gt;Collections: Array&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Matt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Scott&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Josh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Nick&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// could also infer type&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bros&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Brian&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [&quot;Matt&quot;,&quot;Scott&quot;,&quot;Josh&quot;,&quot;Nick&quot;,&quot;Brian&quot;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Brandon&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [&quot;Matt&quot;,&quot;Scott&quot;,&quot;Josh&quot;,&quot;Brandon&quot;,&quot;Brian&quot;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bros&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;removeAtIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [&quot;Matt&quot;,&quot;Scott&quot;,&quot;Josh&quot;,&quot;Brandon&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;collections-dictionary&quot;&gt;Collections: Dictionary&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;etBroHome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Matt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;GA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Scott&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;DC&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;etBroHome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Brian&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;GA&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [&quot;Matt&quot;: &quot;GA&quot;,&quot;Scott&quot;: &quot;DC&quot;,&quot;Brian: GA&quot;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oldMattSt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;etBroHome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;updateValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Matt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Old state: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldMattSt&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;control-flow-conditional-statements&quot;&gt;Control Flow: Conditional Statements&lt;/h3&gt;

&lt;p&gt;‘if’ executes a set of statements if expression evalutates to true&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;swiftIsAwesome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swiftIsAwesome&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Duh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Something went wrong.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;‘switch’ statements compare a value against a number of cases&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Very imp thing to note is the absence of break statements. Swift break statements don't fall through by default. You can however, specify it to fall through. You can't fall through multiple cases though.&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;favoriteFood&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Cookie Pie&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;favoriteFood&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Vegetables&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Ew&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Fruit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Okay...&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hasSuffix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Pie&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// this assigns x = favoriteFood first&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; sounds good!&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;comment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Tell me more...&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;control-flow-for-in-loop&quot;&gt;Control Flow: For-in Loop&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Note that there is not manual version of the for-loop. If we need to use a manual version, we can use a while loop.&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1 2 3 4&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1 2 3 4 5&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;things&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;socks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bannana&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ennui&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;things&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;etBroHome&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Matt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;GA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Scott&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;DC&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// infers type&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;etBroHome&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// (Matt, GA); (Scott, DC)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;functions&quot;&gt;Functions&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// pay attention to the return type and the external parameter name&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;printNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// logs 5 to console&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equalToTen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myNumber&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;// myNumber is an explicitly named external parameter&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;equalToTen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;myNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hasMatches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hasMatch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; 
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hasMatch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasMatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Has matches: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hasMatches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;equalToTen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// (true, 2)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;closures&quot;&gt;Closures&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;moreNumbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;newNumbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moreNumbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;   			&lt;span class=&quot;c1&quot;&gt;// in is just a seperator that separates params from 										the function body in closures&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [30,0,0,72]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;structs&quot;&gt;Structs&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;House&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hotTubs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;describeHouse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;House has &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hotTubs&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; hot tubs!&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;myHouse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;House&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hotTubs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myHouse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describeHouse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// House has 4 hot tubs!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;classes&quot;&gt;Classes&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hasChildren&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hasStaticChildren&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; 		&lt;span class=&quot;c1&quot;&gt;// class level variable&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hasChildren&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// constructor. Note that all inits are functions.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// You can also have destructors called dinit()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasChildren&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasChildren&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;exampleTypeMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// class level method&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// like a static method in Java?&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// stuff here&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;exampleInstanceMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// instance level method&lt;/span&gt;
    	&lt;span class=&quot;c1&quot;&gt;// stuff here&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;john&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hasChildren&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exampleTypeMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;john&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exampleInstanceMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// The way we assign innitialisation values are safer in Swift&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hasChildren&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;heightInMeters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hasChildren&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasChildren&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasChildren&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;heightInMeters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heightInMeters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;john&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;heightInMeters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hasChildren&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Differences between Classes and Structs in Swift&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Class instances are shared in memory.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Class instances are copied by reference, struct instances are copied by value,&lt;/strong&gt; i.e. Each copy of a struct is a new instance.&lt;/li&gt;
  &lt;li&gt;Contents of classes are mutable by all instances, irrespective of whether they are defined as &lt;code class=&quot;highlighter-rouge&quot;&gt;let &lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt;, unlike in structs.&lt;/li&gt;
  &lt;li&gt;Structs have default initializers, unlike classes. Classes need initializers to be defined by us.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;properties&quot;&gt;Properties&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Meal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Day&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;breakFast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Meal&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;intervalBetweenMeals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lunch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Meal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;breakFast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;breakFast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intervalBetweenMeals&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;duration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;breakFast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Meal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newLunch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;breakFast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newLunch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intervalBetweenMeals&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;breakFast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newLunch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aMeal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Meal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aDay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Monday&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;breakFast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aMeal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;intervalBetweenMeals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;aDay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lunch&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// name = Monday; time = 12; duration = 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;protocols&quot;&gt;Protocols&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Protocols are similar to interfaces in Java and you can conform to multiple protocols (this is how you can achieve multiple inheritance in Swift).&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ExampleProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aReadonlyIntProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aReadwriteStringProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SomeClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ExampleProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;c1&quot;&gt;// code here&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// getter for aReadOnlyIntProperty here&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// getter and setter for aReadWriteStringProperty here&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;extensions&quot;&gt;Extensions&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// add custom vars and methods to the basic types in Swift.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Note the visibility of these extensions is across the entire project.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ExampleProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;timesFive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// code here &lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timesFive&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 25&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;generics&quot;&gt;Generics&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swapTwoValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;inout&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;inout&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
	&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;temporaryA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temporaryA&lt;/span&gt;     
    &lt;span class=&quot;c1&quot;&gt;// (a, b) = (b, a)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;swapTwoValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anotherInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;swapTwoValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anotherString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RemoveInstance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ItemType&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mutating&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;removeInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ItemType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;views-basics&quot;&gt;Views Basics&lt;/h2&gt;

&lt;h3 id=&quot;views&quot;&gt;Views&lt;/h3&gt;

&lt;p&gt;Views are objects that are visible to the user, like buttons, text fields, and sliders. View objects make up an application’s UI. A view:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;is an instance of UIView or one of its subclasses&lt;/li&gt;
  &lt;li&gt;knows how to draw itself&lt;/li&gt;
  &lt;li&gt;can handle events, like touches&lt;/li&gt;
  &lt;li&gt;exists within a hierarchy of views whose root is the application’s window&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-view-hierarchy&quot;&gt;The View Hierarchy&lt;/h3&gt;

&lt;p&gt;Every application has a single instance of UIWindow that serves as the container for all the views in the application. UIWindow is a subclass of UIView, so the window is itself a view. The window is created when the application launches. Once the window is created, other views can be added to it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/image-20190318134431322.png&quot; alt=&quot;image-20190318134431322&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;views-and-frames&quot;&gt;Views and Frames&lt;/h3&gt;

&lt;p&gt;When the application is launched, the view for the initial view controller is added to the root-level window. This view controller is represented by the ViewController class defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController.swift&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;creating-a-view-programmatically&quot;&gt;Creating a view programmatically.&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;squareView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;someOtherView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;squareView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;u&gt;Note&lt;/u&gt;:&lt;/strong&gt; that these values are in points, not pixels. If the values were in pixels, then they would not be consistent across displays of different resolutions (i.e., Retina versus non-Retina). A point is a relative unit of a measure; it will be a different number of pixels depending on how many pixels are in the display. Sizes, positions, lines, and curves are always described in points to allow for differences in display resolution.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;frame-vs-bounds&quot;&gt;Frame Vs. Bounds&lt;/h3&gt;

&lt;p&gt;Frame boundaries are the boundaries of the view, from where to where the view is displayed. Bounds, on the other hand are the limits of the content of the view. Think about scrolling in a maps view.&lt;/p&gt;

&lt;p&gt;The alignment rectangle is very similar to the frame. In fact, these two rectangles are often the same. Whereas the frame encompasses the entire view, the alignment rectangle only encompasses the content that you wish to use for alignment purposes.&lt;/p&gt;

&lt;p&gt;You cannot define a view’s alignment rectangle directly. You do not have enough information (like screen size) to do that. Instead, you provide a set of constraints. Taken together, these constraints enable the system to determine the layout attributes, and thus the alignment rectangle, for each view in the view hierarchy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/image-20190318134658420.png&quot; alt=&quot;image-20190318134658420&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;what-other-information-does-a-view-have&quot;&gt;What other information does a view have?&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Hierarchy (Painter's method):&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;superview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;insertSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Location of view:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGRect&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Display properties:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;backgroundColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;auto-layout&quot;&gt;Auto Layout&lt;/h3&gt;

&lt;p&gt;Auto Layout is a crucial technology for every iOS developer. It helps you create flexible layouts that work across a range of devices and interface sizes. It also takes a lot of practice to master.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/image-20190318135555143.png&quot; alt=&quot;image-20190318135555143&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;constraints-menu&quot;&gt;Constraints Menu&lt;/h3&gt;

&lt;p&gt;In addition to using cntrl+drag to create relative positioning between 2 views, we also define constraints to the view.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/image-20190318160506008.png&quot; alt=&quot;image-20190318160506008&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/image-20190318163122326.png&quot; alt=&quot;image-20190318163122326&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If a view does not have any siblings in the specified direction, then the nearest neighbor is its superview, also known as its container.&lt;/p&gt;

&lt;h3 id=&quot;align-menu&quot;&gt;Align Menu&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/image-20190318160547006.png&quot; alt=&quot;image-20190318160547006&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;view-controller&quot;&gt;View Controller&lt;/h2&gt;

&lt;p&gt;A view controller is an instance of a subclass of UIViewController. A view controller manages a view hierarchy. It is responsible for creating view objects that make up the hierarchy and for handling events associated with the view objects in its hierarchy.&lt;/p&gt;

&lt;p&gt;Just think of a view controller as one view hierarchy. When an app switches between view controllers, it just means that it is switching between two different view heirarchies.&lt;/p&gt;

&lt;h3 id=&quot;the-view-of-a-view-controller&quot;&gt;The View of a View Controller&lt;/h3&gt;

&lt;p&gt;As subclasses of UIViewController, all view controllers inherit an important property:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var view: UIView!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This property points to a UIView instance that is the root of the view controller’s view hierarchy. When the root  view of a view controller is added as a subview of the window, the view controller’s entire view hierarchy is added .&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/image-20190319112500365.png&quot; alt=&quot;image-20190319112500365&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A view controller’s view is not created until it needs to appear on the screen. This optimization is called lazy loading, and it can conserve memory and improve performance.&lt;/p&gt;

&lt;p&gt;There are two ways that a view controller can create its view hierarchy:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;in Interface Builder, by using an interface file such as a storyboard&lt;/li&gt;
  &lt;li&gt;programmatically, by overriding the UIViewController method loadView()&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;u&gt;NOTE&lt;/u&gt;&lt;/strong&gt;: Although a storyboard can have many view controllers, each storyboard file has exactly one &lt;strong&gt;initial view controller&lt;/strong&gt;. The initial view controller acts as an entry point into the storyboard.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;how-does-uiwindow-handle-the-view-controllers&quot;&gt;How does UIWindow handle the view controllers?&lt;/h3&gt;

&lt;p&gt;UIWindow has a rootViewController property. When a view controller is set as the window’s rootViewController, that view controller’s view gets added to the window’s view hierarchy. When this property is set, any existing subviews on the window are removed and the view controller’s view gets added to the window with the appropriate Auto Layout constraints.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Each application has one main interface, a reference to a storyboard. When the application launches, the initial view controller for the main interface gets set as the rootViewController of the window.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The main interface for an application is set in the project settings. In the General tab of the project settings, find the Deployment Info section. Here you will see the Main Interface setting. If it is set to Main, for example, it corresponds to Main.storyboard.&lt;/p&gt;

&lt;h3 id=&quot;tab-bar-controllers&quot;&gt;Tab Bar Controllers&lt;/h3&gt;

&lt;p&gt;UITabBarController keeps an array of view controllers. It also maintains a tab bar at the bottom of the screen with a tab for each view controller in its array. Tapping on a tab results in the presentation of the view of the view controller associated with that tab.&lt;/p&gt;

&lt;p&gt;UITabBarController is itself a subclass of UIViewController. A UITabBarController’s view is a UIView with two
primary subviews: the tab bar and the view of the selected view controller&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/image-20190319114632381.png&quot; alt=&quot;image-20190319114632381&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;tab-bar-items&quot;&gt;Tab bar items&lt;/h3&gt;

&lt;p&gt;Each tab on the tab bar can display a title and an image, and each view controller maintains a tabBarItem property for this purpose. When a view controller is contained by a UITabBarController, its tab bar item appears in the tab bar.&lt;/p&gt;

&lt;p&gt;The order of the tabs is determined by the order of the view controllers within the tab bar controller’s viewControllers array.&lt;/p&gt;

&lt;h3 id=&quot;accessing-subviews&quot;&gt;Accessing subviews&lt;/h3&gt;

&lt;p&gt;Often, you will want to do some extra initialization or configuration of subviews defined in Interface Builder before they appear to the user. So where can you access a subview? There are two main options, depending on what you need to do. The first option is the &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad()&lt;/code&gt; method. This method
 is called after the view controller’s interface file is loaded, at which point all of the view controller’s outlets will reference the appropriate objects. The second option is another UIViewController method, &lt;code class=&quot;highlighter-rouge&quot;&gt;viewWillAppear&lt;/code&gt;. This method is called just before a view controller’s view is added to the window.&lt;/p&gt;

&lt;p&gt;Which should you choose? Override viewDidLoad() if the configuration only needs to be done once during the run of the app. Override &lt;code class=&quot;highlighter-rouge&quot;&gt;viewWillAppear&lt;/code&gt; if you need the configuration to be done each time the view controller’s view appears onscreen.&lt;/p&gt;

&lt;h3 id=&quot;interacting-with-view-controllers-and-their-views&quot;&gt;Interacting with View Controllers and Their Views&lt;/h3&gt;

&lt;p&gt;Let’s look at some methods that are called during the lifecycle of a view controller and its view. Some of these methods you have already seen, and some are new.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;init(coder:)&lt;/strong&gt; is the initializer for UIViewController instances created from a storyboard.
 When a view controller instance is created from a storyboard, its init(coder:) gets called once.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;init(nibName:bundle:)&lt;/strong&gt; is the designated initializer for UIViewController.&lt;/p&gt;

    &lt;p&gt;When a view controller instance is created without the use of a storyboard, its init(nibName:bundle:) gets called once. Note that in some apps, you may end up creating several instances of the same view controller class. This method will get called once on each view controller as it is created.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;loadView()&lt;/strong&gt; is overridden to create a view controller’s view programmatically.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;viewDidLoad()&lt;/strong&gt; is overridden to configure views created by loading an interface file. This method gets called after the view of a view controller is created.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;viewWillAppear(_:)&lt;/strong&gt; is overridden to configure views created by loading an interface file.&lt;/p&gt;

    &lt;p&gt;This method and &lt;strong&gt;viewDidAppear(&lt;em&gt;:)** get called every time your view controller is moved onscreen. **viewWillDisappear(&lt;/em&gt;:)&lt;/strong&gt; and &lt;strong&gt;viewDidDisappear(_:)&lt;/strong&gt; get called every time your view controller is moved offscreen.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;programmatic-view-composition&quot;&gt;Programmatic View Composition&lt;/h3&gt;

&lt;p&gt;UIView has an instance method &lt;strong&gt;addSubview(_:)&lt;/strong&gt; which let’s you add a child view to its subviews collec4on. Other useful methods:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;bringSubview(toFront:)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;sendSubview(toBack:)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;removeFromSuperview()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;u&gt;NOTE&lt;/u&gt;&lt;/strong&gt;: When using bringSubview and sendSubview, remember that the view to be brought back or sent forward is also already loaded (no lazy loading here).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;programmatic-constraints&quot;&gt;Programmatic Constraints&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;u&gt;Note&lt;/u&gt;&lt;/strong&gt;:&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;
      &lt;p&gt;Constraints need to be added to the most recent common ancestor for the views associated with the constraint.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Creating and activating constraints are two different steps.&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;

&lt;/blockquote&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;leadingAlignConstraint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;view1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leadingAnchor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;constraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leadingAnchor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;leadingAlignConstraint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isActive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/image-20190319123127198.png&quot; alt=&quot;image-20190319123127198&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;layout-margin-guides&quot;&gt;Layout Margin Guides&lt;/h3&gt;

&lt;p&gt;Every view has a layoutMargins property that denotes the default spacing to use when laying out content. This property is an instance of UIEdgeInsets, which you can think of as a type of frame. When adding constraints, you will use the layoutMarginsGuide, which exposes anchors that are tied to the edges of the layoutMargins.&lt;/p&gt;

&lt;p&gt;The primary advantage of using the margins is that the margins can change depending on the device type (iPad or iPhone) as well as the size of the device. Using the margins will give you content that looks good on any device.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;margins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layoutMarginsGuide&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;constraint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;someView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leadingAnchor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;constraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;margins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leadingAnchor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;constraint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isActive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;layout-safe-area-guides&quot;&gt;Layout Safe Area Guides&lt;/h3&gt;

&lt;p&gt;View instances have a property to assist with layout content: the safeAreaLayoutGuide. This layout guide represents the rectangular extent to which the a view will be visible on screen. Using safeAreaLayoutGuide will allow your content to not underlap the status bar at the top of the screen or the tab bar at the bottom of the screen.&lt;/p&gt;

&lt;p&gt;Layout guides like safeAreaLayoutGuide expose anchors that you can use to add constraints, such as : topAnchor, bottomAnchor, heightAnchor and widthAnchor. Because you want the segmented control to be under the status bar and sensor housing, you will constrain the top anchor of the safe area layout guide to the top anchor of the segmented control.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;constraint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;someView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topAnchor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;constraint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;safeAreaLayoutGuide&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topAnchor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;constraint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isActive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;controls&quot;&gt;Controls&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// this is similar to what we do in the interface builder by dragging and dropping.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#selector(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;buttonTapped(_:)&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;touchUpInside&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;buttonTapped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// do something&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;control-events&quot;&gt;Control Events&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/image-20190319124023164.png&quot; alt=&quot;image-20190319124023164&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;q-when-exactly-is-the-loadview-method-called&quot;&gt;Q. When exactly is the loadview() method called?&lt;/h4&gt;

&lt;p&gt;When a view controller is created, its view property is nil. If a view controller is asked for its view and its view is nil, then the loadView() method is called.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;u&gt;NOTE&lt;/u&gt;&lt;/strong&gt;:  &lt;strong&gt;Apple recommends that you create and constrain your views in Interface Builder whenever possible.&lt;/strong&gt; However, if your views are created in code, then you will need to constrain them programmatically.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;u&gt;NOTE&lt;/u&gt;&lt;/strong&gt;: Every view has an autoresizing mask. By default, iOS creates constraints that match the autoresizing mask and adds them to the view. These translated constraints will often conflict with explicit constraints in the layout and cause an unsatisfiable constraints problem. The fix is to turn off this default translation by setting the property translatesAutoresizingMaskIntoConstraints to false.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;text-input--delegation&quot;&gt;Text Input &amp;amp; Delegation&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Delegation&lt;/strong&gt; is an object-oriented approach to callbacks. A callback is a function that is supplied in advance of an event and is called every time the event occurs. Some objects need to make a callback for more than one event. For instance, the text field needs to “callback” when the user enters text as well as when the user presses the Return key.&lt;/p&gt;

&lt;p&gt;However, there is no built-in way for two (or more) callback functions to coordinate and share information. This is the problem addressed by delegation – you supply a single delegate to receive all of the event-related callbacks for a particular object. This delegate object can then store, manipulate, act on, and relay the information from the callbacks as it sees fit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/image-20190319142000565.png&quot; alt=&quot;image-20190319142000565&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;textField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Our controller&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// In our controller&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;textFieldShouldReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;textField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// dismisses the keyboard and gives up the first responder status&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;textField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resignFirstResponder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// whether to perform the default action or not? default action is nothing  in this particular case.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/image-20190319142952879.png&quot; alt=&quot;image-20190319142952879&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;conforming-to-this-protocol-its-just-like-an-interface-in-java&quot;&gt;Conforming to this Protocol (it’s just like an interface in Java)&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITextFieldDelegate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;u&gt;NOTE&lt;/u&gt;&lt;/strong&gt;: When the text field is tapped, the method becomeFirstResponder() is called on it. This is the method
that, among other things, causes the keyboard to appear. To dismiss the keyboard, you call the method
resignFirstResponder() on the text field.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;u&gt;NOTE&lt;/u&gt;&lt;/strong&gt;: A property observer, is a chunk of code that gets called whenever a property’s value changes. A property observer is declared using curly braces immediately after the property declaration. Inside the braces, you declare your observer using either willSet or didSet, depending on whether you want to be notified immediately before or immediately after the property value changes, respectively. Note that property observers are not triggered when the property value is changed from within an initializer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;internalization-and-localization&quot;&gt;Internalization and Localization&lt;/h2&gt;

&lt;p&gt;Internationalization is making sure your native cultural information (like language, currency, date format, number format, etc.) is not hardcoded into your application. Localization is the process of providing the appropriate data in your application based on the user’s Language and Region Format settings.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;u&gt;NOTE&lt;/u&gt;&lt;/strong&gt;: Locale knows everything about local customs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/image-20190319151559307.png&quot; alt=&quot;image-20190319151559307&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/image-20190319151704807.png&quot; alt=&quot;image-20190319151704807&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;some-formatters-to-keep-in-mind&quot;&gt;Some formatters to keep in Mind&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Date Formatters&lt;/li&gt;
  &lt;li&gt;NumberFormatter&lt;/li&gt;
  &lt;li&gt;DateComponentsFormatter&lt;/li&gt;
  &lt;li&gt;DateIntervalFormatter&lt;/li&gt;
  &lt;li&gt;MassFormatter&lt;/li&gt;
  &lt;li&gt;EnergyFormatter&lt;/li&gt;
  &lt;li&gt;LengthFormatter&lt;/li&gt;
  &lt;li&gt;Address Formatter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When internationalizing, you ask the instance of Locale questions. But the Locale only has a few region-specific variables. This is where localization – creating application-specific substitutions for different region and language settings – comes into play. Localization usually involves either generating multiple copies of resources (like images, sounds, and interface files) for different regions and languages or creating and accessing strings tables to translate text into different languages.&lt;/p&gt;

&lt;p&gt;When you build a target in Xcode, an application bundle is created. All of the resources that you added to the target in Xcode are copied into this bundle along with the executable itself. This bundle is represented at runtime by an instance of Bundle known as the main bundle. Many classes work with the Bundle to load resources.&lt;/p&gt;

&lt;p&gt;Localizing a resource puts another copy of the resource in the application bundle. These resources are organized into language-specific directories, known as lproj directories. Each one of these directories is the name of the localization suffixed with lproj. For example, the American English localization is en_US, where en is the English language code and US is the United States of America region code, so the directory for American English resources is en_US.lproj. (The region can be omitted if you do not need to make regional distinctions in your resource files.) These language and region codes are standard on all platforms, not just iOS.&lt;/p&gt;

&lt;p&gt;When a bundle is asked for the path of a resource file, it first looks at the root level of the bundle for a file of that name. If it does not find one, it looks at the locale and language settings of the device, finds the appropriate lproj directory, and looks for the file there. Thus, just by localizing resource files, your application will automatically load the correct file.&lt;/p&gt;

&lt;p&gt;One option for localizing resource files is to create separate storyboard files and manually edit each string in each file. However, this approach does not scale well if you are planning multiple localizations. What happens when you add a new label or button to your localized storyboard? You have to add this view to the storyboard for every language. Not fun.&lt;/p&gt;

&lt;p&gt;To simplify the process of localizing interface files, Xcode has a feature called base internationalization. Base internationalization creates the Base.lproj directory, which contains the main interface files. Localizing individual interface files can then be done by creating just the Localizable.strings files. It is still possible to create the full interface files, in case localization cannot be done by changing strings alone.&lt;/p&gt;

&lt;h3 id=&quot;nslocalizedstring-and-strings-tables&quot;&gt;NSLocalizedString and strings tables&lt;/h3&gt;

&lt;p&gt;In many places in your applications, you create String instances dynamically or display string literals to the user. To display translated versions of these strings, you must create a strings table. A strings table is a file containing a list of key-value pairs for all of the strings that your application uses and their associated translations. It is a resource file that you add to your application, but you do not need to do a lot of work to get data from it.&lt;/p&gt;

&lt;h2 id=&quot;table-views&quot;&gt;Table Views&lt;/h2&gt;

&lt;p&gt;As a view object, a UITableView does not handle application logic or data. When using a UITableView, you must consider what else is necessary to get the table working in your application:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A UITableView typically needs a view controller to handle its appearance on the screen.&lt;/li&gt;
  &lt;li&gt;A UITableView needs a data source. A UITableView asks its data source for the number of rows to display, the data to be shown in those rows, and other tidbits that make a UITableView a useful UI. Without a data source, a table view is just an empty container. The dataSource for a UITableView can be any type of object as long as it conforms to the UITableViewDataSource protocol.&lt;/li&gt;
  &lt;li&gt;A UITableView typically needs a delegate that can inform other objects of events involving the UITableView. The delegate can be any object as long as it conforms to the UITableViewDelegate protocol.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An instance of the class UITableViewController can fill all three roles: view controller, data source, and delegate.&lt;/p&gt;

&lt;p&gt;UITableViewController is a subclass of UIViewController and therefore has a view. A UITableViewController’s view is always an instance of UITableView, and the UITableViewController handles the preparation and presentation of the UITableView.&lt;/p&gt;

&lt;p&gt;When a UITableViewController creates its view, the dataSource and delegate properties of the UITableView are automatically set to point at the UITableViewController.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/image-20190320102625485.png&quot; alt=&quot;image-20190320102625485&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;custom-initializers-for-classes&quot;&gt;Custom Initializers for classes&lt;/h3&gt;

&lt;p&gt;Classes can have two kinds of initializers: &lt;strong&gt;designated initializers and convenience initializers.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A designated initializer&lt;/strong&gt; is a primary initializer for the class. Every class has at least one designated initializer. A designated initializer ensures that all properties in the class have a value. Once it ensures that, a designated initializer calls a designated initializer on its superclass (if it has one). When you implement your own custom initializer, you lose the free initializer – init() – that classes have. The free initializer is useful when all of your class’s properties have default values and you do not need to do additional work to create the new instance.&lt;/p&gt;

&lt;p&gt;Every class must have at least one designated initializer, but &lt;strong&gt;convenience initializers&lt;/strong&gt; are optional. You can think of convenience initializers as helpers. A convenience initializer always calls another initializer on the same class. Convenience initializers are indicated by the convenience keyword before the initializer name.&lt;/p&gt;

&lt;p&gt;Convenience initializers must call another initializer on the same type, whereas designated initializers must call a designated initializer on its superclass.&lt;/p&gt;

&lt;h3 id=&quot;dependency-inversion-principle--vimp&quot;&gt;Dependency Inversion Principle —&amp;gt; V.IMP&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The essential goal of this principle is to decouple objects in an application by inverting certain dependencies between them. This results in more robust and maintainable code.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The dependency inversion principle states that:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;High-level objects should not depend on low-level objects. Both should depend on abstractions.&lt;/li&gt;
  &lt;li&gt;Abstractions should not depend on details. Details should depend on abstractions.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;Example&lt;/u&gt;&lt;/strong&gt; - The abstraction required by the dependency inversion principle in LootLogger is the concept of a “store.” A store is a lower-level object that retrieves and saves Item instances through details that are only known to that class. ItemsViewController is a higher-level object that only knows that it will be provided with a utility object (the store) from which it can obtain a list of Item instances and to which it can pass new or updated Item instances to be stored persistently. This results in a decoupling because ItemsViewController is not dependent on ItemStore. In fact, as long as the store abstraction is respected, ItemStore could be replaced by another object that fetches Item instances differently (such as by using a web service) without any changes to ItemsViewController.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A common pattern used when implementing the dependency inversion principle is &lt;strong&gt;dependency injection&lt;/strong&gt;. In its simplest form, higher-level objects do not assume which lower-level objects they need to use. Instead, those are passed to them through an initializer or property.&lt;/li&gt;
  &lt;li&gt;In our implementation of ItemsViewController, we used injection through a property to give it a store.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;data-source-methods&quot;&gt;Data Source Methods&lt;/h3&gt;

&lt;p&gt;When a UITableView wants to know what to display, it calls methods from the set of methods declared in the UITableViewDataSource protocol.&lt;/p&gt;

&lt;h3 id=&quot;uitableviewcells&quot;&gt;UITableViewCells&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Each row of a table view is a view. These views are instances of UITableViewCell.&lt;/li&gt;
  &lt;li&gt;A cell itself has one subview – its contentView. The contentView is the superview for the content of the cell. The cell may also have an accessory view.&lt;/li&gt;
  &lt;li&gt;The accessory view shows an action-oriented icon, such as a checkmark, a disclosure icon, or an information button. These icons are accessed through predefined constants for the appearance of the accessory view. The default is UITableViewCellAccessoryType.none.&lt;/li&gt;
  &lt;li&gt;The real meat of a UITableViewCell is the contentView, which has three subviews of its own. Two of those subviews are UILabel instances that are properties of UITableViewCell named textLabel and detailTextLabel. The third subview is a UIImageView called imageView. In this chapter, you will use textLabel and detailTextLabel.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/image-20190320110245577.png&quot; alt=&quot;image-20190320110245577&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;reusing-uitableviewcells&quot;&gt;Reusing UITableViewCells&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;iOS devices have a limited amount of memory. If you were displaying a list with thousands of entries in a UITableView, you would have thousands of instances of UITableViewCell. Most of these cells would take up memory needlessly. After all, if the user cannot see a cell onscreen, then there is no reason for that cell to have a claim on memory.&lt;/li&gt;
  &lt;li&gt;To conserve memory and improve performance, you can reuse table view cells. When the user scrolls the table, some cells move offscreen. Offscreen cells are put into a pool of cells available for reuse. Then, instead of creating a brand new cell for every request, the data source first checks the pool. If there is an unused cell, the data source configures it with new data and returns it to the table view.&lt;/li&gt;
  &lt;li&gt;There is one problem to be aware of: Sometimes a UITableView has different types of cells. Occasionally, you subclass UITableViewCell to create a special look or behavior. However, different subclasses floating around the pool of reusable cells create the possibility of getting back a cell of the wrong type. You must be sure of the type of the cell returned so that you can be sure of what properties and methods it has.&lt;/li&gt;
  &lt;li&gt;Note that you do not care about getting any specific cell out of the pool because you are going to change the cell content anyway. What you need is a cell of a specific type. The good news is that every cell has a reuseIdentifier property of type String. When a data source asks the table view for a reusable cell, it passes a string and says, “I need a cell with this reuse identifier.” By convention, the reuse identifier is typically the name of the cell class.&lt;/li&gt;
  &lt;li&gt;To reuse cells, you need to register either a prototype cell or a class with the table view for a specific reuse identifier. The reuse identifier is an arbitrary string.&lt;/li&gt;
  &lt;li&gt;The method &lt;code class=&quot;highlighter-rouge&quot;&gt;dequeueReusableCell(withIdentifier:for:)&lt;/code&gt; will check the pool, or queue, of cells to see whether a cell with the correct reuse identifier already exists. If so, it will “dequeue” that cell. &lt;strong&gt;If there is not an existing cell, a new cell will be created and returned.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;editing-table-views&quot;&gt;Editing Table Views&lt;/h3&gt;

&lt;p&gt;One of the great feature of table views is their built-in support for editing. This includes inserting new rows, deleting existing rows, and rearranging rows. In this section, you will add in support for all three of those features to LootLogger.&lt;/p&gt;

&lt;h4 id=&quot;editing-mode&quot;&gt;Editing Mode&lt;/h4&gt;

&lt;p&gt;UITableView has an editing property, and when this property is set to true, the UITableView enters editing mode. Once the table view is in editing mode, the rows of the table can be manipulated by the user. Depending on how the table view is configured, the user can change the order of the rows, add rows, or remove rows. (Editing mode does not allow the user to edit the content of a row.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/image-20190320112411286.png&quot; alt=&quot;image-20190320112411286&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;adding-and-deleting-items&quot;&gt;Adding and Deleting Items&lt;/h5&gt;

&lt;p&gt;Remember that the role of a view object is to present model objects to the user; updating views without updating the model objects is not very useful.&lt;/p&gt;

&lt;h3 id=&quot;design-patterns&quot;&gt;Design Patterns&lt;/h3&gt;

&lt;p&gt;The consistent use of design patterns throughout the development process reduces the mental overhead in solving a problem so you can create complex applications more easily and rapidly. Here are some of the design patterns that Apple is very consistent with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Delegation: One object delegates certain responsibilities to another object. We used delegation with the UITextField to be informed when the contents of the text field change.&lt;/li&gt;
  &lt;li&gt;Data source: A data source is similar to a delegate, but instead of reacting to another object, a data source is responsible for providing data to another object when requested. We used the data source pattern with table views: Each table view has a data source that is responsible for, at a minimum, telling the table view how many rows to display and which cell it should display at each index path.&lt;/li&gt;
  &lt;li&gt;Model-View-Controller: Each object in your applications fulfills one of three roles. Model objects are the data. Views display the UI. Controllers provide the glue that ties the models and views together.&lt;/li&gt;
  &lt;li&gt;Target-action pairs: One object calls a method on another object when a specific event occurs. The target is the object that has a method called on it, and the action is the method being called. For example, we used target- action pairs with buttons: When a touch event occurs, a method will be called on another object (often a view controller).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;subclassing-uitableviewcell&quot;&gt;Subclassing UITableViewCell&lt;/h2&gt;

&lt;p&gt;A UITableView displays a list of UITableViewCell objects. For many applications, the basic cell with its textLabel, detailTextLabel, and imageView is sufficient. However, when you need a cell with more detail or a different layout, you subclass UITableViewCell.&lt;/p&gt;

&lt;h3 id=&quot;customizing-the-cell&quot;&gt;Customizing the Cell&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;You customize the appearance of UITableViewCell subclasses by adding subviews to its contentView. Adding subviews to the contentView instead of directly to the cell itself is important because the cell will resize the contentView inside it at certain times.&lt;/li&gt;
  &lt;li&gt;For example, when a table view enters editing mode, the contentView resizes itself to make room for the editing controls. If you added subviews directly to the UITableViewCell, the editing controls would obscure the subviews. The cell cannot adjust its size when entering edit mode (it must remain the width of the table view), but the contentView can and does.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/image-20190320120018562.png&quot; alt=&quot;image-20190320120018562&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;dynamic-type&quot;&gt;Dynamic Type&lt;/h3&gt;

&lt;p&gt;Creating an interface that appeals to everyone can be daunting. Some people prefer more compact interfaces so they can see more information at once. Others might want to be able to easily see information at a glance, or perhaps they have poor eyesight. In short: People have different needs. Good developers strive to make apps that meet those needs.&lt;/p&gt;

&lt;p&gt;Dynamic Type is a technology that helps realize this goal by providing specifically designed text styles that are optimized for legibility. Users can select one of seven preferred text sizes from within Apple’s Settings application (plus a few additional larger sizes from within the Accessibility section), and apps that support Dynamic Type will have their fonts scaled appropriately.&lt;/p&gt;

&lt;p&gt;The Dynamic Type system is centered around text styles. When a font is requested for a given text style, the system will consider the user’s preferred text size in association with the text style to return an appropriately configured font.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/image-20190320123003161.png&quot; alt=&quot;image-20190320123003161&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;responding-to-user-changes&quot;&gt;Responding to user changes&lt;/h3&gt;

&lt;p&gt;When the user changes the preferred text size and returns to the application, the table view will get reloaded. Unfortunately, the labels will not know about the new preferred text size. To fix this, you need to have the labels automatically adjust to content size changes.&lt;/p&gt;

&lt;p&gt;Open Main.storyboard and select all three ItemCell labels. Open the attributes inspector, and check the box for &lt;strong&gt;Automatically Adjusts Font&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;bad-cell-constraints&quot;&gt;Bad Cell Constraints&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/images/image-20190320114956174.png&quot; alt=&quot;image-20190320114956174&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since there are are no vertical constraints, the label will be centered with height 0 and would thus, be invisible.&lt;/p&gt;

&lt;h4 id=&quot;better-cell-constraints&quot;&gt;Better Cell constraints&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/images/image-20190320115129303.png&quot; alt=&quot;image-20190320115129303&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;stack-views&quot;&gt;Stack Views&lt;/h2&gt;

&lt;p&gt;Auto Layout can be used to create flexible interfaces that scale across device types and sizes. Auto Layout is a very powerful technology, but with that power comes complexity. Laying out an interface well often needs a lot of constraints, and it can be difficult to create dynamic interfaces due to the need to constantly add and remove constraints.&lt;/p&gt;

&lt;p&gt;Interfaces that have a linear layout are great candidates for using a stack view. A stack view is an instance of
UIStackView that allows you to create a vertical or horizontal layout that is easy to lay out and manages most of the constraints that you would typically have to manage yourself. Perhaps best of all, you are able to nest stack views within other stack views, which allows you to create truly amazing interfaces in a fraction of the time.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Nesting stack views is very common when creating more complex layouts&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;A stack view’s “arranged views” are a subset of its “subviews”&lt;/strong&gt;  –&amp;gt; because views may be hidden.&lt;/li&gt;
  &lt;li&gt;Can dynamically add/remove views in a stack view&lt;/li&gt;
  &lt;li&gt;Can dynamically change any of the stack views properties&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;properties-of-stackview&quot;&gt;Properties of StackView&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/image-20190320145501757.png&quot; alt=&quot;image-20190320145501757&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/image-20190320145526390.png&quot; alt=&quot;image-20190320145526390&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;hiding-views-inside-stackview&quot;&gt;Hiding Views inside Stackview&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@IBAction&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hideViewTapped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;withDuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;superview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isHidden&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;implicit-constraints&quot;&gt;Implicit Constraints&lt;/h3&gt;

&lt;p&gt;A view has one of these priorities for each axis:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;horizontal content hugging priority&lt;/li&gt;
  &lt;li&gt;vertical content hugging priority&lt;/li&gt;
  &lt;li&gt;horizontal content compression resistance priority&lt;/li&gt;
  &lt;li&gt;vertical content compression resistance priority&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;content-hugging-priorities&quot;&gt;Content hugging priorities&lt;/h4&gt;

&lt;p&gt;The content hugging priority is like a rubber band that is placed around a view. The rubber band makes the view not want to be bigger than its intrinsic content size in that dimension. Each priority is associated with a value from 0 to 1000. A value of 1000 means that a view cannot get bigger than its intrinsic content size on that dimension.&lt;/p&gt;

&lt;h4 id=&quot;content-compression-resistance-priorities&quot;&gt;Content compression resistance priorities&lt;/h4&gt;

&lt;p&gt;The content compression resistance priorities determine how much a view resists getting smaller than its intrinsic content size.&lt;/p&gt;

&lt;h2 id=&quot;segues&quot;&gt;Segues&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Most iOS applications have a number of view controllers that users navigate between. Storyboards allow you to set up these interactions as segues without having to write code.&lt;/li&gt;
  &lt;li&gt;A segue moves another view controller’s view onto the screen and is represented by an instance of UIStoryboardSegue.&lt;/li&gt;
  &lt;li&gt;Each segue has a style, an action item, and an identifier.&lt;/li&gt;
  &lt;li&gt;The style of a segue determines how the view controller will be presented.&lt;/li&gt;
  &lt;li&gt;The action item is the view object in the storyboard file that triggers the segue, like a button, a table view cell, or some other UIControl.&lt;/li&gt;
  &lt;li&gt;The identifier is used to programmatically access the segue. This is useful when you want to trigger a segue that does not come from an action item, like a shake or some other interface element that cannot be set up in the storyboard file.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;passing-data-around&quot;&gt;Passing Data Around&lt;/h3&gt;

&lt;p&gt;Whenever a segue is triggered, the prepare(for:sender:) method is called on the view controller initiating the segue. This method has two arguments: the UIStoryboardSegue, which gives you information about which segue is happening, and the sender, which is the object that triggered the segue (a UITableViewCell or a UIButton, for example).&lt;/p&gt;

&lt;p&gt;The UIStoryboardSegue gives you three pieces of information: the source view controller (where the segue originates), the destination view controller (where the segue ends), and the identifier of the segue. The identifier lets you differentiate segues. Let’s give the segue a useful identifier.&lt;/p&gt;

&lt;h2 id=&quot;uinavigationcontroller&quot;&gt;UINavigationController&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A UINavigationController maintains an array of view controllers presenting related information in a stack. When a UIViewController is on top of the stack, its view is visible.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When you initialize an instance of UINavigationController, you give it a UIViewController. This UIViewController is added to the navigation controller’s viewControllers array and becomes the navigation controller’s root view controller. The root view controller is always on the bottom of the stack.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;&lt;strong&gt;&lt;u&gt;Note&lt;/u&gt;&lt;/strong&gt;: While this view controller is referred to as the navigation controller’s “root view controller,” &lt;strong&gt;UINavigationController does not have a rootViewController property&lt;/strong&gt;.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;More view controllers can be pushed on top of theUINavigationController’s stack while the application is running. These view controllers are added to the end of the viewControllers array that corresponds to the top of the stack. UINavigationController’s &lt;strong&gt;topViewController&lt;/strong&gt; property keeps a reference to the view controller at the top of the stack.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When a view controller is pushed onto the stack, its view slides onscreen from the right. When the stack is popped (i.e., the last item is removed), the top view controller is removed from the stack and its view slides off to the right, exposing the view of the next view controller on the stack, which becomes the top view controller.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The view of the topViewController is what the user sees.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;UINavigationController is a subclass of UIViewController, so it has a view of its own. Its view always has two subviews: a UINavigationBar and the view of topViewController&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/image-20190320151348721.png&quot; alt=&quot;image-20190320151348721&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;appearing-and-disappearing-views&quot;&gt;Appearing and Disappearing Views&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Whenever a UINavigationController is about to swap views, it calls two methods: viewWillDisappear(&lt;em&gt;:) and viewWillAppear(&lt;/em&gt;:). The UIViewController that is about to be popped off the stack has viewWillDisappear(&lt;em&gt;:) called. The UIViewController that will then be on top of the stack has viewWillAppear(&lt;/em&gt;:) called on it.&lt;/li&gt;
  &lt;li&gt;To hold on to changes in the data, when a DetailViewController is popped off the stack you will set the
 properties of its item to the contents of the text fields. When implementing these methods for views appearing and disappearing, &lt;strong&gt;it is important to call the superclass’s implementation – it might have some work to do and needs to be given the chance to do it.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;first-responder-status&quot;&gt;First Responder Status&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;For the shake and keyboard events, for example, there is no event location within your view hierarchy to determine which view will receive the event, so another mechanism must be used. This mechanism is the &lt;strong&gt;first responder status&lt;/strong&gt;. Many views and controls can be a first responder within your view hierarchy – but only one at a time. Think of it as a flag that can be passed among views. Whichever view holds the flag will receive the shake or keyboard event.&lt;/li&gt;
  &lt;li&gt;Instances of UITextField and UITextView have an uncommon response to touch events. When touched, a text field or a text view becomes the first responder, which in turn triggers the system to put the keyboard onscreen and send the keyboard events to the text field or view. The keyboard and the text field or view have no direct connection, but they work together through the first responder status.&lt;/li&gt;
  &lt;li&gt;This is a neat way to ensure that the keyboard input is delivered to the correct text field. The concept of a first responder is part of the broader topic of event handling in Cocoa Touch programming that includes the UIResponder class and the responder chain. &lt;em&gt;&lt;u&gt;You can visit Apple’s Event Handling Guide for iOS for more information.&lt;/u&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;uinavigationbar&quot;&gt;UINavigationBar&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Every UIViewController has a navigationItem property of type UINavigationItem. However, unlike
UINavigationBar, UINavigationItem is not a subclass of UIView, so it cannot appear on the screen.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Instead, the navigation item supplies the navigation bar with the content it needs to draw. When a UIViewController comes to the top of a UINavigationController’s stack, the UINavigationBar uses the UIViewController’s navigationItem to configure itself.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;By default, a UINavigationItem is empty. At the most basic level, a UINavigationItem has a simple title string. When a UIViewController is moved to the top of the navigation stack and its navigationItem has a valid string for its title property, the navigation bar will display that string.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/image-20190320160559137.png&quot; alt=&quot;image-20190320160559137&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A navigation item can hold more than just a title string. There are three customizable areas for each UINavigationItem: a leftBarButtonItem, a rightBarButtonItem, and a titleView. The left and right bar button items are references to instances of UIBarButtonItem, which contain the information for a button that can only be displayed on a UINavigationBar or a UIToolbar.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Recall that UINavigationItem is not a subclass of UIView. Instead, UINavigationItem encapsulates information that UINavigationBar uses to configure itself. Similarly, UIBarButtonItem is not a view, but holds the information about how a single button on the UINavigationBar should be displayed. (A UIToolbar also uses instances of UIBarButtonItem to configure itself.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The third customizable area of a UINavigationItem is its titleView. You can either use a basic string as the title or have a subclass of UIView sit in the center of the navigation item. You cannot have both. If it suits the context of a specific view controller to have a custom view (like a segmented control or a text field, for example), you would set the titleView of the navigation item to that custom view. Typically, however, a title string is sufficient.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/image-20190320161206584.png&quot; alt=&quot;image-20190320161206584&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;When you initialize an instance of UINavigationController, you give it a UIViewController. This
UIViewController is added to the navigation controller’s viewControllers array and becomes the navigation controller’s root view controller. The root view controller is always on the bottom of the stack.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;&lt;strong&gt;&lt;u&gt;Note&lt;/u&gt;&lt;/strong&gt;: While this view controller is referred to as the navigation controller’s “root view controller,” &lt;strong&gt;UINavigationController does not have a rootViewController property.&lt;/strong&gt;&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;More view controllers can be pushed on top of theUINavigationController’s stack while the application is running. These view controllers are added to the end of the viewControllers array that corresponds to the top of the stack. UINavigationController’s topViewController property keeps a reference to the view controller at the top of the stack.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;saving-loading-and-error-handling&quot;&gt;Saving, Loading and Error Handling&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;u&gt;NOTE&lt;/u&gt;&lt;/strong&gt;: &lt;em&gt;Saving and loading “data” almost always means saving and loading model objects.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;To save and load model objects to and from the disk, we need to make them of type &lt;em&gt;codable&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Types whose instances need to be codable conform to the &lt;strong&gt;Encodable&lt;/strong&gt; and &lt;strong&gt;Decodable&lt;/strong&gt; protocols and implement their two required methods, &lt;strong&gt;encode(to:)&lt;/strong&gt; and &lt;strong&gt;init(from:)&lt;/strong&gt;, respectively.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decodable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;decoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Encodable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;encoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Encoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Although your types can conform to just one of these protocols, it’s common for types to conform to both. Apple has a type alias for types that conform to both protocols called Codable.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Codable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Decodable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Encodable&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;property-lists&quot;&gt;Property Lists&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A property list is a representation of some data that can be saved to disk and read back in at a later point. Property lists can represent hierarchies of data and so are a great tool for saving and loading lightweight object graphs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Under the hood, property list data can be represented by a number of formats, they are frequently represented using an XML or binary format.&lt;/li&gt;
  &lt;li&gt;Property lists can hold the following types: Array, Dictionary, String, Data, Date, Int, Float, and Bool. As long as a given type is composed of those types, or a hierarchy of those types, then it can be represented as a property list.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;saveChanges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;encoder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PropertyListEncoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// You will have an error on the next line, for not catching errors.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;error-handling&quot;&gt;Error Handling&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Optionals provide a simple way to represent failure when you do not care about the reason for failure. When you need to know why something failed, an optional will not provide enough information.&lt;/li&gt;
  &lt;li&gt;If a method could generate an error, its method signature needs to indicate this using the throws keyword. Error throwing and exception hanndling is ‘opt-in’ in Swift.&lt;/li&gt;
  &lt;li&gt;The throws keyword indicates that this method could throw an error. (If you are familiar with throwing exception in other languages, Swift’s error handling is not the same as throwing exception.)&lt;/li&gt;
  &lt;li&gt;By using this keyword, the compiler ensures that anyone who uses this method knows that this method can throw an error – and, more importantly, that the caller also handles any potential errors.&lt;/li&gt;
  &lt;li&gt;To call a method that can throw, you use a do-catch statement. Within the do block, you annotate any methods that might throw an error using the try keyword to reinforce the idea that the call might fail.&lt;/li&gt;
  &lt;li&gt;If a method does throw an error, then the program immediately exits the do block; no further code in the do block is executed. At that point, the error is passed to the catch block for it to be handled in some way.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deleteImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;imageURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fileManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FileManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// need try for every statement that can fail&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;removeItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// this method might throw an error&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error removing image: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;application-sandbox&quot;&gt;Application Sandbox&lt;/h3&gt;

&lt;p&gt;Every iOS application has its own application sandbox. An application sandbox is a directory on the filesystem that is barricaded from the rest of the filesystem. Your application must stay in its sandbox, and no other application can access its sandbox.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/image-20190321105354677.png&quot; alt=&quot;image-20190321105354677&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;constructing-a-file-url&quot;&gt;Constructing a file URL&lt;/h3&gt;

&lt;p&gt;The instances of our model objects will be saved to a single file in the Documents directory. The store will handle writing to and reading from that file. To do this, the store needs to construct a URL to this file.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Adding a URL where the items will be saved to&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;allItems&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;itemArchiveURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;documentsDirectories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;FileManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;documentDirectory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userDomainMask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;documentDirectory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;documentsDirectories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;documentDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;appendingPathComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;items.plist&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The method urls(for:in:) searches the filesystem for a URL that meets the criteria given by the arguments.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In iOS, the last argument is always the same. (This method is borrowed from macOS, where there are significantly more options.) The first argument is a SearchPathDirectory enumeration that specifies the directory in the sandbox you want the URL for. For example, searching for .cachesDirectory will return the Caches directory in the application’s sandbox.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;persisting-the-items&quot;&gt;Persisting the Items&lt;/h3&gt;

&lt;p&gt;You have a place to save data on the filesystem and a model object that can be saved to the filesystem. How do you kick off the saving and loading processes, and when do you do it?&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Writing data to disk&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;saveChanges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Saving items to: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itemArchiveURL&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;encoder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PropertyListEncoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemArchiveURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; 	
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;encodingError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error encoding allItems: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encodingError&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;u&gt;NOTE&lt;/u&gt;&lt;/strong&gt;: When the user leaves the application (often by swiping up on the Home indicator), the message
applicationDidEnterBackground(_:) is sent to the AppDelegate.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;loading-the-items&quot;&gt;Loading the Items&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;contentsOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemArchiveURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;unarchiver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PropertyListDecoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unarchiver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;allItems&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error reading in saved items: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;application-states-and-transitions&quot;&gt;Application States and Transitions&lt;/h2&gt;

&lt;p&gt;When an application is not running, it is in the &lt;strong&gt;not running state&lt;/strong&gt; and it does not execute any code or have any memory reserved in RAM.&lt;/p&gt;

&lt;p&gt;After the user launches an application, it enters the &lt;strong&gt;active state&lt;/strong&gt;. When in the active state, an application’s interface is on the screen, it is accepting events, and its code is handling those events.&lt;/p&gt;

&lt;p&gt;While in the active state, an application can be temporarily interrupted by a system event like an SMS message, push notification, phone call, or alarm. An overlay will appear on top of your application to handle this event, and the application enters the &lt;strong&gt;inactive state&lt;/strong&gt;. In the inactive state, an application is visible behind the overlay and is executing code, but it is not receiving events. Applications typically spend very little time in the inactive state. You can force an active application into the inactive state by pressing the Lock button at the top of the device. The application will stay inactive until the device is unlocked.&lt;/p&gt;

&lt;p&gt;When the user swipes up on the Home indicator or switches to another application in some other way, the application enters the &lt;strong&gt;background state&lt;/strong&gt;. (Actually, it spends a brief moment in the inactive state before transitioning to the background state.) In the background state, an application’s interface is not visible or receiving events, but it can still execute code. By default, an application that enters the background state has about 10 seconds before it enters the &lt;strong&gt;suspended state&lt;/strong&gt;. Your application should not rely on this number; instead, it should save user data and release any shared resources as quickly as possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;An application in the suspended state cannot execute code.&lt;/strong&gt; You cannot see its interface, and any resources it does not need while suspended are destroyed. A suspended application is essentially flash-frozen and can be quickly thawed when the user relaunches it.&lt;/p&gt;

&lt;h3 id=&quot;application-states-flow-chart&quot;&gt;Application states flow chart&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/image-20190321120841914.png&quot; alt=&quot;image-20190321120841914&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;q-if-the-app-cannot-execute-any-code-when-in-the-suspended-state-how-do-chat-apps-receive-push-notifications&quot;&gt;Q. If the app cannot execute any code when in the suspended state, how do chat apps receive push notifications?&lt;/h3&gt;

&lt;p&gt;These push notifications are generally coming from a web service. These web services push the data to Apple, and Apple then sends us the notification. The code for sending these push nontifications is not in our app.&lt;/p&gt;

&lt;h3 id=&quot;q-how-can-we-reply-directly-from-the-notification-then&quot;&gt;Q. How can we reply directly from the notification then?&lt;/h3&gt;

&lt;p&gt;Such actions in response to notifications is possible when we have a separate small “app” bundled with our app. This small app generally has a single view controller. When we reply from the notification window, we are basically using this small app, as opposed to our main application. This app has it’s own separae application state and transitions. So, our app need not be made active for such actions to be performed.&lt;/p&gt;

&lt;h3 id=&quot;q-what-does-the-background-app-refresh-option-do&quot;&gt;Q. What does the background app refresh option do?&lt;/h3&gt;

&lt;p&gt;When background app refresh is enabled, the OS may decide to enable the app to load or refresh it’s data for a brief period of time, when the OS is not busy doing other things. So for this brief period, the app may be made active, and then back to inactive and suspended.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;u&gt;NOTE:&lt;/u&gt;&lt;/strong&gt; You can see what applications are in the background or suspended by swiping up and pausing on the Home indicator to get to the task switcher&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;An application in the suspended state will remain in that state as long as there is adequate system memory. When the OS decides memory is getting low, it will terminate suspended applications as needed. &lt;strong&gt;A suspended application gets no indication that it is about to be terminated. It is simply removed from memory. (An application may remain in the task switcher after it has been terminated, but it will have to relaunch when tapped.)&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-application-bundle&quot;&gt;The Application Bundle&lt;/h2&gt;

&lt;p&gt;When you build an iOS application project in Xcode, you create an application bundle. The application bundle contains the application executable and any resources you have bundled with your application. Resources are things like storyboard files, images, and audio files – any files that will be used at runtime. When you add a resource file to a project, Xcode is smart enough to realize that it should be bundled with your application.&lt;/p&gt;

&lt;p&gt;How can you tell which files are being bundled with your application? Select the project name from the project navigator. Check out the Build Phases pane in the project target. Everything under Copy Bundle Resources will be added to the application bundle when it is built.&lt;/p&gt;

&lt;h2 id=&quot;modals-and-popovers&quot;&gt;Modals and Popovers&lt;/h2&gt;

&lt;p&gt;For example, when adding a new contact to your phone, you are presented with a screen to fill out the contact’s details. We call this kind of presentation a modal presentation as the application is being put into a different mode where a certain set of actions become our focus.&lt;/p&gt;

&lt;p&gt;Modally presented view controllers often occupy the entire screen, but in certain contexts they might only take up a
portion of the screen. This is especially true on iPad where there is more space to work with. In either case, the user is expected to interact with the modally presented view controller before proceeding.&lt;/p&gt;

&lt;h3 id=&quot;alert-controllers&quot;&gt;Alert controllers&lt;/h3&gt;

&lt;p&gt;To allow the user to choose a photo source, you will present an alert with the possible choices. Alerts are often used to display information to the user on which they must act. When you want to display an alert, you create an instance of UIAlertController with a preferred style. The two available styles are UIAlertControllerStyle.actionSheet and UIAlertControllerStyle.alert&lt;/p&gt;

&lt;h4 id=&quot;presenting-programmatically&quot;&gt;Presenting programmatically&lt;/h4&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CalendarViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addNewEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIBarButtonItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;viewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NewCalendarEventViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;present&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;dismissing&quot;&gt;Dismissing&lt;/h4&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CalendarViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIBarButtonItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;dismiss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/image-20190321113015923.png&quot; alt=&quot;image-20190321113015923&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/image-20190321112050259.png&quot; alt=&quot;image-20190321112050259&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;completion-closure&quot;&gt;Completion closure&lt;/h4&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;dismiss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;View controller finished dismissing!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;permissions&quot;&gt;Permissions&lt;/h2&gt;

&lt;p&gt;There are a number of capabilities on iOS that require user approval before use. Here are a subset of those capabilities:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Camera and photos&lt;/li&gt;
  &lt;li&gt;Location&lt;/li&gt;
  &lt;li&gt;Microphone&lt;/li&gt;
  &lt;li&gt;HealthKit data&lt;/li&gt;
  &lt;li&gt;Calendar&lt;/li&gt;
  &lt;li&gt;Reminders&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For each of these, your application must supply a usage description that specifies the reason that your application wants to access this information. This description will be presented to the user whenever the application accesses that capability.&lt;/p&gt;

&lt;h3 id=&quot;caching-in-the-data-store&quot;&gt;Caching in the data store&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ImageStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forKey&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forKey&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deleteImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forKey&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;removeObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that the cache is associating an instance of NSString with UIImage. NSString is Objective-C’s version of
String. Due to the way NSCache is implemented (it is an Objective-C class, like most of Apple’s classes that you have been working with), it requires you to use NSString instead of String.&lt;/p&gt;

&lt;h2 id=&quot;-mark&quot;&gt;// MARK:&lt;/h2&gt;

&lt;p&gt;As your classes get longer, it can get more difficult to find a method buried in a long list of methods. A good way to organize your methods is to use // MARK: comments.&lt;/p&gt;

&lt;p&gt;Two useful // MARK: comments are the divider and the label: // This is a divider&lt;/p&gt;

&lt;p&gt;// MARK: -&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// This is a label&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// MARK: My Awesome Methods&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The divider and label can be combined:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// MARK: - View life cycle&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewWillAppear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// MARK: - Actions&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addNewItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIBarButtonItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/image-20190321154111660.png&quot; alt=&quot;image-20190321154111660&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;size-classes&quot;&gt;Size classes&lt;/h2&gt;

&lt;p&gt;The relative sizes of screens are defined in &lt;em&gt;size classes&lt;/em&gt;. A &lt;strong&gt;size class&lt;/strong&gt; represents a relative amount of screen space in a given dimension. Each dimension (width and height) can either be compact or regular, so there are four possible combinations of size classes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/image-20190321154858846.png&quot; alt=&quot;image-20190321154858846&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notice that the size classes cover both screen sizes and orientations. &lt;strong&gt;Instead of thinking about interfaces in terms of orientation or device, it is better to think in terms of size classes.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;modifying-traits-for-a-specific-size-class&quot;&gt;Modifying Traits for a Specific Size Class&lt;/h3&gt;

&lt;p&gt;When editing the interface for a specific size class combination, you are able to change:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;properties for many views&lt;/li&gt;
  &lt;li&gt;whether a specific subview is installed&lt;/li&gt;
  &lt;li&gt;whether a specific constraint is installed&lt;/li&gt;
  &lt;li&gt;the constant of a constraint&lt;/li&gt;
  &lt;li&gt;the font for subviews that display text&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;u&gt;NOTE:&lt;/u&gt;&lt;/strong&gt; To detect a change in device orientation, we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;viewWillTransition(to:with:)&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;varying-constraints-for-different-size-classes&quot;&gt;Varying constraints for different size classes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;To activate constraints on only a particular size classes ,for a partiular trait, you can change things like the axis of the stack view, and it will be applied to only that particular device orientation. We can add size-class-specific options to do this.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can also deactivate particular constraints for a particular trait variation (by disabling the install checkbox when in the trait variation).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;web-services&quot;&gt;Web Services&lt;/h2&gt;

&lt;h3 id=&quot;building-the-url&quot;&gt;Building the URL&lt;/h3&gt;

&lt;p&gt;Communication with servers is done via requests. A request encapsulates information about the interaction between the application and the server, and its most important piece of information is the destination URL.&lt;/p&gt;

&lt;h3 id=&quot;access-control&quot;&gt;Access Control&lt;/h3&gt;

&lt;p&gt;You can control what can access the properties and methods on your own types. There are five levels of access control that can be applied to types, properties, and methods:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;open – This is used only for classes, and mostly by framework or third-party library authors. Anything can access this class, property, or method. Additionally, classes marked as open can be subclassed and methods can be overridden outside of the module.&lt;/li&gt;
  &lt;li&gt;public – This is very similar to open; however, classes can only be subclassed and methods can only be overridden inside (not outside of) the module.&lt;/li&gt;
  &lt;li&gt;internal – This is the default. Anything in the current module can access this type, property, or method. For an app, only files within your project can access these. If you write a third-party library, then only files within that third-party library can access them – apps that use your third-party library cannot.&lt;/li&gt;
  &lt;li&gt;fileprivate – Anything in the same source file can see this type, property, or method.&lt;/li&gt;
  &lt;li&gt;private – Anything within the enclosing scope can access this type, property, or method.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sending-the-request&quot;&gt;Sending the Request&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;A URL request encapsulates information about the communication from the application to the server. Most
importantly, it specifies the URL of the server for the request, but it also has a timeout interval, a cache policy, and other metadata about the request. A request is represented by the URLRequest class.&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;URLSession API&lt;/strong&gt; is a collection of classes that use a request to communicate with a server in a number of ways. The &lt;strong&gt;URLSessionTask&lt;/strong&gt; class is responsible for communicating with a server. The &lt;strong&gt;URLSession&lt;/strong&gt; class is responsible for creating tasks that match a given configuration.&lt;/li&gt;
  &lt;li&gt;The class that communicates with the web service is an instance of URLSessionTask. There are three kinds of tasks: data tasks, download tasks, and upload tasks. URLSessionDataTask retrieves data from the server and returns it as Data in memory. URLSessionDownloadTask retrieves data from the server and returns it as a file saved to the filesystem. URLSessionUploadTask sends data to the server.&lt;/li&gt;
  &lt;li&gt;Often, you will have a group of requests that have many properties in common. For example, maybe some downloads should never happen over cellular data, or maybe certain requests should be cached differently than others. It can become tedious to configure related requests the same way.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This is where URLSession comes in handy. URLSession acts as a factory for URLSessionTask instances. The session is created with a configuration that specifies properties that are common across all of the tasks that it creates. Although many applications might only need to use a single instance of URLSession, having the power and flexibility of multiple sessions is a great tool to have at your disposal.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Fetching data from a web service is an asynchronous process: Once the request starts, it may
 take a nontrivial amount of time for a response to come back from the server. Because of this, the fetchInterestingPhotos(completion:) method cannot directly return an instance of PhotosResult. Instead, the caller of this method will supply a completion closure for the PhotoStore to call once the request is complete.&lt;/li&gt;
  &lt;li&gt;This follows the same pattern that URLSessionTask uses with its completion handler: The task is created with a closure for it to call once the web service request completes. Figure 20.6 describes the flow of data with the web service request.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/image-20190321165226836.png&quot; alt=&quot;image-20190321165226836&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-main-thread&quot;&gt;The Main Thread&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Modern iOS devices have multicore processors that enable them to run multiple chunks of code simultaneously. A common way to express this is by representing each computation with a different thread of control.&lt;/li&gt;
  &lt;li&gt;When the web service completes, you want it to update the image view. But by default, URLSessionDataTask runs the completion handler on a background thread. You need a way to force code to run on the main thread to update the image view. You can do that easily using the OperationQueue class.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;collection-views&quot;&gt;Collection Views&lt;/h2&gt;

&lt;h3 id=&quot;creating-a-uicollectionview&quot;&gt;Creating a UICollectionView&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;layout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UICollectionViewFlowLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UICollectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;collectionViewLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;uicollectionviewdatasource&quot;&gt;UICollectionViewDataSource&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;photos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Photos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UICollectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;numberOfItemsInSection&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;photos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UICollectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cellForItemAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;IndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UICollectionViewCell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;identifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;UICollectionViewCell&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dequeueReusableCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;withReuseIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                           &lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Configure the cell&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;customizing-a-collection-layout&quot;&gt;Customizing a Collection Layout&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/image-20190322102944530.png&quot; alt=&quot;image-20190322102944530&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/image-20190322103012226.png&quot; alt=&quot;image-20190322103012226&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The display of cells is not driven by the collection view itself but by the collection view’s layout. The layout object is responsible for the placement of cells onscreen. Layouts, in turn, are driven by a subclass of UICollectionViewLayout.&lt;/p&gt;

&lt;p&gt;The flow layout that Photorama is currently using is UICollectionViewFlowLayout, which is the only concrete UICollectionViewLayout subclass provided by the UIKit framework.&lt;/p&gt;

&lt;p&gt;Some of the properties you can customize on UICollectionViewFlowLayout are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;scrollDirection – Do you want to scroll vertically or horizontally?&lt;/li&gt;
  &lt;li&gt;minimumLineSpacing – What is the minimum spacing between lines?&lt;/li&gt;
  &lt;li&gt;minimumInteritemSpacing – What is the minimum spacing between items in a row (or column, if scrolling horizontally)?&lt;/li&gt;
  &lt;li&gt;itemSize – What is the size of each item?&lt;/li&gt;
  &lt;li&gt;sectionInset – What are the margins used to lay out content for each section?&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Parth Mehta</name><email>pm2877@columbia.edu</email></author><summary type="html">Notes taken during iOS training course with Big Nerd Ranch</summary></entry><entry><title type="html">Pro-Git</title><link href="http://localhost:4000/Pro-Git/" rel="alternate" type="text/html" title="Pro-Git" /><published>2019-02-15T07:00:00-08:00</published><updated>2019-02-15T07:00:00-08:00</updated><id>http://localhost:4000/Pro-Git</id><content type="html" xml:base="http://localhost:4000/Pro-Git/">&lt;h3 id=&quot;history-of-vcs&quot;&gt;History of VCS&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Local VCS (RCS) –&amp;gt; Centralised Remote VCS (subversion) –&amp;gt; Distributed Remote VCS (Git)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;history-of-git&quot;&gt;History of Git&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Linux Kernel used patch files from 1991 - 2002 —&amp;gt; In 2002, started using Bitkeeper, a proprietary DCVS —&amp;gt; In 2005, they fought and it Linus Torvalds decided to build something of his own, learning lessons from Bitkeeper.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;git-vs-other-vcs&quot;&gt;Git Vs. Other VCS&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;
      &lt;p&gt;The basic difference is that Git is not a delta-based version control system. It stores snapshots of the entire filesystem at each commit, as opposed to storing what changed in all the files from the previous version.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Nearly every operation is local, be it looking up history, or making commits.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Everything in Git is checksummed before it is stored and is then referred to by that checksum. This means it’s impossible to change the contents of any file or directory without Git knowing about it. This functionality is built into Git at the lowest levels and is integral to its philosophy. You can’t lose information in transit or get file corruption without Git being able to detect it.&lt;/p&gt;

      &lt;p&gt;The mechanism that Git uses for this checksumming is called a SHA-1 hash.&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;git-basics&quot;&gt;Git Basics&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Git has three main states that your files can reside in: &lt;em&gt;committed&lt;/em&gt;, &lt;em&gt;modified&lt;/em&gt;, and &lt;em&gt;staged&lt;/em&gt;:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Committed means that the data is safely stored in your local database.&lt;/li&gt;
    &lt;li&gt;Modified means that you have changed the file but have not committed it to your database yet.&lt;/li&gt;
    &lt;li&gt;Staged means that you have marked a modified file in its current version to go into your next commit snapshot.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;This leads us to the three main sections of a Git project: the Git directory, the working tree, and the staging area.&lt;/p&gt;

  &lt;p&gt;The Git directory is where Git stores the metadata and object database for your project. This is the most important part of Git, and it is what is copied when you &lt;em&gt;clone&lt;/em&gt; a repository from another computer.&lt;/p&gt;

  &lt;p&gt;The working tree is a single checkout of one version of the project. These files are pulled out of the compressed database in the Git directory and placed on disk for you to use or modify.&lt;/p&gt;

  &lt;p&gt;The staging area is a file, generally contained in your Git directory, that stores information about what will go into your next commit. Its technical name in Git parlance is the “index”, but the phrase “staging area” works just as well.&lt;/p&gt;

  &lt;p&gt;The basic Git workflow goes something like this:&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;You modify files in your working tree.&lt;/li&gt;
    &lt;li&gt;You selectively stage just those changes you want to be part of your next commit, which adds &lt;em&gt;only&lt;/em&gt;those changes to the staging area.&lt;/li&gt;
    &lt;li&gt;You do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to your Git directory.&lt;/li&gt;
  &lt;/ol&gt;

  &lt;p&gt;If a particular version of a file is in the Git directory, it’s considered &lt;em&gt;committed&lt;/em&gt;. If it has been modified and was added to the staging area, it is &lt;em&gt;staged&lt;/em&gt;. And if it was changed since it was checked out but has not been staged, it is &lt;em&gt;modified&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;first-time-git-setup&quot;&gt;First-time Git Setup&lt;/h3&gt;

&lt;p&gt;Git comes with a tool called &lt;code class=&quot;highlighter-rouge&quot;&gt;git config&lt;/code&gt; that lets you get and set configuration variables that control all aspects of how Git looks and operates. These variables can be stored in three different places:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/gitconfig&lt;/code&gt; file: Contains values applied to every user on the system and all their repositories. If you pass the option &lt;code class=&quot;highlighter-rouge&quot;&gt;--system&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;git config&lt;/code&gt;, it reads and writes from this file specifically. (Because this is a system configuration file, you would need administrative or superuser privilege to make changes to it.)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.gitconfig&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.config/git/config&lt;/code&gt; file: Values specific personally to you, the user. You can make Git read and write to this file specifically by passing the &lt;code class=&quot;highlighter-rouge&quot;&gt;--global&lt;/code&gt; option, and this affects &lt;em&gt;all&lt;/em&gt; of the repositories you work with on your system.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;config&lt;/code&gt; file in the Git directory (that is, &lt;code class=&quot;highlighter-rouge&quot;&gt;.git/config&lt;/code&gt;) of whatever repository you’re currently using: Specific to that single repository. You can force Git to read from and write to this file with the &lt;code class=&quot;highlighter-rouge&quot;&gt;--local&lt;/code&gt; option, &lt;strong&gt;but that is in fact the default&lt;/strong&gt;. (Unsurprisingly, you need to be located somewhere in a Git repository for this option to work properly.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each level overrides values in the previous level, so values in &lt;code class=&quot;highlighter-rouge&quot;&gt;.git/config&lt;/code&gt; trump those in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/gitconfig&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;checking-your-settings&quot;&gt;Checking Your Settings&lt;/h3&gt;

&lt;p&gt;If you want to check your configuration settings, you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;git config --list&lt;/code&gt; command to list all the settings Git can find at that point:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git config &lt;span class=&quot;nt&quot;&gt;--list&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You may see keys more than once, because Git reads the same key from different files (&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/gitconfig&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.gitconfig&lt;/code&gt;, for example). In this case, Git uses the last value for each unique key it sees.&lt;/p&gt;

&lt;p&gt;You can also check what Git thinks a specific key’s value is by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;git config &amp;lt;key&amp;gt;&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git config user.name
&lt;span class=&quot;go&quot;&gt;John Doe
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Note&lt;/th&gt;
      &lt;th&gt;Since Git might read the same configuration variable value from more than one file, it’s possible that you have an unexpected value for one of these values and you don’t know why. In cases like that, you can query Git as to the &lt;em&gt;origin&lt;/em&gt; for that value, and it will tell you which configuration file had the final say in setting that value:&lt;code class=&quot;highlighter-rouge&quot;&gt;$ git config --show-origin rerere.autoUpdate file:/home/johndoe/.gitconfig	false&lt;/code&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;basic-concepts&quot;&gt;Basic Concepts&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Remember that each file in your working directory can be in one of two states: &lt;em&gt;tracked&lt;/em&gt; or &lt;em&gt;untracked&lt;/em&gt;. &lt;strong&gt;Tracked files are files that were in the last snapshot; they can be unmodified, modified, or staged. In short, tracked files are files that Git knows about.&lt;/strong&gt; &lt;strong&gt;Untracked files are everything else — any files in your working directory that were not in your last snapshot and are not in your staging area. When you first clone a repository, all of your files will be tracked and unmodified because Git just checked them out and you haven’t edited anything.&lt;/strong&gt; &lt;img src=&quot;https://git-scm.com/book/en/v2/images/lifecycle.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h5 id=&quot;short-status&quot;&gt;Short Status&lt;/h5&gt;

    &lt;p&gt;While the &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; output is pretty comprehensive, it’s also quite wordy. Git also has a short status flag so you can see your changes in a more compact way. If you run &lt;code class=&quot;highlighter-rouge&quot;&gt;git status -s&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;git status --short&lt;/code&gt; you get a far more simplified output from the command:&lt;/p&gt;

    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git status &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; M README
MM Rakefile
A  lib/git.rb
M  lib/simplegit.rb
?? LICENSE.txt
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;New files that aren’t tracked have a &lt;code class=&quot;highlighter-rouge&quot;&gt;??&lt;/code&gt; next to them, new files that have been added to the staging area have an &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;, modified files have an &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; and so on. There are two columns to the output - the left-hand column indicates the status of the staging area and the right-hand column indicates the status of the working tree. So for example in that output, the &lt;code class=&quot;highlighter-rouge&quot;&gt;README&lt;/code&gt; file is modified in the working directory but not yet staged, while the &lt;code class=&quot;highlighter-rouge&quot;&gt;lib/simplegit.rb&lt;/code&gt; file is modified and staged. The &lt;code class=&quot;highlighter-rouge&quot;&gt;Rakefile&lt;/code&gt; was modified, staged and then modified again, so there are changes to it that are both staged and unstaged.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Parth Mehta</name><email>pm2877@columbia.edu</email></author><summary type="html">A deep study of Git</summary></entry><entry><title type="html">Intro to React and Redux</title><link href="http://localhost:4000/Intro-to-React/" rel="alternate" type="text/html" title="Intro to React and Redux" /><published>2018-05-01T08:00:00-07:00</published><updated>2018-05-01T08:00:00-07:00</updated><id>http://localhost:4000/Intro-to-React</id><content type="html" xml:base="http://localhost:4000/Intro-to-React/">&lt;p&gt;[TOC]&lt;/p&gt;

&lt;h2 id=&quot;general-notes&quot;&gt;General Notes:&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;By default, React DOM &lt;a href=&quot;http://stackoverflow.com/questions/7381974/which-characters-need-to-be-escaped-on-html&quot;&gt;escapes&lt;/a&gt; any values embedded in JSX before rendering them. Thus it ensures that you can never inject anything that’s not explicitly written in your application. Everything is converted to a string before being rendered. This helps prevent &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-site_scripting&quot;&gt;XSS (cross-site-scripting)&lt;/a&gt; attacks.&lt;/li&gt;
  &lt;li&gt;React DOM compares the element and its children to the previous one, and only applies the DOM updates necessary to bring the DOM to the desired state.&lt;/li&gt;
  &lt;li&gt;Arrow Functions: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&lt;/li&gt;
  &lt;li&gt;Remember that whenever conditions become too complex, it might be a good time to &lt;a href=&quot;https://reactjs.org/docs/components-and-props.html#extracting-components&quot;&gt;extract a component&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Keys only make sense in the context of the surrounding array. If you &lt;a href=&quot;https://reactjs.org/docs/components-and-props.html#extracting-components&quot;&gt;extract&lt;/a&gt; a &lt;code class=&quot;highlighter-rouge&quot;&gt;ListItem&lt;/code&gt; component, you should keep the key on the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ListItem /&amp;gt;&lt;/code&gt; elements in the array rather than on the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element in the &lt;code class=&quot;highlighter-rouge&quot;&gt;ListItem&lt;/code&gt; itself.&lt;/li&gt;
  &lt;li&gt;A good rule of thumb is that elements inside the map() call need keys.&lt;/li&gt;
  &lt;li&gt;When you see something wrong in the UI, you can use &lt;a href=&quot;https://github.com/facebook/react-devtools&quot;&gt;React Developer Tools&lt;/a&gt; to inspect the props and move up the tree until you find the component responsible for updating the state. This lets you trace the bugs to their source.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Spread syntax&lt;/strong&gt; (eg. &lt;code class=&quot;highlighter-rouge&quot;&gt;…payload&lt;/code&gt;)allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;embedding-expressions-in-jsx&quot;&gt;Embedding Expressions in JSX&lt;/h2&gt;

&lt;p&gt;You can embed any &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions&quot;&gt;JavaScript expression&lt;/a&gt; in JSX by wrapping it in curly braces.&lt;/p&gt;

&lt;h2 id=&quot;jsx-is-an-expression-too&quot;&gt;JSX is an Expression Too&lt;/h2&gt;

&lt;p&gt;After compilation, JSX expressions become regular JavaScript function calls and evaluate to JavaScript objects.&lt;/p&gt;

&lt;p&gt;This means that you can use JSX inside of &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statements and &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loops, assign it to variables, accept it as arguments, and return it from functions:&lt;/p&gt;

&lt;h2 id=&quot;components&quot;&gt;Components&lt;/h2&gt;

&lt;p&gt;Conceptually, components are like JavaScript functions. They accept arbitrary inputs (called “props”) and return React elements describing what should appear on the screen.&lt;/p&gt;

&lt;h2 id=&quot;props&quot;&gt;Props&lt;/h2&gt;

&lt;p&gt;When React sees an element representing a user-defined component, it passes JSX attributes to this component as a single object. We call this object “props”.&lt;/p&gt;

&lt;p&gt;Whether you declare a component &lt;a href=&quot;https://reactjs.org/docs/components-and-props.html#functional-and-class-components&quot;&gt;as a function or a class&lt;/a&gt;, it must never modify its own props.&lt;/p&gt;

&lt;h2 id=&quot;extracting-and-reusing-components&quot;&gt;Extracting and Reusing Components&lt;/h2&gt;

&lt;p&gt;A good rule of thumb is that if a part of your UI is used several times (&lt;code class=&quot;highlighter-rouge&quot;&gt;Button&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Panel&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Avatar&lt;/code&gt;), or is complex enough on its own (&lt;code class=&quot;highlighter-rouge&quot;&gt;App&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;FeedStory&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Comment&lt;/code&gt;), it is a good candidate to be a reusable component.&lt;/p&gt;

&lt;h2 id=&quot;state&quot;&gt;State&lt;/h2&gt;

&lt;p&gt;State is similar to props, but it is private and fully controlled by the component. components defined as classes have some additional features. Local state is exactly that: a feature available only to classes.&lt;/p&gt;

&lt;h5 id=&quot;class-constructor&quot;&gt;Class Constructor&lt;/h5&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;using-state-correctly&quot;&gt;Using State Correctly&lt;/h3&gt;

&lt;p&gt;There are three things you should know about &lt;code class=&quot;highlighter-rouge&quot;&gt;setState()&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;do-not-modify-state-directly&quot;&gt;Do Not Modify State Directly&lt;/h3&gt;

&lt;p&gt;For example, this will not re-render a component:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Wrong
this.state.comment = 'Hello';
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Instead, use &lt;code class=&quot;highlighter-rouge&quot;&gt;setState()&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Correct
this.setState({comment: 'Hello'});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The only place where you can assign &lt;code class=&quot;highlighter-rouge&quot;&gt;this.state&lt;/code&gt; is the constructor.&lt;/p&gt;

&lt;h3 id=&quot;state-updates-may-be-asynchronous&quot;&gt;State Updates May Be Asynchronous&lt;/h3&gt;

&lt;p&gt;React may batch multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;setState()&lt;/code&gt; calls into a single update for performance.&lt;/p&gt;

&lt;p&gt;Because &lt;code class=&quot;highlighter-rouge&quot;&gt;this.props&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;this.state&lt;/code&gt; may be updated asynchronously, you should not rely on their values for calculating the next state.&lt;/p&gt;

&lt;p&gt;For example, this code may fail to update the counter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Wrong
this.setState({
  counter: this.state.counter + this.props.increment,
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To fix it, use a second form of &lt;code class=&quot;highlighter-rouge&quot;&gt;setState()&lt;/code&gt; that accepts a function rather than an object. That function will receive the previous state as the first argument, and the props at the time the update is applied as the second argument:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Correct
this.setState((prevState, props) =&amp;gt; ({
  counter: prevState.counter + props.increment
}));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We used an &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;arrow function&lt;/a&gt; above, but it also works with regular functions:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Correct
this.setState(function(prevState, props) {
  return {
    counter: prevState.counter + props.increment
  };
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;state-updates-are-merged&quot;&gt;State Updates are Merged&lt;/h3&gt;

&lt;p&gt;When you call &lt;code class=&quot;highlighter-rouge&quot;&gt;setState()&lt;/code&gt;, React merges the object you provide into the current state.&lt;/p&gt;

&lt;p&gt;For example, your state may contain several independent variables:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  constructor(props) {
    super(props);
    this.state = {
      posts: [],
      comments: []
    };
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then you can update them independently with separate &lt;code class=&quot;highlighter-rouge&quot;&gt;setState()&lt;/code&gt; calls:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Javascript&quot;&gt;  componentDidMount() {
    fetchPosts().then(response =&amp;gt; {
      this.setState({
        posts: response.posts
      });
    });

    fetchComments().then(response =&amp;gt; {
      this.setState({
        comments: response.comments
      });
    });
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The merging is shallow, so &lt;code class=&quot;highlighter-rouge&quot;&gt;this.setState({comments})&lt;/code&gt; leaves &lt;code class=&quot;highlighter-rouge&quot;&gt;this.state.posts&lt;/code&gt; intact, but completely replaces &lt;code class=&quot;highlighter-rouge&quot;&gt;this.state.comments&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-data-flows-down&quot;&gt;The Data Flows Down&lt;/h2&gt;

&lt;p&gt;Neither parent nor child components can know if a certain component is stateful or stateless, and they shouldn’t care whether it is defined as a function or a class.&lt;/p&gt;

&lt;p&gt;This is why state is often called local or encapsulated. It is not accessible to any component other than the one that owns and sets it.&lt;/p&gt;

&lt;p&gt;A component may choose to pass its state down as props to its child components. This also works for user-defined components.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;FormattedDate&lt;/code&gt; component would receive the &lt;code class=&quot;highlighter-rouge&quot;&gt;date&lt;/code&gt; in its props and wouldn’t know whether it came from the &lt;code class=&quot;highlighter-rouge&quot;&gt;Clock&lt;/code&gt;’s state, from the &lt;code class=&quot;highlighter-rouge&quot;&gt;Clock&lt;/code&gt;’s props, or was typed by hand:&lt;/p&gt;

&lt;h6 id=&quot;this-is-commonly-called-a-top-down-or-unidirectional-data-flow-any-state-is-always-owned-by-some-specific-component-and-any-data-or-ui-derived-from-that-state-can-only-affect-components-below-them-in-the-tree&quot;&gt;This is commonly called a “top-down” or “unidirectional” data flow. Any state is always owned by some specific component, and any data or UI derived from that state can only affect components “below” them in the tree.&lt;/h6&gt;

&lt;h6 id=&quot;if-you-imagine-a-component-tree-as-a-waterfall-of-props-each-components-state-is-like-an-additional-water-source-that-joins-it-at-an-arbitrary-point-but-also-flows-down&quot;&gt;If you imagine a component tree as a waterfall of props, each component’s state is like an additional water source that joins it at an arbitrary point but also flows down.&lt;/h6&gt;

&lt;h2 id=&quot;event-handling&quot;&gt;Event Handling&lt;/h2&gt;

&lt;p&gt;When you define a component using an &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes&quot;&gt;ES6 class&lt;/a&gt;, a common pattern is for an event handler to be a method on the class. For example, this &lt;code class=&quot;highlighter-rouge&quot;&gt;Toggle&lt;/code&gt; component renders a button that lets the user toggle between “ON” and “OFF” states:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Toggle&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isToggleOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// This binding is necessary to make `this` work in the callback&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// this.handleClick = this.handleClick.bind(this);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Warning: this is *experimental* syntax.&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'this is:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isToggleOn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ON'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'OFF'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/button&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;ReactDOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Toggle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;h6 id=&quot;side-note&quot;&gt;Side Note:&lt;/h6&gt;

  &lt;p&gt;You have to be careful about the meaning of &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; in JSX callbacks. In JavaScript, class methods are not &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind&quot;&gt;bound&lt;/a&gt; by default. If you forget to bind &lt;code class=&quot;highlighter-rouge&quot;&gt;this.handleClick&lt;/code&gt; and pass it to &lt;code class=&quot;highlighter-rouge&quot;&gt;onClick&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; will be &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt; when the function is actually called.&lt;/p&gt;

  &lt;p&gt;This is not React-specific behavior; it is a part of &lt;a href=&quot;https://www.smashingmagazine.com/2014/01/understanding-javascript-function-prototype-bind/&quot;&gt;how functions work in JavaScript&lt;/a&gt;. Generally, if you refer to a method without &lt;code class=&quot;highlighter-rouge&quot;&gt;()&lt;/code&gt; after it, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;onClick={this.handleClick}&lt;/code&gt;, you should bind that method.&lt;/p&gt;

  &lt;p&gt;If calling &lt;code class=&quot;highlighter-rouge&quot;&gt;bind&lt;/code&gt; annoys you, there are two ways you can get around this. If you are using the experimental &lt;a href=&quot;https://babeljs.io/docs/plugins/transform-class-properties/&quot;&gt;public class fields syntax&lt;/a&gt;, you can use class fields to correctly bind callbacks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;lists-and-keys&quot;&gt;Lists and Keys&lt;/h2&gt;

&lt;p&gt;First, let’s review how you transform lists in JavaScript.&lt;/p&gt;

&lt;p&gt;Given the code below, we use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;map()&lt;/code&gt;&lt;/a&gt; function to take an array of &lt;code class=&quot;highlighter-rouge&quot;&gt;numbers&lt;/code&gt; and double their values. We assign the new array returned by &lt;code class=&quot;highlighter-rouge&quot;&gt;map()&lt;/code&gt; to the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;doubled&lt;/code&gt; and log it:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doubled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doubled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This code logs &lt;code class=&quot;highlighter-rouge&quot;&gt;[2, 4, 6, 8, 10]&lt;/code&gt; to the console.&lt;/p&gt;

&lt;p&gt;In React, transforming arrays into lists of &lt;a href=&quot;https://reactjs.org/docs/rendering-elements.html&quot;&gt;elements&lt;/a&gt; is nearly identical.&lt;/p&gt;

&lt;h3 id=&quot;rendering-multiple-components&quot;&gt;Rendering Multiple Components&lt;/h3&gt;

&lt;p&gt;You can build collections of elements and &lt;a href=&quot;https://reactjs.org/docs/introducing-jsx.html#embedding-expressions-in-jsx&quot;&gt;include them in JSX&lt;/a&gt; using curly braces &lt;code class=&quot;highlighter-rouge&quot;&gt;{}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Below, we loop through the &lt;code class=&quot;highlighter-rouge&quot;&gt;numbers&lt;/code&gt; array using the JavaScript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;map()&lt;/code&gt;&lt;/a&gt; function. We return an &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element for each item. Finally, we assign the resulting array of elements to &lt;code class=&quot;highlighter-rouge&quot;&gt;listItems&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Javascript&quot;&gt;const numbers = [1, 2, 3, 4, 5];
const listItems = numbers.map((number) =&amp;gt;
  &amp;lt;li&amp;gt;{number}&amp;lt;/li&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We include the entire &lt;code class=&quot;highlighter-rouge&quot;&gt;listItems&lt;/code&gt; array inside a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; element, and &lt;a href=&quot;https://reactjs.org/docs/rendering-elements.html#rendering-an-element-into-the-dom&quot;&gt;render it to the DOM&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Javascript&quot;&gt;ReactDOM.render(
  &amp;lt;ul&amp;gt;{listItems}&amp;lt;/ul&amp;gt;,
  document.getElementById('root')
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/gaearon/pen/GjPyQr?editors=0011&quot;&gt;Try it on CodePen.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This code displays a bullet list of numbers between 1 and 5.&lt;/p&gt;

&lt;h3 id=&quot;basic-list-component&quot;&gt;Basic List Component&lt;/h3&gt;

&lt;p&gt;Usually you would render lists inside a &lt;a href=&quot;https://reactjs.org/docs/components-and-props.html&quot;&gt;component&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We can refactor the previous example into a component that accepts an array of &lt;code class=&quot;highlighter-rouge&quot;&gt;numbers&lt;/code&gt; and outputs an unordered list of elements.&lt;/p&gt;

&lt;h5 id=&quot;a-key-is-a-special-string-attribute-you-need-to-include-when-creating-lists-of-elements-well-discuss-why-its-important-in-the-next-section&quot;&gt;A “key” is a special string attribute you need to include when creating lists of elements. We’ll discuss why it’s important in the next section.&lt;/h5&gt;

&lt;p&gt;Let’s assign a &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt; to our list items inside &lt;code class=&quot;highlighter-rouge&quot;&gt;numbers.map()&lt;/code&gt; and fix the missing key issue.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NumberList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;listItems&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ul&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;ReactDOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NumberList&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,
&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/gaearon/pen/jrXYRR?editors=0011&quot;&gt;Try it on CodePen.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;keys&quot;&gt;Keys&lt;/h2&gt;

&lt;p&gt;Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;listItems&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The best way to pick a key is to use a string that uniquely identifies a list item among its siblings. Most often you would use IDs from your data as keys:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todoItems&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;very-important&quot;&gt;VERY IMPORTANT:&lt;/h5&gt;

&lt;p&gt;Keys serve as a hint to React but they don’t get passed to your components. If you need the same value in your component, pass it explicitly as a prop with a different name:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const content = posts.map((post) =&amp;gt;
  &amp;lt;Post
    key={post.id}
    id={post.id}
    title={post.title} /&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With the example above, the &lt;code class=&quot;highlighter-rouge&quot;&gt;Post&lt;/code&gt; component can read &lt;code class=&quot;highlighter-rouge&quot;&gt;props.id&lt;/code&gt;, but not &lt;code class=&quot;highlighter-rouge&quot;&gt;props.key&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Overall, this makes it so that &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;select&amp;gt;&lt;/code&gt; all work very similarly - they all accept a &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; attribute that you can use to implement a controlled component.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note&lt;/p&gt;

  &lt;p&gt;You can pass an array into the &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; attribute, allowing you to select multiple options in a &lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt; tag:&lt;/p&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;select multiple={true} value={['B', 'C']}&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;lifting-state-up&quot;&gt;Lifting State Up&lt;/h2&gt;

&lt;p&gt;There should be a single “source of truth” for any data that changes in a React application. Usually, the state is first added to the component that needs it for rendering. Then, if other components also need it, you can lift it up to their closest common ancestor. Instead of trying to sync the state between different components, you should rely on the &lt;a href=&quot;https://reactjs.org/docs/state-and-lifecycle.html#the-data-flows-down&quot;&gt;top-down data flow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lifting state involves writing more “boilerplate” code than two-way binding approaches, but as a benefit, it takes less work to find and isolate bugs. Since any state “lives” in some component and that component alone can change it, the surface area for bugs is greatly reduced. Additionally, you can implement any custom logic to reject or transform user input.&lt;/p&gt;

&lt;p&gt;If something can be derived from either props or state, it probably shouldn’t be in the state. For example, instead of storing both &lt;code class=&quot;highlighter-rouge&quot;&gt;celsiusValue&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;fahrenheitValue&lt;/code&gt;, we store just the last edited &lt;code class=&quot;highlighter-rouge&quot;&gt;temperature&lt;/code&gt; and its &lt;code class=&quot;highlighter-rouge&quot;&gt;scale&lt;/code&gt;. The value of the other input can always be calculated from them in the &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; method. This lets us clear or apply rounding to the other field without losing any precision in the user input.&lt;/p&gt;

&lt;h2 id=&quot;containment&quot;&gt;Containment&lt;/h2&gt;

&lt;p&gt;Some components don’t know their children ahead of time. This is especially common for components like &lt;code class=&quot;highlighter-rouge&quot;&gt;Sidebar&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Dialog&lt;/code&gt; that represent generic “boxes”.&lt;/p&gt;

&lt;p&gt;We recommend that such components use the special &lt;code class=&quot;highlighter-rouge&quot;&gt;children&lt;/code&gt; prop to pass children elements directly into their output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function FancyBorder(props) {
  return (
    &amp;lt;div className={'FancyBorder FancyBorder-' + props.color}&amp;gt;
      {props.children}
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This lets other components pass arbitrary children to them by nesting the JSX:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function WelcomeDialog() {
  return (
    &amp;lt;FancyBorder color=&quot;blue&quot;&amp;gt;
      &amp;lt;h1 className=&quot;Dialog-title&quot;&amp;gt;
        Welcome
      &amp;lt;/h1&amp;gt;
      &amp;lt;p className=&quot;Dialog-message&quot;&amp;gt;
        Thank you for visiting our spacecraft!
      &amp;lt;/p&amp;gt;
    &amp;lt;/FancyBorder&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/gaearon/pen/ozqNOV?editors=0010&quot;&gt;Try it on CodePen.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Anything inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;FancyBorder&amp;gt;&lt;/code&gt; JSX tag gets passed into the &lt;code class=&quot;highlighter-rouge&quot;&gt;FancyBorder&lt;/code&gt;component as a &lt;code class=&quot;highlighter-rouge&quot;&gt;children&lt;/code&gt; prop. Since &lt;code class=&quot;highlighter-rouge&quot;&gt;FancyBorder&lt;/code&gt; renders &lt;code class=&quot;highlighter-rouge&quot;&gt;{props.children}&lt;/code&gt;inside a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, the passed elements appear in the final output.&lt;/p&gt;

&lt;h2 id=&quot;build-a-static-version-in-react&quot;&gt;Build A Static Version in React&lt;/h2&gt;

&lt;p&gt;See the Pen &lt;a href=&quot;https://codepen.io/gaearon/pen/BwWzwm&quot;&gt;Thinking In React: Step 2&lt;/a&gt; on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now that you have your component hierarchy, it’s time to implement your app. The easiest way is to build a version that takes your data model and renders the UI but has no interactivity. It’s best to decouple these processes because building a static version requires a lot of typing and no thinking, and adding interactivity requires a lot of thinking and not a lot of typing. We’ll see why.&lt;/p&gt;

&lt;p&gt;To build a static version of your app that renders your data model, you’ll want to build components that reuse other components and pass data using &lt;em&gt;props&lt;/em&gt;. &lt;em&gt;props&lt;/em&gt; are a way of passing data from parent to child. If you’re familiar with the concept of &lt;em&gt;state&lt;/em&gt;, &lt;strong&gt;don’t use state at all&lt;/strong&gt; to build this static version. State is reserved only for interactivity, that is, data that changes over time. Since this is a static version of the app, you don’t need it.&lt;/p&gt;

&lt;p&gt;You can build top-down or bottom-up. That is, you can either start with building the components higher up in the hierarchy (i.e. starting with &lt;code class=&quot;highlighter-rouge&quot;&gt;FilterableProductTable&lt;/code&gt;) or with the ones lower in it (&lt;code class=&quot;highlighter-rouge&quot;&gt;ProductRow&lt;/code&gt;). In simpler examples, it’s usually easier to go top-down, and on larger projects, it’s easier to go bottom-up and write tests as you build.&lt;/p&gt;

&lt;p&gt;At the end of this step, you’ll have a library of reusable components that render your data model. The components will only have &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; methods since this is a static version of your app. The component at the top of the hierarchy (&lt;code class=&quot;highlighter-rouge&quot;&gt;FilterableProductTable&lt;/code&gt;) will take your data model as a prop. If you make a change to your underlying data model and call &lt;code class=&quot;highlighter-rouge&quot;&gt;ReactDOM.render()&lt;/code&gt; again, the UI will be updated. It’s easy to see how your UI is updated and where to make changes since there’s nothing complicated going on. React’s &lt;strong&gt;one-way data flow&lt;/strong&gt; (also called &lt;em&gt;one-way binding&lt;/em&gt;) keeps everything modular and fast.&lt;/p&gt;

&lt;p&gt;Simply refer to the &lt;a href=&quot;https://reactjs.org/docs/&quot;&gt;React docs&lt;/a&gt; if you need help executing this step.&lt;/p&gt;

&lt;h2 id=&quot;react-lifecycle-methods&quot;&gt;React Lifecycle Methods&lt;/h2&gt;

&lt;h3 id=&quot;constructor&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;constructor()&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;constructor(props)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The constructor for a React component is called before it is mounted. When implementing the constructor for a &lt;code class=&quot;highlighter-rouge&quot;&gt;React.Component&lt;/code&gt; subclass, you should call &lt;code class=&quot;highlighter-rouge&quot;&gt;super(props)&lt;/code&gt; before any other statement. Otherwise, &lt;code class=&quot;highlighter-rouge&quot;&gt;this.props&lt;/code&gt; will be undefined in the constructor, which can lead to bugs.&lt;/p&gt;

&lt;p&gt;Avoid introducing any side-effects or subscriptions in the constructor. For those use cases, use &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount()&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;The constructor is the right place to initialize state. To do so, just assign an object to &lt;code class=&quot;highlighter-rouge&quot;&gt;this.state&lt;/code&gt;; don’t try to call &lt;code class=&quot;highlighter-rouge&quot;&gt;setState()&lt;/code&gt; from the constructor. The constructor is also often used to bind event handlers to the class instance.&lt;/p&gt;

&lt;p&gt;If you don’t initialize state and you don’t bind methods, you don’t need to implement a constructor for your React component.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;static-getderivedstatefromprops&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;static getDerivedStateFromProps()&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static getDerivedStateFromProps(nextProps, prevState)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getDerivedStateFromProps&lt;/code&gt; is invoked after a component is instantiated as well as when it receives new props. It should return an object to update state, or null to indicate that the new props do not require any state updates.&lt;/p&gt;

&lt;p&gt;Note that if a parent component causes your component to re-render, this method will be called even if props have not changed. You may want to compare new and previous values if you only want to handle changes.&lt;/p&gt;

&lt;p&gt;Calling &lt;code class=&quot;highlighter-rouge&quot;&gt;this.setState()&lt;/code&gt; generally doesn’t trigger &lt;code class=&quot;highlighter-rouge&quot;&gt;getDerivedStateFromProps()&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;unsafe_componentwillmount&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UNSAFE_componentWillMount()&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UNSAFE_componentWillMount()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UNSAFE_componentWillMount()&lt;/code&gt; is invoked just before mounting occurs. It is called before &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt;, therefore calling &lt;code class=&quot;highlighter-rouge&quot;&gt;setState()&lt;/code&gt; synchronously in this method will not trigger an extra rendering. Generally, we recommend using the &lt;code class=&quot;highlighter-rouge&quot;&gt;constructor()&lt;/code&gt; instead for initializing state.&lt;/p&gt;

&lt;p&gt;Avoid introducing any side-effects or subscriptions in this method. For those use cases, use &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount()&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;This is the only lifecycle hook called on server rendering.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note&lt;/p&gt;

  &lt;p&gt;This lifecycle was previously named &lt;code class=&quot;highlighter-rouge&quot;&gt;componentWillMount&lt;/code&gt;. That name will continue to work until version 17. Use the &lt;a href=&quot;https://github.com/reactjs/react-codemod#rename-unsafe-lifecycles&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rename-unsafe-lifecycles&lt;/code&gt; codemod&lt;/a&gt; to automatically update your components.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;componentdidmount&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount()&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;componentDidMount()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount()&lt;/code&gt; is invoked immediately after a component is mounted. Initialization that requires DOM nodes should go here. If you need to load data from a remote endpoint, this is a good place to instantiate the network request.&lt;/p&gt;

&lt;p&gt;This method is a good place to set up any subscriptions. If you do that, don’t forget to unsubscribe in &lt;code class=&quot;highlighter-rouge&quot;&gt;componentWillUnmount()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Calling &lt;code class=&quot;highlighter-rouge&quot;&gt;setState()&lt;/code&gt; in this method will trigger an extra rendering, but it will happen before the browser updates the screen. This guarantees that even though the &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; will be called twice in this case, the user won’t see the intermediate state. Use this pattern with caution because it often causes performance issues. It can, however, be necessary for cases like modals and tooltips when you need to measure a DOM node before rendering something that depends on its size or position.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;unsafe_componentwillreceiveprops&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UNSAFE_componentWillReceiveProps()&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UNSAFE_componentWillReceiveProps(nextProps)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note&lt;/p&gt;

  &lt;p&gt;It is recommended that you use the static &lt;a href=&quot;https://reactjs.org/docs/react-component.html#static-getderivedstatefromprops&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getDerivedStateFromProps&lt;/code&gt;&lt;/a&gt; lifecycle instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;UNSAFE_componentWillReceiveProps&lt;/code&gt;. &lt;a href=&quot;https://reactjs.org/blog/2018/03/29/react-v-16-3.html#component-lifecycle-changes&quot;&gt;Learn more about this recommendation here.&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UNSAFE_componentWillReceiveProps()&lt;/code&gt; is invoked before a mounted component receives new props. If you need to update the state in response to prop changes (for example, to reset it), you may compare &lt;code class=&quot;highlighter-rouge&quot;&gt;this.props&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;nextProps&lt;/code&gt; and perform state transitions using &lt;code class=&quot;highlighter-rouge&quot;&gt;this.setState()&lt;/code&gt; in this method.&lt;/p&gt;

&lt;p&gt;Note that if a parent component causes your component to re-render, this method will be called even if props have not changed. Make sure to compare the current and next values if you only want to handle changes.&lt;/p&gt;

&lt;p&gt;React doesn’t call &lt;code class=&quot;highlighter-rouge&quot;&gt;UNSAFE_componentWillReceiveProps()&lt;/code&gt; with initial props during &lt;a href=&quot;https://reactjs.org/docs/react-component.html#mounting&quot;&gt;mounting&lt;/a&gt;. It only calls this method if some of component’s props may update. Calling &lt;code class=&quot;highlighter-rouge&quot;&gt;this.setState()&lt;/code&gt; generally doesn’t trigger &lt;code class=&quot;highlighter-rouge&quot;&gt;UNSAFE_componentWillReceiveProps()&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note&lt;/p&gt;

  &lt;p&gt;This lifecycle was previously named &lt;code class=&quot;highlighter-rouge&quot;&gt;componentWillReceiveProps&lt;/code&gt;. That name will continue to work until version 17. Use the &lt;a href=&quot;https://github.com/reactjs/react-codemod#rename-unsafe-lifecycles&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rename-unsafe-lifecycles&lt;/code&gt; codemod&lt;/a&gt; to automatically update your components.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;shouldcomponentupdate&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shouldComponentUpdate()&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;shouldComponentUpdate(nextProps, nextState)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;shouldComponentUpdate()&lt;/code&gt; to let React know if a component’s output is not affected by the current change in state or props. The default behavior is to re-render on every state change, and in the vast majority of cases you should rely on the default behavior.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shouldComponentUpdate()&lt;/code&gt; is invoked before rendering when new props or state are being received. Defaults to &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;. This method is not called for the initial render or when &lt;code class=&quot;highlighter-rouge&quot;&gt;forceUpdate()&lt;/code&gt; is used.&lt;/p&gt;

&lt;p&gt;Returning &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; does not prevent child components from re-rendering when &lt;em&gt;their&lt;/em&gt; state changes.&lt;/p&gt;

&lt;p&gt;Currently, if &lt;code class=&quot;highlighter-rouge&quot;&gt;shouldComponentUpdate()&lt;/code&gt; returns &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;, then &lt;a href=&quot;https://reactjs.org/docs/react-component.html#componentwillupdate&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UNSAFE_componentWillUpdate()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://reactjs.org/docs/react-component.html#render&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://reactjs.org/docs/react-component.html#componentdidupdate&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidUpdate()&lt;/code&gt;&lt;/a&gt; will not be invoked. Note that in the future React may treat &lt;code class=&quot;highlighter-rouge&quot;&gt;shouldComponentUpdate()&lt;/code&gt; as a hint rather than a strict directive, and returning &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; may still result in a re-rendering of the component.&lt;/p&gt;

&lt;p&gt;If you determine a specific component is slow after profiling, you may change it to inherit from &lt;a href=&quot;https://reactjs.org/docs/react-api.html#reactpurecomponent&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;React.PureComponent&lt;/code&gt;&lt;/a&gt; which implements &lt;code class=&quot;highlighter-rouge&quot;&gt;shouldComponentUpdate()&lt;/code&gt; with a shallow prop and state comparison. If you are confident you want to write it by hand, you may compare &lt;code class=&quot;highlighter-rouge&quot;&gt;this.props&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;nextProps&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;this.state&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;nextState&lt;/code&gt; and return &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; to tell React the update can be skipped.&lt;/p&gt;

&lt;p&gt;We do not recommend doing deep equality checks or using &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON.stringify()&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;shouldComponentUpdate()&lt;/code&gt;. It is very inefficient and will harm performance.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;unsafe_componentwillupdate&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UNSAFE_componentWillUpdate()&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UNSAFE_componentWillUpdate(nextProps, nextState)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UNSAFE_componentWillUpdate()&lt;/code&gt; is invoked just before rendering when new props or state are being received. Use this as an opportunity to perform preparation before an update occurs. This method is not called for the initial render.&lt;/p&gt;

&lt;p&gt;Note that you cannot call &lt;code class=&quot;highlighter-rouge&quot;&gt;this.setState()&lt;/code&gt; here; nor should you do anything else (e.g. dispatch a Redux action) that would trigger an update to a React component before &lt;code class=&quot;highlighter-rouge&quot;&gt;UNSAFE_componentWillUpdate()&lt;/code&gt; returns.&lt;/p&gt;

&lt;p&gt;If you need to update &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; in response to &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt; changes, use &lt;a href=&quot;https://reactjs.org/docs/react-component.html#static-getderivedstatefromprops&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getDerivedStateFromProps()&lt;/code&gt;&lt;/a&gt; instead.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note&lt;/p&gt;

  &lt;p&gt;This lifecycle was previously named &lt;code class=&quot;highlighter-rouge&quot;&gt;componentWillUpdate&lt;/code&gt;. That name will continue to work until version 17. Use the &lt;a href=&quot;https://github.com/reactjs/react-codemod#rename-unsafe-lifecycles&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rename-unsafe-lifecycles&lt;/code&gt; codemod&lt;/a&gt; to automatically update your components.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note&lt;/p&gt;

  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UNSAFE_componentWillUpdate()&lt;/code&gt; will not be invoked if &lt;a href=&quot;https://reactjs.org/docs/react-component.html#shouldcomponentupdate&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shouldComponentUpdate()&lt;/code&gt;&lt;/a&gt;returns false.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;getsnapshotbeforeupdate&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getSnapshotBeforeUpdate()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getSnapshotBeforeUpdate()&lt;/code&gt; is invoked right before the most recently rendered output is committed to e.g. the DOM. It enables your component to capture current values (e.g. scroll position) before they are potentially changed. Any value returned by this lifecycle will be passed as a parameter to &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidUpdate()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class ScrollingList extends React.Component {
  listRef = React.createRef();

  getSnapshotBeforeUpdate(prevProps, prevState) {
    // Are we adding new items to the list?
    // Capture the current height of the list so we can adjust scroll later.
    if (prevProps.list.length &amp;lt; this.props.list.length) {
      return this.listRef.current.scrollHeight;
    }
    return null;
  }

  componentDidUpdate(prevProps, prevState, snapshot) {
    // If we have a snapshot value, we've just added new items.
    // Adjust scroll so these new items don't push the old ones out of view.
    if (snapshot !== null) {
      this.listRef.current.scrollTop +=
        this.listRef.current.scrollHeight - snapshot;
    }
  }

  render() {
    return (
      &amp;lt;div ref={this.listRef}&amp;gt;{/* ...contents... */}&amp;lt;/div&amp;gt;
    );
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the above examples, it is important to read the &lt;code class=&quot;highlighter-rouge&quot;&gt;scrollHeight&lt;/code&gt; property in &lt;code class=&quot;highlighter-rouge&quot;&gt;getSnapshotBeforeUpdate&lt;/code&gt; rather than &lt;code class=&quot;highlighter-rouge&quot;&gt;componentWillUpdate&lt;/code&gt; in order to support async rendering. With async rendering, there may be delays between “render” phase lifecycles (like &lt;code class=&quot;highlighter-rouge&quot;&gt;componentWillUpdate&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt;) and “commit” phase lifecycles (like &lt;code class=&quot;highlighter-rouge&quot;&gt;getSnapshotBeforeUpdate&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidUpdate&lt;/code&gt;). If a user does something like resize the browser during this time, a &lt;code class=&quot;highlighter-rouge&quot;&gt;scrollHeight&lt;/code&gt; value read from &lt;code class=&quot;highlighter-rouge&quot;&gt;componentWillUpdate&lt;/code&gt; will be stale.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;componentdidupdate&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidUpdate()&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;componentDidUpdate(prevProps, prevState, snapshot)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidUpdate()&lt;/code&gt; is invoked immediately after updating occurs. This method is not called for the initial render.&lt;/p&gt;

&lt;p&gt;Use this as an opportunity to operate on the DOM when the component has been updated. This is also a good place to do network requests as long as you compare the current props to previous props (e.g. a network request may not be necessary if the props have not changed).&lt;/p&gt;

&lt;p&gt;If your component implements the &lt;code class=&quot;highlighter-rouge&quot;&gt;getSnapshotBeforeUpdate()&lt;/code&gt; lifecycle, the value it returns will be passed as a third “snapshot” parameter to &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidUpdate()&lt;/code&gt;. (Otherwise this parameter will be undefined.)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note&lt;/p&gt;

  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidUpdate()&lt;/code&gt; will not be invoked if &lt;a href=&quot;https://reactjs.org/docs/react-component.html#shouldcomponentupdate&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shouldComponentUpdate()&lt;/code&gt;&lt;/a&gt; returns false.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;componentwillunmount&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;componentWillUnmount()&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;componentWillUnmount()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;componentWillUnmount()&lt;/code&gt; is invoked immediately before a component is unmounted and destroyed. Perform any necessary cleanup in this method, such as invalidating timers, canceling network requests, or cleaning up any subscriptions that were created in &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount()&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;componentdidcatch&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidCatch()&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;componentDidCatch(error, info)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Error boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed. Error boundaries catch errors during rendering, in lifecycle methods, and in constructors of the whole tree below them.&lt;/p&gt;

&lt;p&gt;A class component becomes an error boundary if it defines this lifecycle method. Calling &lt;code class=&quot;highlighter-rouge&quot;&gt;setState()&lt;/code&gt; in it lets you capture an unhandled JavaScript error in the below tree and display a fallback UI. Only use error boundaries for recovering from unexpected exceptions; don’t try to use them for control flow.&lt;/p&gt;

&lt;p&gt;For more details, see &lt;a href=&quot;https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html&quot;&gt;&lt;em&gt;Error Handling in React 16&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note&lt;/p&gt;

  &lt;p&gt;Error boundaries only catch errors in the components &lt;strong&gt;below&lt;/strong&gt; them in the tree. An error boundary can’t catch an error within itself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;setstate&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setState()&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;setState(updater[, callback])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setState()&lt;/code&gt; enqueues changes to the component state and tells React that this component and its children need to be re-rendered with the updated state. This is the primary method you use to update the user interface in response to event handlers and server responses.&lt;/p&gt;

&lt;p&gt;Think of &lt;code class=&quot;highlighter-rouge&quot;&gt;setState()&lt;/code&gt; as a &lt;em&gt;request&lt;/em&gt; rather than an immediate command to update the component. For better perceived performance, React may delay it, and then update several components in a single pass. React does not guarantee that the state changes are applied immediately.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setState()&lt;/code&gt; does not always immediately update the component. It may batch or defer the update until later. This makes reading &lt;code class=&quot;highlighter-rouge&quot;&gt;this.state&lt;/code&gt; right after calling &lt;code class=&quot;highlighter-rouge&quot;&gt;setState()&lt;/code&gt; a potential pitfall. Instead, use &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidUpdate&lt;/code&gt; or a &lt;code class=&quot;highlighter-rouge&quot;&gt;setState&lt;/code&gt; callback (&lt;code class=&quot;highlighter-rouge&quot;&gt;setState(updater, callback)&lt;/code&gt;), either of which are guaranteed to fire after the update has been applied. If you need to set the state based on the previous state, read about the &lt;code class=&quot;highlighter-rouge&quot;&gt;updater&lt;/code&gt; argument below.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setState()&lt;/code&gt; will always lead to a re-render unless &lt;code class=&quot;highlighter-rouge&quot;&gt;shouldComponentUpdate()&lt;/code&gt; returns &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;. If mutable objects are being used and conditional rendering logic cannot be implemented in &lt;code class=&quot;highlighter-rouge&quot;&gt;shouldComponentUpdate()&lt;/code&gt;, calling &lt;code class=&quot;highlighter-rouge&quot;&gt;setState()&lt;/code&gt; only when the new state differs from the previous state will avoid unnecessary re-renders.&lt;/p&gt;

&lt;p&gt;The first argument is an &lt;code class=&quot;highlighter-rouge&quot;&gt;updater&lt;/code&gt; function with the signature:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(prevState, props) =&amp;gt; stateChange
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;prevState&lt;/code&gt; is a reference to the previous state. It should not be directly mutated. Instead, changes should be represented by building a new object based on the input from &lt;code class=&quot;highlighter-rouge&quot;&gt;prevState&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;. For instance, suppose we wanted to increment a value in state by &lt;code class=&quot;highlighter-rouge&quot;&gt;props.step&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;this.setState((prevState, props) =&amp;gt; {
  return {counter: prevState.counter + props.step};
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Both &lt;code class=&quot;highlighter-rouge&quot;&gt;prevState&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt; received by the updater function are guaranteed to be up-to-date. The output of the updater is shallowly merged with &lt;code class=&quot;highlighter-rouge&quot;&gt;prevState&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second parameter to &lt;code class=&quot;highlighter-rouge&quot;&gt;setState()&lt;/code&gt; is an optional callback function that will be executed once &lt;code class=&quot;highlighter-rouge&quot;&gt;setState&lt;/code&gt; is completed and the component is re-rendered. Generally we recommend using &lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidUpdate()&lt;/code&gt; for such logic instead.&lt;/p&gt;

&lt;p&gt;You may optionally pass an object as the first argument to &lt;code class=&quot;highlighter-rouge&quot;&gt;setState()&lt;/code&gt; instead of a function:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;setState(stateChange[, callback])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This performs a shallow merge of &lt;code class=&quot;highlighter-rouge&quot;&gt;stateChange&lt;/code&gt; into the new state, e.g., to adjust a shopping cart item quantity:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;this.setState({quantity: 2})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This form of &lt;code class=&quot;highlighter-rouge&quot;&gt;setState()&lt;/code&gt; is also asynchronous, and multiple calls during the same cycle may be batched together. For example, if you attempt to increment an item quantity more than once in the same cycle, that will result in the equivalent of:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Object.assign(
  previousState,
  {quantity: state.quantity + 1},
  {quantity: state.quantity + 1},
  ...
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Subsequent calls will override values from previous calls in the same cycle, so the quantity will only be incremented once. If the next state depends on the previous state, we recommend using the updater function form, instead:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;this.setState((prevState) =&amp;gt; {
  return {quantity: prevState.quantity + 1};
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For more detail, see:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://reactjs.org/docs/state-and-lifecycle.html&quot;&gt;State and Lifecycle guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/48610973/458193&quot;&gt;In depth: When and why are &lt;code class=&quot;highlighter-rouge&quot;&gt;setState()&lt;/code&gt; calls batched?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/facebook/react/issues/11527#issuecomment-360199710&quot;&gt;In depth: Why isn’t &lt;code class=&quot;highlighter-rouge&quot;&gt;this.state&lt;/code&gt; updated immediately?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;forceupdate&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;forceUpdate()&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;component.forceUpdate(callback)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By default, when your component’s state or props change, your component will re-render. If your &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; method depends on some other data, you can tell React that the component needs re-rendering by calling &lt;code class=&quot;highlighter-rouge&quot;&gt;forceUpdate()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Calling &lt;code class=&quot;highlighter-rouge&quot;&gt;forceUpdate()&lt;/code&gt; will cause &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt; to be called on the component, skipping &lt;code class=&quot;highlighter-rouge&quot;&gt;shouldComponentUpdate()&lt;/code&gt;. This will trigger the normal lifecycle methods for child components, including the &lt;code class=&quot;highlighter-rouge&quot;&gt;shouldComponentUpdate()&lt;/code&gt; method of each child. React will still only update the DOM if the markup changes.&lt;/p&gt;

&lt;p&gt;Normally you should try to avoid all uses of &lt;code class=&quot;highlighter-rouge&quot;&gt;forceUpdate()&lt;/code&gt; and only read from &lt;code class=&quot;highlighter-rouge&quot;&gt;this.props&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;this.state&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;render()&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;portals&quot;&gt;Portals&lt;/h1&gt;

&lt;p&gt;Portals provide a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ReactDOM.createPortal(child, container)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first argument (&lt;code class=&quot;highlighter-rouge&quot;&gt;child&lt;/code&gt;) is any &lt;a href=&quot;https://reactjs.org/docs/react-component.html#render&quot;&gt;renderable React child&lt;/a&gt;, such as an element, string, or fragment. The second argument (&lt;code class=&quot;highlighter-rouge&quot;&gt;container&lt;/code&gt;) is a DOM element.&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;Normally, when you return an element from a component’s render method, it’s mounted into the DOM as a child of the nearest parent node:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;render() {
  // React mounts a new div and renders the children into it
  return (
    &amp;lt;div&amp;gt;
      {this.props.children}
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, sometimes it’s useful to insert a child into a different location in the DOM:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;render() {
  // React does *not* create a new div. It renders the children into `domNode`.
  // `domNode` is any valid DOM node, regardless of its location in the DOM.
  return ReactDOM.createPortal(
    this.props.children,
    domNode
  );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A typical use case for portals is when a parent component has an &lt;code class=&quot;highlighter-rouge&quot;&gt;overflow: hidden&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;z-index&lt;/code&gt; style, but you need the child to visually “break out” of its container. For example, dialogs, hovercards, and tooltips.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note:&lt;/p&gt;

  &lt;p&gt;It is important to remember, when working with portals, you’ll need to make sure to follow the proper accessibility guidelines.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/gaearon/pen/yzMaBd&quot;&gt;Try it on CodePen.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;event-bubbling-through-portals&quot;&gt;Event Bubbling Through Portals&lt;/h2&gt;

&lt;p&gt;Even though a portal can be anywhere in the DOM tree, it behaves like a normal React child in every other way. Features like context work exactly the same regardless of whether the child is a portal, as the portal still exists in the &lt;em&gt;React tree&lt;/em&gt; regardless of position in the &lt;em&gt;DOM tree&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This includes event bubbling. An event fired from inside a portal will propagate to ancestors in the containing &lt;em&gt;React tree&lt;/em&gt;, even if those elements are not ancestors in the &lt;em&gt;DOM tree&lt;/em&gt;. Assuming the following HTML structure:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app-root&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;modal-root&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;Parent&lt;/code&gt; component in &lt;code class=&quot;highlighter-rouge&quot;&gt;#app-root&lt;/code&gt; would be able to catch an uncaught, bubbling event from the sibling node &lt;code class=&quot;highlighter-rouge&quot;&gt;#modal-root&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// These two containers are siblings in the DOM
const appRoot = document.getElementById('app-root');
const modalRoot = document.getElementById('modal-root');

class Modal extends React.Component {
  constructor(props) {
    super(props);
    this.el = document.createElement('div');
  }

  componentDidMount() {
    // The portal element is inserted in the DOM tree after
    // the Modal's children are mounted, meaning that children
    // will be mounted on a detached DOM node. If a child
    // component requires to be attached to the DOM tree
    // immediately when mounted, for example to measure a
    // DOM node, or uses 'autoFocus' in a descendant, add
    // state to Modal and only render the children when Modal
    // is inserted in the DOM tree.
    modalRoot.appendChild(this.el);
  }

  componentWillUnmount() {
    modalRoot.removeChild(this.el);
  }

  render() {
    return ReactDOM.createPortal(
      this.props.children,
      this.el,
    );
  }
}

class Parent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {clicks: 0};
    this.handleClick = this.handleClick.bind(this);
  }

  handleClick() {
    // This will fire when the button in Child is clicked,
    // updating Parent's state, even though button
    // is not direct descendant in the DOM.
    this.setState(prevState =&amp;gt; ({
      clicks: prevState.clicks + 1
    }));
  }

  render() {
    return (
      &amp;lt;div onClick={this.handleClick}&amp;gt;
        &amp;lt;p&amp;gt;Number of clicks: {this.state.clicks}&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;
          Open up the browser DevTools
          to observe that the button
          is not a child of the div
          with the onClick handler.
        &amp;lt;/p&amp;gt;
        &amp;lt;Modal&amp;gt;
          &amp;lt;Child /&amp;gt;
        &amp;lt;/Modal&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

function Child() {
  // The click event on this button will bubble up to parent,
  // because there is no 'onClick' attribute defined
  return (
    &amp;lt;div className=&quot;modal&quot;&amp;gt;
      &amp;lt;button&amp;gt;Click&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

ReactDOM.render(&amp;lt;Parent /&amp;gt;, appRoot);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/gaearon/pen/jGBWpE&quot;&gt;Try it on CodePen.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Catching an event bubbling up from a portal in a parent component allows the development of more flexible abstractions that are not inherently reliant on portals. For example, if you render a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Modal /&amp;gt;&lt;/code&gt; component, the parent can capture its events regardless of whether it’s implemented using portals.&lt;/p&gt;

&lt;h2 id=&quot;redux---three-principles&quot;&gt;Redux - Three Principles&lt;/h2&gt;

&lt;h3 id=&quot;single-source-of-truth&quot;&gt;Single source of truth&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;The&lt;/strong&gt; &lt;a href=&quot;https://redux.js.org/glossary#state&quot;&gt;&lt;strong&gt;state&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;of your whole application is stored in an object tree within a single&lt;/strong&gt; &lt;a href=&quot;https://redux.js.org/glossary#store&quot;&gt;&lt;strong&gt;store&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This makes it easy to create universal apps, as the state from your server can be serialized and hydrated into the client with no extra coding effort. A single state tree also makes it easier to debug or inspect an application; it also enables you to persist your app’s state in development, for a faster development cycle. Some functionality which has been traditionally difficult to implement - Undo/Redo, for example - can suddenly become trivial to implement, if all of your state is stored in a single tree.&lt;/p&gt;

&lt;h3 id=&quot;state-is-read-only&quot;&gt;State is read-only:&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;The only way to change the state is to emit an&lt;/strong&gt; &lt;a href=&quot;https://redux.js.org/glossary#action&quot;&gt;&lt;strong&gt;action&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;, an object describing what happened.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This ensures that neither the views nor the network callbacks will ever write directly to the state. Instead, they express an intent to transform the state. Because all changes are centralized and happen one by one in a strict order, there are no subtle race conditions to watch out for. As actions are just plain objects, they can be logged, serialized, stored, and later replayed for debugging or testing purposes.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'COMPLETE_TODO'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'SET_VISIBILITY_FILTER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'SHOW_COMPLETED'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;changes-are-made-with-pure-functions&quot;&gt;Changes are made with pure functions:&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;To specify how the state tree is transformed by actions, you write pure&lt;/strong&gt; &lt;a href=&quot;https://redux.js.org/glossary#reducer&quot;&gt;&lt;strong&gt;reducers&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Reducers are just pure functions that take the previous state and an action, and return the next state. Remember to return new state objects, instead of mutating the previous state. You can start with a single reducer, and as your app grows, split it off into smaller reducers that manage specific parts of the state tree. Because reducers are just functions, you can control the order in which they are called, pass additional data, or even make reusable reducers for common tasks such as pagination.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Javascript&quot;&gt;function visibilityFilter(state = 'SHOW_ALL', action) {
  switch (action.type) {
    case 'SET_VISIBILITY_FILTER':
      return action.filter
    default:
      return state
  }
}
 
function todos(state = [], action) {
  switch (action.type) {
    case 'ADD_TODO':
      return [
        ...state,
        {
          text: action.text,
          completed: false
        }
      ]
    case 'COMPLETE_TODO':
      return state.map((todo, index) =&amp;gt; {
        if (index === action.index) {
          return Object.assign({}, todo, {
            completed: true
          })
        }
        return todo
      })
    default:
      return state
  }
}
 
import { combineReducers, createStore } from 'redux'
const reducer = combineReducers({ visibilityFilter, todos })
const store = createStore(reducer)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;action&quot;&gt;Action:&lt;/h3&gt;

&lt;p&gt;First, let’s define some actions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Actions&lt;/strong&gt; are payloads of information that send data from your application to your store. They are the &lt;em&gt;only&lt;/em&gt; source of information for the store. You send them to the store using &lt;a href=&quot;https://redux.js.org/api-reference/store#dispatch&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;store.dispatch()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here’s an example action which represents adding a new todo item:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const ADD_TODO = 'ADD_TODO'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  type: ADD_TODO,
  text: 'Build my first Redux app'
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Actions are plain JavaScript objects. Actions must have a &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; property that indicates the type of action being performed. Types should typically be defined as string constants. Once your app is large enough, you may want to move them into a separate module.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { ADD_TODO, REMOVE_TODO } from '../actionTypes'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;note-on-boilerplate&quot;&gt;Note on Boilerplate&lt;/h3&gt;

  &lt;p&gt;You don’t have to define action type constants in a separate file, or even to define them at all. For a small project, it might be easier to just use string literals for action types. However, there are some benefits to explicitly declaring constants in larger codebases. Read &lt;a href=&quot;https://redux.js.org/recipes/reducing-boilerplate&quot;&gt;Reducing Boilerplate&lt;/a&gt; for more practical tips on keeping your codebase clean.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Other than &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;, the structure of an action object is really up to you. If you’re interested, check out &lt;a href=&quot;https://github.com/acdlite/flux-standard-action&quot;&gt;Flux Standard Action&lt;/a&gt; for recommendations on how actions could be constructed.&lt;/p&gt;

&lt;p&gt;We’ll add one more action type to describe a user ticking off a todo as completed. We refer to a particular todo by &lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt; because we store them in an array. In a real app, it is wiser to generate a unique ID every time something new is created.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  type: TOGGLE_TODO,
  index: 5
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s a good idea to pass as little data in each action as possible. For example, it’s better to pass &lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt; than the whole todo object.&lt;/p&gt;

&lt;p&gt;Finally, we’ll add one more action type for changing the currently visible todos.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  type: SET_VISIBILITY_FILTER,
  filter: SHOW_COMPLETED
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;action-creators&quot;&gt;Action Creators&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Action creators&lt;/strong&gt; are exactly that—functions that create actions. It’s easy to conflate the terms “action” and “action creator”, so do your best to use the proper term.&lt;/p&gt;

&lt;p&gt;In Redux, action creators simply return an action:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function addTodo(text) {
  return {
    type: ADD_TODO,
    text
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This makes them portable and easy to test.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;http://facebook.github.io/flux&quot;&gt;traditional Flux&lt;/a&gt;, action creators often trigger a dispatch when invoked, like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function addTodoWithDispatch(text) {
  const action = {
    type: ADD_TODO,
    text
  }
  dispatch(action)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In Redux this is &lt;em&gt;not&lt;/em&gt; the case.Instead, to actually initiate a dispatch, pass the result to the &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch()&lt;/code&gt; function:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dispatch(addTodo(text))
dispatch(completeTodo(index))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Alternatively, you can create a &lt;strong&gt;bound action creator&lt;/strong&gt; that automatically dispatches:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const boundAddTodo = text =&amp;gt; dispatch(addTodo(text))
const boundCompleteTodo = index =&amp;gt; dispatch(completeTodo(index))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you’ll be able to call them directly:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boundAddTodo(text)
boundCompleteTodo(index)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch()&lt;/code&gt; function can be accessed directly from the store as &lt;a href=&quot;https://redux.js.org/api-reference/store#dispatch&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;store.dispatch()&lt;/code&gt;&lt;/a&gt;, but more likely you’ll access it using a helper like &lt;a href=&quot;http://github.com/gaearon/react-redux&quot;&gt;react-redux&lt;/a&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;connect()&lt;/code&gt;. You can use &lt;a href=&quot;https://redux.js.org/api-reference/bindactioncreators&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bindActionCreators()&lt;/code&gt;&lt;/a&gt; to automatically bind many action creators to a &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Action creators can also be asynchronous and have side-effects. You can read about &lt;a href=&quot;https://redux.js.org/advanced/async-actions&quot;&gt;async actions&lt;/a&gt; in the &lt;a href=&quot;https://redux.js.org/advanced&quot;&gt;advanced tutorial&lt;/a&gt; to learn how to handle AJAX responses and compose action creators into async control flow. Don’t skip ahead to async actions until you’ve completed the basics tutorial, as it covers other important concepts that are prerequisite for the advanced tutorial and async actions.&lt;/p&gt;

&lt;h3 id=&quot;data-flow---most-important&quot;&gt;Data Flow - Most Important&lt;/h3&gt;

&lt;p&gt;Redux architecture revolves around a &lt;strong&gt;strict unidirectional data flow&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This means that all data in an application follows the same lifecycle pattern, making the logic of your app more predictable and easier to understand. It also encourages data normalization, so that you don’t end up with multiple, independent copies of the same data that are unaware of one another.&lt;/p&gt;

&lt;p&gt;If you’re still not convinced, read &lt;a href=&quot;https://redux.js.org/introduction/motivation&quot;&gt;Motivation&lt;/a&gt; and &lt;a href=&quot;https://medium.com/@dan_abramov/the-case-for-flux-379b7d1982c6&quot;&gt;The Case for Flux&lt;/a&gt; for a compelling argument in favor of unidirectional data flow. Although &lt;a href=&quot;https://redux.js.org/introduction/prior-art&quot;&gt;Redux is not exactly Flux&lt;/a&gt;, it shares the same key benefits.&lt;/p&gt;

&lt;p&gt;The data lifecycle in any Redux app follows these 4 steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;You call&lt;/strong&gt; &lt;a href=&quot;https://redux.js.org/api-reference/store#dispatch&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;store.dispatch(action)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;An &lt;a href=&quot;https://redux.js.org/basics/actions&quot;&gt;action&lt;/a&gt; is a plain object describing &lt;em&gt;what happened&lt;/em&gt;. For example:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; { type: 'LIKE_ARTICLE', articleId: 42 }
 { type: 'FETCH_USER_SUCCESS', response: { id: 3, name: 'Mary' } }
 { type: 'ADD_TODO', text: 'Read the Redux docs.' }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Think of an action as a very brief snippet of news. “Mary liked article 42.” or “‘Read the Redux docs.’ was added to the list of todos.”&lt;/p&gt;

    &lt;p&gt;You can call &lt;a href=&quot;https://redux.js.org/api-reference/store#dispatch&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;store.dispatch(action)&lt;/code&gt;&lt;/a&gt; from anywhere in your app, including components and XHR callbacks, or even at scheduled intervals.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The Redux store calls the reducer function you gave it.&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;The &lt;a href=&quot;https://redux.js.org/basics/store&quot;&gt;store&lt;/a&gt; will pass two arguments to the &lt;a href=&quot;https://redux.js.org/basics/reducers&quot;&gt;reducer&lt;/a&gt;: the current state tree and the action. For example, in the todo app, the root reducer might receive something like this:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; // The current application state (list of todos and chosen filter)
 let previousState = {
   visibleTodoFilter: 'SHOW_ALL',
   todos: [
     {
       text: 'Read the docs.',
       complete: false
     }
   ]
 }
 
 // The action being performed (adding a todo)
 let action = {
   type: 'ADD_TODO',
   text: 'Understand the flow.'
 }
 
 // Your reducer returns the next application state
 let nextState = todoApp(previousState, action)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Note that a reducer is a pure function. It only &lt;em&gt;computes&lt;/em&gt; the next state. It should be completely predictable: calling it with the same inputs many times should produce the same outputs. It shouldn’t perform any side effects like API calls or router transitions. These should happen before an action is dispatched.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The root reducer may combine the output of multiple reducers into a single state tree.&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;How you structure the root reducer is completely up to you. Redux ships with a &lt;a href=&quot;https://redux.js.org/api-reference/combinereducers&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers()&lt;/code&gt;&lt;/a&gt; helper function, useful for “splitting” the root reducer into separate functions that each manage one branch of the state tree.&lt;/p&gt;

    &lt;p&gt;Here’s how &lt;a href=&quot;https://redux.js.org/api-reference/combinereducers&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers()&lt;/code&gt;&lt;/a&gt; works. Let’s say you have two reducers, one for a list of todos, and another for the currently selected filter setting:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; function todos(state = [], action) {
   // Somehow calculate it...
   return nextState
 }
 
 function visibleTodoFilter(state = 'SHOW_ALL', action) {
   // Somehow calculate it...
   return nextState
 }
 
 let todoApp = combineReducers({
   todos,
   visibleTodoFilter
 })
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;When you emit an action, &lt;code class=&quot;highlighter-rouge&quot;&gt;todoApp&lt;/code&gt; returned by &lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers&lt;/code&gt; will call both reducers:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; let nextTodos = todos(state.todos, action)
 let nextVisibleTodoFilter = visibleTodoFilter(state.visibleTodoFilter, action)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;It will then combine both sets of results into a single state tree:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; return {
   todos: nextTodos,
   visibleTodoFilter: nextVisibleTodoFilter
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;While &lt;a href=&quot;https://redux.js.org/api-reference/combinereducers&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;combineReducers()&lt;/code&gt;&lt;/a&gt; is a handy helper utility, you don’t have to use it; feel free to write your own root reducer!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The Redux store saves the complete state tree returned by the root reducer.&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;This new tree is now the next state of your app! Every listener registered with &lt;a href=&quot;https://redux.js.org/api-reference/store#subscribe&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;store.subscribe(listener)&lt;/code&gt;&lt;/a&gt; will now be invoked; listeners may call &lt;a href=&quot;https://redux.js.org/api-reference/store#getState&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;store.getState()&lt;/code&gt;&lt;/a&gt; to get the current state.&lt;/p&gt;

    &lt;p&gt;Now, the UI can be updated to reflect the new state. If you use bindings like &lt;a href=&quot;https://github.com/gaearon/react-redux&quot;&gt;React Redux&lt;/a&gt;, this is the point at which &lt;code class=&quot;highlighter-rouge&quot;&gt;component.setState(newState)&lt;/code&gt; is called.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;docs-to-view&quot;&gt;Docs to View:&lt;/h1&gt;

&lt;h5 id=&quot;1-google-docs-overview&quot;&gt;1. Google Docs Overview:&lt;/h5&gt;

&lt;h6 id=&quot;httpsdocsgooglecomdocumentd1crsp0a16jlzhwr-o3dsatfigxkfgyoe72mu4b1wnjxkedituserstoinviteparthmehtaoathcomts5ac3fcb5actionbutton1&quot;&gt;https://docs.google.com/document/d/1CrsP0a16JLZHWR-O3dsATFIGxKFgyOE72Mu4b1wnJxk/edit?userstoinvite=parth.mehta@oath.com&amp;amp;ts=5ac3fcb5&amp;amp;actionButton=1&lt;/h6&gt;

&lt;h5 id=&quot;2-react-docs-httpsreactjsorg&quot;&gt;2. React Docs: https://reactjs.org&lt;/h5&gt;

&lt;h5 id=&quot;3-redux-docs-httpsreduxjsorg&quot;&gt;3. Redux Docs: https://redux.js.org&lt;/h5&gt;

&lt;h5 id=&quot;4-redux-select-httpsgithubcomreactjsreselect&quot;&gt;4. Redux-Select: https://github.com/reactjs/reselect&lt;/h5&gt;

&lt;h5 id=&quot;5-react-atomic-css-httpsgitouroathcommailreact-atomic-css&quot;&gt;5. React-atomic-css: https://git.ouroath.com/Mail/react-atomic-css&lt;/h5&gt;</content><author><name>Parth Mehta</name><email>pm2877@columbia.edu</email></author><summary type="html">Important concepts captured from React documentation</summary></entry><entry><title type="html">Search at scale</title><link href="http://localhost:4000/Search-at-Scale/" rel="alternate" type="text/html" title="Search at scale" /><published>2017-11-18T07:00:00-08:00</published><updated>2017-11-18T07:00:00-08:00</updated><id>http://localhost:4000/Search-at-Scale</id><content type="html" xml:base="http://localhost:4000/Search-at-Scale/">&lt;h5 id=&quot;a-collection-of-insights-and-resources-that-could-help-you-to-build-search-experiences&quot;&gt;A collection of insights and resources that could help you to build search experiences&lt;/h5&gt;

&lt;p&gt;[TOC]&lt;/p&gt;

&lt;h2 id=&quot;search-is-an-inherently-messy-problem&quot;&gt;Search is an inherently messy problem:&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Queries are highly variable.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The search problems are highly variable based on product needs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Think about how different Facebook search (searching a graph of people),&lt;/p&gt;

    &lt;p&gt;YouTube search (searching individual videos), Or how different both of those are are from Kayak (air travel planning is a really hairy problem).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Google Maps (making sense of geo-spacial data).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Pinterest (pictures of a brunch you might cook one day).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;u&gt;**Note:**&lt;/u&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Search is not just about building software that does ranking or retrieval for a specific domain. Search systems are usually an evolving pipeline of components that are tuned and evolve over time and that build up to a cohesive experience.&lt;/li&gt;
  &lt;li&gt;The key to success in search is building processes for evaluation and tuning into the product and development cycles. A search system architect should think about processes and metrics, not just technologies.&lt;/li&gt;
  &lt;li&gt;❗️Even if you are using an existing open source or commercial solution, you should have some sense of the &lt;strong&gt;complexity of the search problem&lt;/strong&gt; and where there are likely to be pitfalls.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Named-entity recognition&lt;/strong&gt;
Named-entity recognition (NER) (also known as entity identification, entity chunking and entity extraction) is a subtask of information extraction that seeks to locate and classify named entities in text into pre-defined categories such as the names of persons, organizations, locations, expressions of times, quantities, monetary values, percentages, etc.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Locality-sensitive hashing (LSH)&lt;/strong&gt; reduces the dimensionality of high-dimensional data. LSH hashes input items so that similar items map to the same “buckets” with high probability (the number of buckets being much smaller than the universe of possible input items). LSH differs from conventional and cryptographic hash functions because it aims to maximize the probability of a “collision” for similar items.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Search is different for every product, and choices depend on many technical details of the requirements. It helps to identify the key parameters of your search problem:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Size: How big is the corpus (a complete set of documents that need to be searched)? Is it thousands or billions of documents?&lt;/li&gt;
  &lt;li&gt;Media: Are you searching through text, images, graphical relationships, or geospatial data?&lt;/li&gt;
  &lt;li&gt;🔷 Corpus control and quality: Are the sources for the documents under your control, or coming from a (potentially adversarial) third party? Are all the documents ready to be indexed or need to be cleaned up and selected?&lt;/li&gt;
  &lt;li&gt;Indexing speed: Do you need real-time indexing, or is building indices in batch is fine?&lt;/li&gt;
  &lt;li&gt;Query language: Are the queries structured, or you need to support unstructured ones?&lt;/li&gt;
  &lt;li&gt;Query structure: Are your queries textual, images, sounds? Street addresses, record ids, people’s faces?&lt;/li&gt;
  &lt;li&gt;Context-dependence: Do the results depend on who the user is, what is their history with the product, their geographical location, time of the day etc?&lt;/li&gt;
  &lt;li&gt;Suggest support: Do you need to support incomplete queries?&lt;/li&gt;
  &lt;li&gt;Latency: What are the serving latency requirements? 100 milliseconds or 100 seconds?&lt;/li&gt;
  &lt;li&gt;Access control: Is it entirely public or should users only see a restricted subset of the documents?&lt;/li&gt;
  &lt;li&gt;Compliance: Are there compliance or organizational limitations?&lt;/li&gt;
  &lt;li&gt;Internationalization: Do you need to support documents with multilingual character sets or Unicode? (Hint: Always use UTF-8 unless you really know what you’re doing.) Do you need to support a multilingual corpus? Multilingual queries?&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;search-pipeline-problems&quot;&gt;Search Pipeline problems&lt;/h2&gt;

&lt;h3 id=&quot;1-index-selection&quot;&gt;1. Index selection:&lt;/h3&gt;

&lt;p&gt;given a set of documents (e.g. the entirety of the Internet, all the Twitter posts, all the pictures on Instagram), select a potentially smaller subset of documents that may be worthy for consideration as search results and only include those in the index, discarding the rest. This is done to keep your indexes compact, and is almost orthogonal to selecting the documents to show to the user. Examples of particular classes of documents that don’t make the cut may include:&lt;/p&gt;

&lt;h4 id=&quot;a-spam&quot;&gt;a. Spam:&lt;/h4&gt;

&lt;p&gt;oh, all the different shapes and sizes of search spam! A giant topic in itself, worthy of a separate guide. A good web spam taxonomy overview.&lt;/p&gt;

&lt;h4 id=&quot;b-undesirable-documents&quot;&gt;b. Undesirable documents:&lt;/h4&gt;

&lt;p&gt;domain constraints might require filtering: porn, illegal content, etc. The techniques are similar to spam filtering, probably with extra heuristics.&lt;/p&gt;

&lt;h4 id=&quot;c-duplicates&quot;&gt;c. Duplicates:&lt;/h4&gt;

&lt;p&gt;Or near-duplicates and redundant documents. Can be done with Locality-sensitive hashing, similarity measures, clustering techniques or even clickthrough data. A good overview of techniques.&lt;/p&gt;

&lt;h4 id=&quot;d-low-utility-documents&quot;&gt;d. Low-utility documents:&lt;/h4&gt;

&lt;p&gt;The definition of utility depends highly on the problem domain, so it’s hard to recommend the approaches here. Some ideas are: it might be possible to build a utility function for your documents; heuristics might work, or example an image that contains only black pixels is not a useful document; utility might be learned from user behavior.&lt;/p&gt;

&lt;h3 id=&quot;2-index-construction&quot;&gt;2. Index construction:&lt;/h3&gt;

&lt;p&gt;For most search systems, document retrieval is performed using an inverted index — often just called the index.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The index is a mapping of search terms to documents. A search term could be a word, an image feature or any other document derivative useful for query-to-document matching. The list of the documents for a given term is called a posting list. It can be sorted by some metric, like document quality.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Figure out whether you need to index the data in real time.❗️Many companies with large corpora of documents use a batch-oriented indexing approach, but then find this is unsuited to a product where users expect results to be current.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;With text documents, term extraction usually involves using NLP techniques, such as stop lists, stemming and entity extraction; for images or videos computer vision methods are used etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In addition, documents are mined for statistical and meta information, such as references to other documents (used in the famous PageRank ranking signal), topics, counts of term occurrences, document size, entities A mentioned etc. That information can be later used in ranking signal construction or document clustering. Some larger systems might contain several indexes, e.g. for documents of different types.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Index formats. The actual structure and layout of the index is a complex topic, since it can be optimized in many ways. For instance there are posting lists compression methods, one could target mmap()able data representation or use LSM-tree for continuously updated index.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;query-analysis-and-document-retrieval&quot;&gt;Query analysis and document retrieval:&lt;/h2&gt;

&lt;p&gt;Most popular search systems allow non-structured queries. That means the system has to extract structure out of the query itself. In the case of an inverted index, you need to extract search terms using NLP techniques.
The extracted terms can be used to retrieve relevant documents. Unfortunately, most queries are not very well formulated, so it pays to do additional query expansion and rewriting, like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://orion.lcg.ufrj.br/Dr.Dobbs/books/book5/chap11.htm&quot;&gt;Term re-weighting&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://norvig.com/spell-correct.html&quot;&gt;Spell checking&lt;/a&gt;. Historical query logs are very useful as a dictionary.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://nlp.stanford.edu/IR-book/html/htmledition/query-expansion-1.html&quot;&gt;Synonym matching&lt;/a&gt;. Another survey.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Named-entity_recognition&quot;&gt;Named entity recognition&lt;/a&gt;. A good approach is to use HMM-based language modeling.&lt;/li&gt;
  &lt;li&gt;Query classification. Detect queries of particular type. For example, Google Search detects queries that contain a geographical entity, a porny query, or a query about something in the news. The retrieval algorithm can then make a decision about which corpora or indexes to look at.&lt;/li&gt;
  &lt;li&gt;Expansion through personalization or local context. Useful for queries like “gas stations around me”.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ranking&quot;&gt;Ranking:&lt;/h2&gt;

&lt;p&gt;Given a list of documents (retrieved in the previous step), their signals, and a processed query, create an optimal ordering (ranking) for those documents.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Originally, most ranking models in use were hand-tuned weighted combinations of all the document signals. Signal sets might include PageRank, clickthrough data, topicality information and others.&lt;/li&gt;
  &lt;li&gt;To further complicate things, many of those signals, such as PageRank, or ones generated by statistical language models contain parameters that greatly affect the performance of a signal. Those have to be hand-tuned too.&lt;/li&gt;
  &lt;li&gt;Lately, 🔷 learning to rank, signal-based discriminative supervised approaches are becoming more and more popular. Some popular examples of LtR are McRank and LambdaRank from Microsoft, and MatrixNet from Yandex.&lt;/li&gt;
  &lt;li&gt;A new, vector space based approach for semantic retrieval and ranking is gaining popularity lately. The idea is to learn individual low-dimensional vector document representations, then build a model which maps queries into the same vector space.&lt;/li&gt;
  &lt;li&gt;Then, retrieval is just finding several documents that are closest by some metric (e.g. Eucledian distance) to the query vector. Ranking is the distance itself. If the mapping of both the documents and queries is built well, the documents are chosen not by a fact of presence of some simple pattern (like a word), but how close the documents are to the query by meaning.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;indexing-pipeline-operation&quot;&gt;Indexing pipeline operation&lt;/h2&gt;

&lt;p&gt;Usually, each of the above pieces of the pipeline must be operated on a regular basis to keep the search index and search experience current.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;❗️Operating a search pipeline can be complex and involve a lot of moving pieces. Not only is the data moving through the pipeline, but the code for each module and the formats and assumptions embedded in the data will change over time.&lt;/li&gt;
  &lt;li&gt;A pipeline can be run in “batch” or based on a regular or occasional basis (if indexing speed does not need to be real time) or in a streamed way (if real-time indexing is needed) or based on certain triggers.&lt;/li&gt;
  &lt;li&gt;Some complex search engines (like Google) have several layers of pipelines operating on different time scales — for example, a page that changes often (like cnn.com) is indexed with a higher frequency than a static page that hasn’t changed in years.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;serving-systems&quot;&gt;==Serving systems==&lt;/h2&gt;

&lt;p&gt;Ultimately, the goal of a search system is to accept queries, and use the index to return appropriately ranked results. While this subject can be incredibly complex and technical, we mention a few of the key aspects to this part of the system.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Performance:&lt;/strong&gt; users notice when the system they interact with is laggy. ❗️Google has done extensive research, and they have noticed that number of searches falls 0.6%, when serving is slowed by 300ms. They recommend to serve results under 200 ms for most of your queries. A good article on the topic. This is the hard part: the system needs to collect documents from, possibly, many computers, than merge them into possible a very long list and then sort that list in the ranking order. To complicate things further, ranking might be query-dependent, so, while sorting, the system is not just comparing 2 numbers, but performing computation.&lt;/li&gt;
  &lt;li&gt;🔷 &lt;strong&gt;Caching results:&lt;/strong&gt; is often necessary to achieve decent performance. ❗️ But caches are just one large gotcha. The might show stale results when indices are updated or some results are blacklisted. Purging caches is a can of worms of itself: a search system might not have the capacity to serve the entire query stream with an empty (cold) cache, so the cache needs to be pre-warmed before the queries start arriving. Overall, caches complicate a system’s performance profile. Choosing a cache size and a replacement algorithm is also a challenge.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Availability:&lt;/strong&gt; is often defined by an uptime/(uptime + downtime) metric. When the index is distributed, in order to serve any search results, the system often needs to query all the shards for their share of results. ❗️That means, that if one shard is unavailable, the entire search system is compromised. The more machines are involved in serving the index — the higher the probability of one of them becoming defunct and bringing the whole system down.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Managing multiple indices:&lt;/strong&gt; Indices for large systems may separated into shards (pieces) or divided by media type or indexing cadence (fresh versus long-term indices). Results can then be merged.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Merging results of different kinds:&lt;/strong&gt; e.g. Google showing results from Maps, News etc.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;quality-evaluation-and-improvement&quot;&gt;Quality, evaluation, and improvement&lt;/h2&gt;

&lt;p&gt;So you’ve launched your indexing pipeline and search servers, and it’s all running nicely. Unfortunately the road to a solid search experience only begins with running infrastructure.&lt;/p&gt;

&lt;p&gt;Next, you’ll need to build a set of processes around continuous search quality evaluation and improvement. In fact, this is actually most of the work and the hardest problem you’ll have to solve.&lt;/p&gt;

&lt;p&gt;🔷 &lt;strong&gt;What is quality?&lt;/strong&gt; First, you’ll need to determine (and get your boss or the product lead to agree), what quality means in your case:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Self-reported user satisfaction (includes UX)&lt;/li&gt;
  &lt;li&gt;Perceived relevance of the returned results (not including UX)&lt;/li&gt;
  &lt;li&gt;Satisfaction relative to competitors&lt;/li&gt;
  &lt;li&gt;Satisfaction relative performance of the previous version of the search engine (e.g. last week)&lt;/li&gt;
  &lt;li&gt;User engagement&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Metrics:&lt;/strong&gt; Some of these concepts can be quite hard to quantify. On the other hand, it’s incredibly useful to be able to express how well a search engine is performing in a single number, a quality metric.
Continuously computing such a metric for your (and your competitors’) system you can both track your progress and explain how well you are doing to your boss. Here are some classical ways to quantify quality, that can help you construct your magic quality metric formula:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Precision and recall measure how well the retrieved set of documents corresponds to the set you expected to see.&lt;/li&gt;
  &lt;li&gt;F score (specifically F1 score) is a single number, that represents both precision and recall well.&lt;/li&gt;
  &lt;li&gt;Mean Average Precision (MAP) allows to quantify the relevance of the top returned results.&lt;/li&gt;
  &lt;li&gt;🔷 Normalized Discounted Cumulative Gain (nDCG) is like MAP, but weights the relevance of the result by its position.&lt;/li&gt;
  &lt;li&gt;Long and short clicks — Allow to quantify how useful the results are to the real users.&lt;/li&gt;
  &lt;li&gt;A good detailed overview.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;🔷 &lt;strong&gt;Human evaluations:&lt;/strong&gt; Quality metrics might seem like statistical calculations, but they can’t all be done by automated calculations. Ultimately, metrics need to represent subjective human evaluation, and this is where a “human in the loop” comes into play.
❗️==Skipping human evaluation is probably the most spread reason of sub-par search experiences.==&lt;/p&gt;

&lt;p&gt;Usually, at early stages the developers themselves evaluate the results manually. At later point human raters (or assessors) may get involved. Raters typically use custom tools to look at returned search results and provide feedback on the quality of the results.&lt;/p&gt;

&lt;p&gt;Subsequently, you can use the feedback signals to guide development, help make launch decisions or even feed them back into the index selection, retrieval or ranking systems.&lt;/p&gt;

&lt;p&gt;Here is the list of some other types of human-driven evaluation, that can be done on a search system:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Basic user evaluation: The user ranks their satisfaction with the whole experience&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Comparative evaluation: Compare with other search results (compare with search results from earlier versions of the system or competitors)&lt;/li&gt;
  &lt;li&gt;Retrieval evaluation: The query analysis and retrieval quality is often evaluated using manually constructed query-document sets. A user is shown a query and the list of the retrieved documents. She can then mark all the documents that are relevant to the query, and the ones that are not. The resulting pairs of (query, [relevant docs]) are called a “golden set”. Golden sets are remarkably useful. For one, an engineer can set up automatic retrieval regression tests using those sets. The selection signal from golden sets can also be fed back as ground truth to term re-weighting and other query re-writing models.&lt;/li&gt;
  &lt;li&gt;Ranking evaluation: Raters are presented with a query and two documents side-by-side. The rater must choose the document that fits the query better. This creates a partial ordering on the documents for a given query. That ordering can be later be compared to the output of the ranking system. The usual ranking quality measures used are MAP and nDCG.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Evaluation datasets:&lt;/strong&gt;
One should start thinking about the datasets used for evaluation (like “golden sets” mentioned above) early in the search experience design process. How you collect and update them? How you push them to the production eval pipeline? Is there a built-in bias?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Live experiments:&lt;/strong&gt;
After your search engine catches on and gains enough users, you might want to start conducting live search experiments on a portion of your traffic. The basic idea is to turn some optimization on for a group of people, and then compare the outcome with that of a “control” group — a similar sample of your users that did not have the experiment feature on for them. How you would measure the outcome is, once again, very product specific: it could be clicks on results, clicks on ads etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Evaluation cycle time:&lt;/strong&gt; How fast you improve your search quality is directly related to how fast you can complete the above cycle of measurement and improvement. It is essential from the beginning to ask yourself, “how fast can we measure and improve our performance?”&lt;/p&gt;

&lt;p&gt;Will it take days, hours, minutes or seconds to make changes and see if they improve quality? ❗️Running evaluation should also be as easy as possible for the engineers and should not take too much hands-on time.&lt;/p&gt;</content><author><name>Parth Mehta</name><email>pm2877@columbia.edu</email></author><summary type="html">What every software engineer should know about search</summary></entry><entry><title type="html">System Design and Scalability</title><link href="http://localhost:4000/System-Design-and-Scalability/" rel="alternate" type="text/html" title="System Design and Scalability" /><published>2017-10-27T06:10:06-07:00</published><updated>2017-10-27T06:10:06-07:00</updated><id>http://localhost:4000/System-Design-and-Scalability</id><content type="html" xml:base="http://localhost:4000/System-Design-and-Scalability/">&lt;blockquote&gt;
  &lt;p&gt;The idea of these questions is to have a discussion about the problem at hand. What’s important for the interviewer is the process, which you use to tackle the problem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Remember that there is no one right answer. A system can be built in different ways. The important thing is to be able to justify your ideas.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;System design questions require a combination of the right strategy and knowledge. By strategy we mean a way to approach the problem at an interview.&lt;/p&gt;

&lt;h2 id=&quot;important-links&quot;&gt;Important Links&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=-W9F__D3oY4&quot;&gt;Harvard Video&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/checkcheckzz/system-design-interview&quot;&gt;Extensive Prep&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://neil.fraser.name/writing/sync/&quot;&gt;Differential Synchronization&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.lecloud.net/tagged/scalability&quot;&gt;Scalability for Dummies&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://ninenines.eu/docs/en/cowboy/2.0/guide/rest_principles/&quot;&gt;REST principles&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.hiredintech.com/classrooms/system-design/lesson/60&quot;&gt;HiredInTech&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.25hoursaday.com/weblog/2009/01/16/BuildingScalableDatabasesProsAndConsOfVariousDatabaseShardingSchemes.aspx&quot;&gt;Database sharding&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1108/how-does-database-indexing-work&quot;&gt;Database Indexing&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;system-design-process&quot;&gt;System Design Process&lt;/h2&gt;
&lt;h3 id=&quot;constraints-and-use-cases&quot;&gt;Constraints and Use Cases&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The very first thing you should do with any system design question is to clarify the system’s constraints and to identify what use cases the system needs to satisfy.&lt;/li&gt;
  &lt;li&gt;Usually, part of what the interviewer wants to see is if you can gather the requirements about the problem at hand, and design a solution that covers them well. Never assume things that were not explicitly stated.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Constraints consist of either the amount of traffic or the amount of data that our system needs to handle&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Find the data per second(read and written), and memory required&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Imagine this is your startup idea and you are designing your system. This way, you would eliminate many assumptions that you would normally make when you try and replicate a well-established system like bit.ly or Google.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;abstract-design&quot;&gt;Abstract Design&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Once you’ve scoped the system you’re about to design, you should continue by outlining a high-level abstract design. The goal of this is to outline all the important components that your architecture will need.&lt;/li&gt;
  &lt;li&gt;Sketch your main components and the connections between them. If you do this, very quickly you will be able to get feedback if you are moving in the right direction. Of course, you must be able to justify the high-level design that you just drew.&lt;/li&gt;
  &lt;li&gt;Don’t get lured to dive deep into some particular aspect of the abstract design. Not yet. Rather, make sure you sketch the important components and the connections between them. Justify your ideas in front of the interviewer and try to address every constraint and use case.&lt;/li&gt;
  &lt;li&gt;Usually, this sort of high-level design is a combination of well-known techniques, which people have developed. You have to make sure you are familiar with what’s out there and feel comfortable using this knowledge.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;understanding-bottlenecks&quot;&gt;Understanding Bottlenecks&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Most likely your high-level design will have one or more bottlenecks given the constraints of the problem. This is perfectly ok. You are not expected to design a system from the ground up, which immediately handles all the load in the world. It just needs to be scalable, in order for you to be able to improve it using some standard tools and techniques.&lt;/li&gt;
  &lt;li&gt;Now that you have your high-level design, start thinking about what bottlenecks it has. Perhaps your system needs a load balancer and many machines behind it to handle the user requests. Or maybe the data is so huge that you need to distribute your database on multiple machines. What are some of the downsides that occur from doing that? Is the database too slow and does it need some in-memory caching?&lt;/li&gt;
  &lt;li&gt;It may be the case that the interviewer wants to direct the discussion in one particular direction. Then, maybe you won’t need to address all the bottlenecks but rather talk in more depth about one particular area. In any case, you need to be able to identify the weak spots in a system and be able to resolve them.&lt;/li&gt;
  &lt;li&gt;Remember, usually each solution is a trade-off of some kind. Changing something will worsen something else. However, the important thing is to be able to talk about these trade-offs, and to measure their impact on the system given the constraints and use cases defined.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;scaling-the-abstract-design&quot;&gt;Scaling the Abstract Design&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;There is a common set of scalability principles that you need to know. Knowing what they are, understanding how they are used, and being able to discuss their pros and cons is what scalability at interviews is all about.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Parth Mehta</name><email>pm2877@columbia.edu</email></author><summary type="html">The idea of these questions is to have a discussion about the problem at hand. What’s important for the interviewer is the process, which you use to tackle the problem.</summary></entry><entry><title type="html">Java Trivia Questions</title><link href="http://localhost:4000/Java-Trivia/" rel="alternate" type="text/html" title="Java Trivia Questions" /><published>2017-09-25T08:13:06-07:00</published><updated>2017-09-25T08:13:06-07:00</updated><id>http://localhost:4000/Java-Trivia</id><content type="html" xml:base="http://localhost:4000/Java-Trivia/">&lt;p&gt;Notes taken from: &lt;a href=&quot;https://www.javatpoint.com/corejava-interview-questions&quot;&gt;JavaTpoint&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;side-notes&quot;&gt;Side Notes:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;No need to remove unreferenced objects because there is Automatic Garbage Collection in java.&lt;/li&gt;
  &lt;li&gt;Java is secured because:
    &lt;ol&gt;
      &lt;li&gt;No explicit pointer&lt;/li&gt;
      &lt;li&gt;Java Programs run inside virtual machine sandbox&lt;/li&gt;
      &lt;li&gt;There is exception handling and type checking mechanism in java (Java is a statically typed language).&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;In C programming, int data type occupies 2 bytes of memory for 32-bit architecture and 4 bytes of memory for 64-bit architecture. But in java, it occupies 4 bytes of memory for both 32 and 64 bit architectures.&lt;/li&gt;
  &lt;li&gt;Whenever you write java command on the command prompt to run the java class, an instance of JVM is created.&lt;/li&gt;
  &lt;li&gt;Java Stack stores frames.It holds local variables and partial results, and plays a part in method invocation and return. Each thread has a private JVM stack, created at the same time as thread. A new frame is created each time a method is invoked. A frame is destroyed when its method invocation completes.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;There are three types of variables in java: local, instance and static.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;In java programming, multiple and hybrid inheritance is supported through interface only&lt;/li&gt;
  &lt;li&gt;super() can be used to invoke immediate parent class constructor.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;super() is added in each class constructor automatically by compiler if there is no super() or this().&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Runtime polymorphism can’t be achieved by data members.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;An object is an instance of particular java class, but it is also an instance of its superclass.&lt;/li&gt;
  &lt;li&gt;I&lt;strong&gt;f there is any abstract method in a class, that class must be abstract.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;If you are extending any abstract class that have abstract method, you must either provide the implementation of the method or make this class abstract.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Abstraction in Java can be achieved through abstract classes or interfaces. Interface provides full abstraction because it is just a blueprint and all methods are abstract. In an abstract class, some methods may not be abstract.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Since Java 8, interface can have default and static methods&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The java compiler adds public and abstract keywords before the interface method. More, it adds public, static and final keywords before data members.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Since Java 8, we can have method body in interface. But we need to make it default method.&lt;/li&gt;
  &lt;li&gt;Since Java 8, we can have static method in interface.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;If you don’t handle exception, before terminating the program, JVM executes finally block(if any).&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;For each try block there can be zero or more catch blocks, but only one finally block.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The finally block will not be executed if program exits(either by calling System.exit() or by causing a fatal error that causes the process to abort).&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;String objects are stored in a special memory area known as string constant pool.&lt;/li&gt;
  &lt;li&gt;To create the singleton class, we need to have static member of class, private constructor and static factory method.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;object-oriented&quot;&gt;Object-oriented&lt;/h3&gt;

&lt;p&gt;Object-oriented means we organize our software as a combination of different types of objects that incorporates both data and behaviour.
Object-oriented programming(OOPs) is a methodology that simplify software development and maintenance by providing some rules.&lt;/p&gt;

&lt;p&gt;Basic concepts of OOPs are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Object&lt;/li&gt;
  &lt;li&gt;Class&lt;/li&gt;
  &lt;li&gt;Inheritance&lt;/li&gt;
  &lt;li&gt;Polymorphism&lt;/li&gt;
  &lt;li&gt;Abstraction&lt;/li&gt;
  &lt;li&gt;Encapsulation&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;platform-independent&quot;&gt;Platform-Independent&lt;/h3&gt;
&lt;p&gt;A platform is the hardware or software environment in which a program runs.&lt;/p&gt;

&lt;p&gt;There are two types of platforms software-based and hardware-based. Java provides software-based platform.&lt;/p&gt;

&lt;p&gt;The Java platform differs from most other platforms in the sense that it is a software-based platform that runs on the top of other hardware-based platforms. It has two components:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Runtime Environment&lt;/li&gt;
  &lt;li&gt;API(Application Programming Interface)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Java code can be run on multiple platforms e.g. Windows, Linux, Sun Solaris, Mac/OS etc. Java code is compiled by the compiler and converted into bytecode. This bytecode is a platform-independent code because it can be run on multiple platforms i.e. Write Once and Run Anywhere(WORA).&lt;/p&gt;

&lt;h3 id=&quot;multi-threading-in-java&quot;&gt;Multi-threading in Java&lt;/h3&gt;

&lt;p&gt;A thread is like a separate program, executing concurrently. We can write Java programs that deal with many tasks at once by defining multiple threads. The main advantage of multi-threading is that it doesn’t occupy memory for each thread. It shares a common memory area.&lt;/p&gt;

&lt;h3 id=&quot;diff-between-c-and-java&quot;&gt;Diff between C++ and Java&lt;/h3&gt;
&lt;p&gt;https://www.javatpoint.com/cpp-vs-java&lt;/p&gt;

&lt;h3 id=&quot;q--what-happens-at-runtime-and-compile-time&quot;&gt;Q.  What happens at runtime and compile time?&lt;/h3&gt;

&lt;h3 id=&quot;q-comparison-of-jre-jdk-jvm&quot;&gt;Q. **Comparison of JRE, JDK, JVM&lt;/h3&gt;

&lt;h3 id=&quot;q-why-char-uses-2-byte-in-java-and-what-is-u0000-&quot;&gt;Q. Why char uses 2 byte in java and what is \u0000 ?&lt;/h3&gt;

&lt;p&gt;It is because java uses Unicode system than ASCII code system. The \u0000 is the lowest range of Unicode system.&lt;/p&gt;

&lt;h3 id=&quot;what-is-difference-between-object-oriented-programming-language-and-object-based-programming-language&quot;&gt;What is difference between object oriented programming language and object based programming language?&lt;/h3&gt;

&lt;p&gt;Object based programming languages follow all the features of OOPs except Inheritance. Examples of object based programming languages are JavaScript, VBScript etc.&lt;/p&gt;

&lt;h3 id=&quot;what-is-constructor&quot;&gt;What is constructor?&lt;/h3&gt;

&lt;p&gt;Constructor is just like a method that is used to initialize the state of an object. It is invoked at the time of object creation.&lt;/p&gt;

&lt;h3 id=&quot;does-constructor-return-any-value&quot;&gt;**Does constructor return any value?&lt;/h3&gt;

&lt;p&gt;Yes, that is current class instance (You cannot use return type yet it returns a value).&lt;/p&gt;

&lt;h3 id=&quot;what-is-a-java-static-block&quot;&gt;**What is a Java static block?&lt;/h3&gt;

&lt;p&gt;Is used to initialize the static data member.
It is executed before main method at the time of classloading.&lt;/p&gt;

&lt;h3 id=&quot;what-is-inheritance&quot;&gt;What is Inheritance?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Inheritance in java is a mechanism in which one object acquires all the properties and behaviors of parent object.&lt;/li&gt;
  &lt;li&gt;The idea behind inheritance in java is that you can create new classes that are built upon existing classes. When you inherit from an existing class, you can reuse methods and fields of parent class, and you can add new methods and fields also.&lt;/li&gt;
  &lt;li&gt;Inheritance represents the IS-A relationship, also known as parent-child relationship.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-is-aggregation&quot;&gt;What is Aggregation?&lt;/h3&gt;
&lt;p&gt;Has-A relationship. When an object of one class is instantiated in another class.&lt;/p&gt;

&lt;h3 id=&quot;when-use-aggregation&quot;&gt;When use Aggregation?&lt;/h3&gt;
&lt;p&gt;Code reuse is best achieved by aggregation when there is no is-a relationship.
Inheritance should be used only if the relationship is-a is maintained throughout the lifetime of the objects involved; otherwise, aggregation is the best choice.&lt;/p&gt;

&lt;h3 id=&quot;method-overriding&quot;&gt;Method Overriding&lt;/h3&gt;
&lt;p&gt;If subclass (child class) has the same method as declared in the parent class, it is known as method overriding in java.&lt;/p&gt;

&lt;h3 id=&quot;can-we-override-static-method&quot;&gt;Can we override static method?&lt;/h3&gt;
&lt;p&gt;No, you can’t override the static method because they are the part of class not object.&lt;/p&gt;

&lt;h3 id=&quot;what-is-covariant-return-type&quot;&gt;What is covariant return type?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;overriding a method by just changing the return type. (when return type is non-primitive).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;java-final-variable&quot;&gt;Java final variable&lt;/h3&gt;
&lt;p&gt;If you make any variable as final, you cannot change the value of final variable(It will be constant).&lt;/p&gt;

&lt;h3 id=&quot;java-final-method&quot;&gt;Java final method&lt;/h3&gt;
&lt;p&gt;If you make any method as final, you cannot override it.&lt;/p&gt;

&lt;h3 id=&quot;java-final-class&quot;&gt;Java final class&lt;/h3&gt;
&lt;p&gt;If you make any class as final, you cannot extend it.&lt;/p&gt;

&lt;h3 id=&quot;what-is-blank-or-uninitialized-final-variable&quot;&gt;**What is blank or uninitialized final variable?&lt;/h3&gt;

&lt;p&gt;A final variable that is not initialized at the time of declaration is known as blank final variable.&lt;/p&gt;

&lt;p&gt;If you want to create a variable that is initialized at the time of creating object and once initialized may not be changed, it is useful. For example PAN CARD number of an employee.&lt;/p&gt;

&lt;p&gt;It can be initialized only in constructor.&lt;/p&gt;

&lt;h3 id=&quot;what-is-static-blank-final-variable&quot;&gt;**What is static blank final variable&lt;/h3&gt;

&lt;p&gt;A static final variable that is not initialized at the time of declaration is known as static blank final variable. It can be initialized only in static block.&lt;/p&gt;

&lt;h3 id=&quot;what-is-polymorphism&quot;&gt;What is Polymorphism?&lt;/h3&gt;
&lt;p&gt;Polymorphism in java is a concept by which we can perform a single action by different ways.&lt;/p&gt;

&lt;p&gt;There are two types of polymorphism in java: compile time polymorphism and runtime polymorphism. We can perform polymorphism in java by method overloading and method overriding.&lt;/p&gt;

&lt;p&gt;** &lt;strong&gt;If you overload static method in java, it is the example of compile time polymorphism. Here, we will focus on runtime polymorphism in java&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Runtime polymorphism or Dynamic Method Dispatch is a process in which a call to an overridden method is resolved at runtime rather than compile-time&lt;/p&gt;

&lt;h3 id=&quot;upcasting&quot;&gt;Upcasting&lt;/h3&gt;
&lt;p&gt;When reference variable of Parent class refers to the object of Child class, it is known as upcasting&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Upcasting + overriding = runtime polymorphism&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Java Runtime Polymorphism with Data Member&lt;/p&gt;

&lt;p&gt;** &lt;em&gt;Method is overridden not the datamembers, so runtime polymorphism can’t be achieved by data members.
In the example given below, both the classes have a datamember speedlimit, we are accessing the datamember by the reference variable of Parent class which refers to the subclass object. Since we are accessing the datamember which is not overridden, hence it will access the datamember of Parent class always.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;static-binding&quot;&gt;Static binding&lt;/h3&gt;
&lt;p&gt;When type of the object is determined at compiled time(by the compiler), it is known as static binding.&lt;/p&gt;

&lt;p&gt;If there is any private, final or static method in a class, there is static binding.&lt;/p&gt;

&lt;h3 id=&quot;dynamic-binding&quot;&gt;Dynamic binding&lt;/h3&gt;
&lt;p&gt;When type of the object is determined at run-time, it is known as dynamic binding.&lt;/p&gt;

&lt;h3 id=&quot;abstract-class-in-java&quot;&gt;Abstract class in Java&lt;/h3&gt;

&lt;p&gt;A class that is declared with abstract keyword, is known as abstract class in java. It can have abstract and non-abstract methods (method with body).&lt;/p&gt;

&lt;p&gt;It needs to be extended and its method implemented. &lt;strong&gt;It cannot be instantiated.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;abstract-method&quot;&gt;Abstract method&lt;/h3&gt;

&lt;p&gt;A method that is declared as abstract and does not have implementation is known as abstract method.&lt;/p&gt;

&lt;h3 id=&quot;interface-in-java&quot;&gt;Interface in Java&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;An interface in java is a blueprint of a class. It has static constants and abstract methods.&lt;/li&gt;
  &lt;li&gt;The interface in java is a mechanism to achieve abstraction.&lt;/li&gt;
  &lt;li&gt;There can be only abstract methods in the java interface not method body.&lt;/li&gt;
  &lt;li&gt;It is used to achieve abstraction and multiple inheritance in Java.&lt;/li&gt;
  &lt;li&gt;Java Interface also represents IS-A relationship.
-** It cannot be instantiated just like abstract class.**&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;q-why-use-java-interface&quot;&gt;Q. Why use Java interface?&lt;/h3&gt;

&lt;p&gt;There are mainly three reasons to use interface:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It is used to achieve abstraction.&lt;/li&gt;
  &lt;li&gt;By using interface, we can support the functionality of multiple inheritance.&lt;/li&gt;
  &lt;li&gt;It can be used to achieve loose coupling.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;q-can-you-declare-an-interface-method-static&quot;&gt;Q. Can you declare an interface method static?&lt;/h3&gt;

&lt;p&gt;No, because methods of an interface is abstract by default, and &lt;strong&gt;static and abstract keywords can’t be used together&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;multiple-inheritance-in-java-by-interface&quot;&gt;Multiple inheritance in Java by interface&lt;/h3&gt;

&lt;p&gt;If a class implements multiple interfaces, or an interface extends multiple interfaces i.e. known as multiple inheritance.&lt;/p&gt;

&lt;h3 id=&quot;multiple-inheritance-is-not-supported-through-class-in-java-but-it-is-possible-by-interface-why&quot;&gt;Multiple inheritance is not supported through class in java but it is possible by interface, why?&lt;/h3&gt;

&lt;p&gt;As we have explained in the inheritance chapter, multiple inheritance is not supported in case of class because of ambiguity. But it is supported in case of interface because there is no ambiguity as implementation is provided by the implementation class.&lt;/p&gt;

&lt;h3 id=&quot;q-can-we-define-private-and-protected-modifiers-for-variables-in-interfaces&quot;&gt;Q. **Can we define private and protected modifiers for variables in interfaces?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;No, they are implicitly public.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;q-when-can-an-object-reference-be-cast-to-an-interface-reference&quot;&gt;Q. When can an object reference be cast to an interface reference?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;An object reference can be cast to an interface reference when the object implements the referenced interface.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;q-what-is-package&quot;&gt;Q. What is package?&lt;/h3&gt;

&lt;p&gt;A package is a group of similar type of classes, interfaces and sub-packages. It provides access protection and removes naming collision.&lt;/p&gt;

&lt;h3 id=&quot;what-is-the-difference-between-import-and-static-import&quot;&gt;**What is the difference between import and static import?&lt;/h3&gt;

&lt;p&gt;The import allows the java programmer to access classes of a package without package qualification whereas the static import feature allows to access the static members of a class without the class qualification. The import provides accessibility to classes and interface whereas static import provides accessibility to static members of the class.&lt;/p&gt;

&lt;h3 id=&quot;q-what-is-exception-handling&quot;&gt;Q. What is Exception Handling?&lt;/h3&gt;
&lt;p&gt;Exception Handling is a mechanism to handle runtime errors.&lt;/p&gt;

&lt;h3 id=&quot;java-finally-block&quot;&gt;Java finally block&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Java finally block follows try or catch block.&lt;/li&gt;
  &lt;li&gt;Java finally block is always executed whether exception occurs or not and whether it is handled or not.&lt;/li&gt;
  &lt;li&gt;Java finally block is a block that is used to execute important code such as closing connection, stream etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;q-why-are-string-objects-immutable-in-java&quot;&gt;Q. **Why are string objects immutable in Java?&lt;/h3&gt;

&lt;p&gt;Because java uses the concept of string literal. Suppose there are 5 reference variables, all refer to one object “sachin”.If one reference variable changes the value of the object, it will be affected to all the reference variables. That is why string objects are immutable in java.&lt;/p&gt;

&lt;h3 id=&quot;each-time-you-create-a-string-literal-the-jvm-checks-the-string-constant-pool-first-if-the-string-already-exists-in-the-pool-a-reference-to-the-pooled-instance-is-returned-if-string-doesnt-exist-in-the-pool-a-new-string-instance-is-created-and-placed-in-the-pool-for-example&quot;&gt;Each time you create a string literal, the JVM checks the string constant pool first. If the string already exists in the pool, a reference to the pooled instance is returned. If string doesn’t exist in the pool, a new string instance is created and placed in the pool. For example:&lt;/h3&gt;

&lt;p&gt;String s1=”Welcome”;&lt;br /&gt;
String s2=”Welcome”;//will not create new instance&lt;/p&gt;

&lt;h3 id=&quot;q-why-java-uses-concept-of-string-literal&quot;&gt;Q. Why java uses concept of string literal?&lt;/h3&gt;

&lt;p&gt;To make Java more memory efficient&lt;/p&gt;

&lt;h3 id=&quot;by-new-keyword&quot;&gt;By new keyword&lt;/h3&gt;

&lt;p&gt;String s=new String(“Welcome”); //creates two objects and one reference variable&lt;/p&gt;

&lt;p&gt;In such case, JVM will create a new string object in normal(non pool) heap memory and the literal “Welcome” will be placed in the string constant pool. The variable s will refer to the object in heap(non pool).&lt;/p&gt;

&lt;h3 id=&quot;stringbuffer&quot;&gt;StringBuffer&lt;/h3&gt;
&lt;p&gt;Java StringBuffer class is thread-safe i.e. multiple threads cannot access it simultaneously (synchronized). So it is safe and will result in an order.&lt;/p&gt;

&lt;h3 id=&quot;stringbuilder&quot;&gt;StringBuilder&lt;/h3&gt;
&lt;p&gt;The Java StringBuilder class is same as StringBuffer class except that it is non-synchronized. It is also more efficient than StringBuffer.&lt;/p&gt;

&lt;h3 id=&quot;multi-threading&quot;&gt;**Multi-threading&lt;/h3&gt;
&lt;p&gt;Multithreading in java is a process of executing multiple threads simultaneously.&lt;/p&gt;

&lt;p&gt;Thread is basically a lightweight sub-process, a smallest unit of processing. Multiprocessing and multithreading, both are used to achieve multitasking.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But we use multithreading than multiprocessing because threads share a common memory area. They don’t allocate separate memory area so saves memory, and context-switching between the threads takes less time than process.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;life-cycle-of-threads&quot;&gt;Life-cycle of threads&lt;/h3&gt;
&lt;p&gt;The life cycle of the thread in java is controlled by JVM. The java thread states are as follows:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;New&lt;/li&gt;
  &lt;li&gt;Runnable&lt;/li&gt;
  &lt;li&gt;Non-Runnable (Blocked)&lt;/li&gt;
  &lt;li&gt;Terminated&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-to-create-thread&quot;&gt;How to create thread&lt;/h3&gt;

&lt;p&gt;There are two ways to create a thread:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;By extending Thread class&lt;/li&gt;
  &lt;li&gt;By implementing Runnable interface. (If you are not extending the Thread class,your class object would not be treated as a thread object.So you need to explicitely create Thread class object.We are passing the object of your class that implements Runnable so that your class run() method may execute)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;what-if-we-call-run-method-directly-instead-start-method&quot;&gt;**What if we call run() method directly instead start() method?&lt;/h3&gt;

&lt;p&gt;Each thread starts in a separate call stack.
Invoking the run() method from main thread, the run() method goes onto the current call stack rather than at the beginning of a new call stack.&lt;/p&gt;

&lt;p&gt;refer this: https://www.javatpoint.com/what-if-we-call-run()-method-directly&lt;/p&gt;

&lt;h3 id=&quot;points-to-remember-for-daemon-thread-in-java&quot;&gt;Points to remember for Daemon Thread in Java&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;It provides services to user threads for background supporting tasks.&lt;/li&gt;
  &lt;li&gt;It has no role in life than to serve user threads.&lt;/li&gt;
  &lt;li&gt;Its life depends on user threads.&lt;/li&gt;
  &lt;li&gt;It is a low priority thread.&lt;/li&gt;
  &lt;li&gt;If you want to make a user thread as Daemon, it must not be started otherwise it will throw IllegalThreadStateException.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;java-thread-pool-represents-a-group-of-worker-threads-that-are-waiting-for-the-job-and-reuse-many-times&quot;&gt;Java Thread pool represents a group of worker threads that are waiting for the job and reuse many times.&lt;/h3&gt;

&lt;p&gt;In case of thread pool, a group of fixed size threads are created. A thread from the thread pool is pulled out and assigned a job by the service provider. After completion of the job, thread is contained in the thread pool again.&lt;/p&gt;

&lt;h3 id=&quot;advantage-of-java-thread-pool&quot;&gt;Advantage of Java Thread Pool&lt;/h3&gt;

&lt;p&gt;Better performance It saves time because there is no need to create new thread.&lt;/p&gt;

&lt;h3 id=&quot;java-garbage-collection&quot;&gt;Java Garbage Collection&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;In java, garbage means unreferenced objects.&lt;/li&gt;
  &lt;li&gt;Garbage Collection is process of reclaiming the runtime unused memory automatically.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In other words, it is a way to destroy the unused objects.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The finalize() method is invoked each time before the object is garbage collected. This method can be used to perform cleanup processing.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;The Garbage collector of JVM collects only those objects that are created by new keyword. So if you have created any object without new, you can use finalize method to perform cleanup processing&lt;/li&gt;
  &lt;li&gt;The gc() method is used to invoke the garbage collector to perform cleanup processing.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;synchronization-in-java&quot;&gt;Synchronization in Java&lt;/h3&gt;

&lt;p&gt;Synchronization in java is the capability to control the access of multiple threads to any shared resource.&lt;/p&gt;

&lt;p&gt;Java Synchronization is better option where we want to allow only one thread to access the shared resource.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Mutual Exclusive&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;Mutual Exclusive helps keep threads from interfering with one another while sharing data. This can be done by three ways in java:
    &lt;ol&gt;
      &lt;li&gt;by synchronized method&lt;/li&gt;
      &lt;li&gt;by synchronized block&lt;/li&gt;
      &lt;li&gt;by static synchronization&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;concept-of-lock-in-java&quot;&gt;Concept of Lock in Java&lt;/h3&gt;

&lt;p&gt;Synchronization is built around an internal entity known as the lock or monitor. Every object has an lock associated with it. By convention, a thread that needs consistent access to an object’s fields has to acquire the object’s lock before accessing them, and then release the lock when it’s done with them.&lt;/p&gt;

&lt;h3 id=&quot;synchronized-block-in-java&quot;&gt;Synchronized block in java&lt;/h3&gt;

&lt;p&gt;Synchronized block can be used to perform synchronization on any specific resource of the method.&lt;/p&gt;

&lt;p&gt;Suppose you have 50 lines of code in your method, but you want to synchronize only 5 lines, you can use synchronized block.&lt;/p&gt;

&lt;h3 id=&quot;advantage-of-static-synchronization-method&quot;&gt;Advantage of static synchronization method&lt;/h3&gt;

&lt;p&gt;If you make any static method as synchronized, the lock will be on the class not on object.&lt;/p&gt;

&lt;p&gt;Suppose there are two objects of a shared class(e.g. Table) named object1 and object2.In case of synchronized method and synchronized block there cannot be interference between t1 and t2 or t3 and t4 because t1 and t2 both refers to a common object that have a single lock.But there can be interference between t1 and t3 or t2 and t4 because t1 acquires another lock and t3 acquires another lock.I want no interference between t1 and t3 or t2 and t4.Static synchronization solves this problem.&lt;/p&gt;

&lt;h3 id=&quot;enums-in-java&quot;&gt;*Enums in Java&lt;/h3&gt;
&lt;p&gt;https://www.javatpoint.com/enum-in-java&lt;/p&gt;

&lt;h3 id=&quot;garbage-collection-in-java&quot;&gt;Garbage Collection in Java&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Garbage collection is the phrase used to describe automatic memory management in Java.&lt;/li&gt;
  &lt;li&gt;it’s typical for memory to be used to create a stack, a heap, in Java’s case constant pools, and method areas. The &lt;strong&gt;heap&lt;/strong&gt; is that part of memory where Java objects live, and &lt;strong&gt;it’s the one and only part of memory that is in any way involved in the garbage collection process.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;When the garbage collector runs, its purpose is to find and delete objects that cannot be reached.&lt;/li&gt;
  &lt;li&gt;An object is eligible for garbage collection when no live thread can access it.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Parth Mehta</name><email>pm2877@columbia.edu</email></author><summary type="html">Notes taken from: JavaTpoint</summary></entry></feed>